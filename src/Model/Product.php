<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'string',
        'additionalUnits' => 'float',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'components' => '\Seacommerce\Unit4\Multivers\Sdk\Model\Component[]',
        'constellationNotition' => 'string',
        'coverageAccountId' => 'string',
        'currentStock' => 'float',
        'dateCreated' => 'string',
        'description' => 'string',
        'discountAccountId' => 'string',
        'eANCode' => 'string',
        'intrastatCode' => 'int',
        'lastUpdate' => 'string',
        'margin' => 'float',
        'maxStock' => 'float',
        'minStock' => 'float',
        'pricePer' => 'float',
        'priceVatExcl' => 'float',
        'priceVatIncl' => 'float',
        'printOnInvoice' => 'bool',
        'printOnQuote' => 'bool',
        'printOnShippingOrder' => 'bool',
        'printOnWarehouseOrder' => 'bool',
        'productDescriptions' => '\Seacommerce\Unit4\Multivers\Sdk\Model\ProductDescription[]',
        'productDiscountGroupId' => 'string',
        'productGroupId' => 'string',
        'productId' => 'string',
        'productState' => 'int',
        'productSuppliers' => '\Seacommerce\Unit4\Multivers\Sdk\Model\ProductSupplier[]',
        'productType' => 'int',
        'projectEntryType' => 'int',
        'projectSurchargePerc' => 'float',
        'publishOnWeb' => 'bool',
        'purchaseOrderCount' => 'int',
        'quantityScale' => 'int',
        'shortName' => 'string',
        'stocks' => '\Seacommerce\Unit4\Multivers\Sdk\Model\Stock[]',
        'stockTransactionCount' => 'int',
        'stockTransferPrice' => 'float',
        'unit' => 'string',
        'vatCodeId' => 'int',
        'weight' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountId' => null,
        'additionalUnits' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'components' => null,
        'constellationNotition' => null,
        'coverageAccountId' => null,
        'currentStock' => null,
        'dateCreated' => null,
        'description' => null,
        'discountAccountId' => null,
        'eANCode' => null,
        'intrastatCode' => 'int32',
        'lastUpdate' => null,
        'margin' => null,
        'maxStock' => null,
        'minStock' => null,
        'pricePer' => null,
        'priceVatExcl' => null,
        'priceVatIncl' => null,
        'printOnInvoice' => null,
        'printOnQuote' => null,
        'printOnShippingOrder' => null,
        'printOnWarehouseOrder' => null,
        'productDescriptions' => null,
        'productDiscountGroupId' => null,
        'productGroupId' => null,
        'productId' => null,
        'productState' => null,
        'productSuppliers' => null,
        'productType' => null,
        'projectEntryType' => null,
        'projectSurchargePerc' => null,
        'publishOnWeb' => null,
        'purchaseOrderCount' => 'int32',
        'quantityScale' => 'int32',
        'shortName' => null,
        'stocks' => null,
        'stockTransactionCount' => 'int32',
        'stockTransferPrice' => null,
        'unit' => null,
        'vatCodeId' => 'int32',
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'additionalUnits' => 'additionalUnits',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'components' => 'components',
        'constellationNotition' => 'constellationNotition',
        'coverageAccountId' => 'coverageAccountId',
        'currentStock' => 'currentStock',
        'dateCreated' => 'dateCreated',
        'description' => 'description',
        'discountAccountId' => 'discountAccountId',
        'eANCode' => 'eANCode',
        'intrastatCode' => 'intrastatCode',
        'lastUpdate' => 'lastUpdate',
        'margin' => 'margin',
        'maxStock' => 'maxStock',
        'minStock' => 'minStock',
        'pricePer' => 'pricePer',
        'priceVatExcl' => 'priceVatExcl',
        'priceVatIncl' => 'priceVatIncl',
        'printOnInvoice' => 'printOnInvoice',
        'printOnQuote' => 'printOnQuote',
        'printOnShippingOrder' => 'printOnShippingOrder',
        'printOnWarehouseOrder' => 'printOnWarehouseOrder',
        'productDescriptions' => 'productDescriptions',
        'productDiscountGroupId' => 'productDiscountGroupId',
        'productGroupId' => 'productGroupId',
        'productId' => 'productId',
        'productState' => 'productState',
        'productSuppliers' => 'productSuppliers',
        'productType' => 'productType',
        'projectEntryType' => 'projectEntryType',
        'projectSurchargePerc' => 'projectSurchargePerc',
        'publishOnWeb' => 'publishOnWeb',
        'purchaseOrderCount' => 'purchaseOrderCount',
        'quantityScale' => 'quantityScale',
        'shortName' => 'shortName',
        'stocks' => 'stocks',
        'stockTransactionCount' => 'stockTransactionCount',
        'stockTransferPrice' => 'stockTransferPrice',
        'unit' => 'unit',
        'vatCodeId' => 'vatCodeId',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'additionalUnits' => 'setAdditionalUnits',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'components' => 'setComponents',
        'constellationNotition' => 'setConstellationNotition',
        'coverageAccountId' => 'setCoverageAccountId',
        'currentStock' => 'setCurrentStock',
        'dateCreated' => 'setDateCreated',
        'description' => 'setDescription',
        'discountAccountId' => 'setDiscountAccountId',
        'eANCode' => 'setEANCode',
        'intrastatCode' => 'setIntrastatCode',
        'lastUpdate' => 'setLastUpdate',
        'margin' => 'setMargin',
        'maxStock' => 'setMaxStock',
        'minStock' => 'setMinStock',
        'pricePer' => 'setPricePer',
        'priceVatExcl' => 'setPriceVatExcl',
        'priceVatIncl' => 'setPriceVatIncl',
        'printOnInvoice' => 'setPrintOnInvoice',
        'printOnQuote' => 'setPrintOnQuote',
        'printOnShippingOrder' => 'setPrintOnShippingOrder',
        'printOnWarehouseOrder' => 'setPrintOnWarehouseOrder',
        'productDescriptions' => 'setProductDescriptions',
        'productDiscountGroupId' => 'setProductDiscountGroupId',
        'productGroupId' => 'setProductGroupId',
        'productId' => 'setProductId',
        'productState' => 'setProductState',
        'productSuppliers' => 'setProductSuppliers',
        'productType' => 'setProductType',
        'projectEntryType' => 'setProjectEntryType',
        'projectSurchargePerc' => 'setProjectSurchargePerc',
        'publishOnWeb' => 'setPublishOnWeb',
        'purchaseOrderCount' => 'setPurchaseOrderCount',
        'quantityScale' => 'setQuantityScale',
        'shortName' => 'setShortName',
        'stocks' => 'setStocks',
        'stockTransactionCount' => 'setStockTransactionCount',
        'stockTransferPrice' => 'setStockTransferPrice',
        'unit' => 'setUnit',
        'vatCodeId' => 'setVatCodeId',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'additionalUnits' => 'getAdditionalUnits',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'components' => 'getComponents',
        'constellationNotition' => 'getConstellationNotition',
        'coverageAccountId' => 'getCoverageAccountId',
        'currentStock' => 'getCurrentStock',
        'dateCreated' => 'getDateCreated',
        'description' => 'getDescription',
        'discountAccountId' => 'getDiscountAccountId',
        'eANCode' => 'getEANCode',
        'intrastatCode' => 'getIntrastatCode',
        'lastUpdate' => 'getLastUpdate',
        'margin' => 'getMargin',
        'maxStock' => 'getMaxStock',
        'minStock' => 'getMinStock',
        'pricePer' => 'getPricePer',
        'priceVatExcl' => 'getPriceVatExcl',
        'priceVatIncl' => 'getPriceVatIncl',
        'printOnInvoice' => 'getPrintOnInvoice',
        'printOnQuote' => 'getPrintOnQuote',
        'printOnShippingOrder' => 'getPrintOnShippingOrder',
        'printOnWarehouseOrder' => 'getPrintOnWarehouseOrder',
        'productDescriptions' => 'getProductDescriptions',
        'productDiscountGroupId' => 'getProductDiscountGroupId',
        'productGroupId' => 'getProductGroupId',
        'productId' => 'getProductId',
        'productState' => 'getProductState',
        'productSuppliers' => 'getProductSuppliers',
        'productType' => 'getProductType',
        'projectEntryType' => 'getProjectEntryType',
        'projectSurchargePerc' => 'getProjectSurchargePerc',
        'publishOnWeb' => 'getPublishOnWeb',
        'purchaseOrderCount' => 'getPurchaseOrderCount',
        'quantityScale' => 'getQuantityScale',
        'shortName' => 'getShortName',
        'stocks' => 'getStocks',
        'stockTransactionCount' => 'getStockTransactionCount',
        'stockTransferPrice' => 'getStockTransferPrice',
        'unit' => 'getUnit',
        'vatCodeId' => 'getVatCodeId',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['additionalUnits'] = isset($data['additionalUnits']) ? $data['additionalUnits'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
        $this->container['constellationNotition'] = isset($data['constellationNotition']) ? $data['constellationNotition'] : null;
        $this->container['coverageAccountId'] = isset($data['coverageAccountId']) ? $data['coverageAccountId'] : null;
        $this->container['currentStock'] = isset($data['currentStock']) ? $data['currentStock'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discountAccountId'] = isset($data['discountAccountId']) ? $data['discountAccountId'] : null;
        $this->container['eANCode'] = isset($data['eANCode']) ? $data['eANCode'] : null;
        $this->container['intrastatCode'] = isset($data['intrastatCode']) ? $data['intrastatCode'] : null;
        $this->container['lastUpdate'] = isset($data['lastUpdate']) ? $data['lastUpdate'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['maxStock'] = isset($data['maxStock']) ? $data['maxStock'] : null;
        $this->container['minStock'] = isset($data['minStock']) ? $data['minStock'] : null;
        $this->container['pricePer'] = isset($data['pricePer']) ? $data['pricePer'] : null;
        $this->container['priceVatExcl'] = isset($data['priceVatExcl']) ? $data['priceVatExcl'] : null;
        $this->container['priceVatIncl'] = isset($data['priceVatIncl']) ? $data['priceVatIncl'] : null;
        $this->container['printOnInvoice'] = isset($data['printOnInvoice']) ? $data['printOnInvoice'] : null;
        $this->container['printOnQuote'] = isset($data['printOnQuote']) ? $data['printOnQuote'] : null;
        $this->container['printOnShippingOrder'] = isset($data['printOnShippingOrder']) ? $data['printOnShippingOrder'] : null;
        $this->container['printOnWarehouseOrder'] = isset($data['printOnWarehouseOrder']) ? $data['printOnWarehouseOrder'] : null;
        $this->container['productDescriptions'] = isset($data['productDescriptions']) ? $data['productDescriptions'] : null;
        $this->container['productDiscountGroupId'] = isset($data['productDiscountGroupId']) ? $data['productDiscountGroupId'] : null;
        $this->container['productGroupId'] = isset($data['productGroupId']) ? $data['productGroupId'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['productState'] = isset($data['productState']) ? $data['productState'] : null;
        $this->container['productSuppliers'] = isset($data['productSuppliers']) ? $data['productSuppliers'] : null;
        $this->container['productType'] = isset($data['productType']) ? $data['productType'] : null;
        $this->container['projectEntryType'] = isset($data['projectEntryType']) ? $data['projectEntryType'] : null;
        $this->container['projectSurchargePerc'] = isset($data['projectSurchargePerc']) ? $data['projectSurchargePerc'] : null;
        $this->container['publishOnWeb'] = isset($data['publishOnWeb']) ? $data['publishOnWeb'] : null;
        $this->container['purchaseOrderCount'] = isset($data['purchaseOrderCount']) ? $data['purchaseOrderCount'] : null;
        $this->container['quantityScale'] = isset($data['quantityScale']) ? $data['quantityScale'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['stocks'] = isset($data['stocks']) ? $data['stocks'] : null;
        $this->container['stockTransactionCount'] = isset($data['stockTransactionCount']) ? $data['stockTransactionCount'] : null;
        $this->container['stockTransferPrice'] = isset($data['stockTransferPrice']) ? $data['stockTransferPrice'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['vatCodeId'] = isset($data['vatCodeId']) ? $data['vatCodeId'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accountId']) && (mb_strlen($this->container['accountId']) > 8)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['additionalUnits']) && ($this->container['additionalUnits'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'additionalUnits', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['additionalUnits']) && ($this->container['additionalUnits'] < 0)) {
            $invalidProperties[] = "invalid value for 'additionalUnits', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['constellationNotition']) && (mb_strlen($this->container['constellationNotition']) > 60)) {
            $invalidProperties[] = "invalid value for 'constellationNotition', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['coverageAccountId']) && (mb_strlen($this->container['coverageAccountId']) > 8)) {
            $invalidProperties[] = "invalid value for 'coverageAccountId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 60)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['discountAccountId']) && (mb_strlen($this->container['discountAccountId']) > 8)) {
            $invalidProperties[] = "invalid value for 'discountAccountId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['eANCode']) && (mb_strlen($this->container['eANCode']) > 14)) {
            $invalidProperties[] = "invalid value for 'eANCode', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['intrastatCode']) && ($this->container['intrastatCode'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'intrastatCode', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['intrastatCode']) && ($this->container['intrastatCode'] < 0)) {
            $invalidProperties[] = "invalid value for 'intrastatCode', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['margin']) && ($this->container['margin'] > 9.9999)) {
            $invalidProperties[] = "invalid value for 'margin', must be smaller than or equal to 9.9999.";
        }

        if (!is_null($this->container['margin']) && ($this->container['margin'] < -9.9999)) {
            $invalidProperties[] = "invalid value for 'margin', must be bigger than or equal to -9.9999.";
        }

        if (!is_null($this->container['priceVatExcl']) && ($this->container['priceVatExcl'] > 999999999.99)) {
            $invalidProperties[] = "invalid value for 'priceVatExcl', must be smaller than or equal to 999999999.99.";
        }

        if (!is_null($this->container['priceVatExcl']) && ($this->container['priceVatExcl'] < 0)) {
            $invalidProperties[] = "invalid value for 'priceVatExcl', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['priceVatIncl']) && ($this->container['priceVatIncl'] > 999999999.99)) {
            $invalidProperties[] = "invalid value for 'priceVatIncl', must be smaller than or equal to 999999999.99.";
        }

        if (!is_null($this->container['priceVatIncl']) && ($this->container['priceVatIncl'] < 0)) {
            $invalidProperties[] = "invalid value for 'priceVatIncl', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['productDiscountGroupId']) && (mb_strlen($this->container['productDiscountGroupId']) > 3)) {
            $invalidProperties[] = "invalid value for 'productDiscountGroupId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['productGroupId']) && (mb_strlen($this->container['productGroupId']) > 3)) {
            $invalidProperties[] = "invalid value for 'productGroupId', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['productId'] === null) {
            $invalidProperties[] = "'productId' can't be null";
        }
        if ((mb_strlen($this->container['productId']) > 14)) {
            $invalidProperties[] = "invalid value for 'productId', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['projectSurchargePerc']) && ($this->container['projectSurchargePerc'] > 9.9999)) {
            $invalidProperties[] = "invalid value for 'projectSurchargePerc', must be smaller than or equal to 9.9999.";
        }

        if (!is_null($this->container['projectSurchargePerc']) && ($this->container['projectSurchargePerc'] < -9.9999)) {
            $invalidProperties[] = "invalid value for 'projectSurchargePerc', must be bigger than or equal to -9.9999.";
        }

        if (!is_null($this->container['quantityScale']) && ($this->container['quantityScale'] > 3)) {
            $invalidProperties[] = "invalid value for 'quantityScale', must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['quantityScale']) && ($this->container['quantityScale'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantityScale', must be bigger than or equal to 0.";
        }

        if ($this->container['shortName'] === null) {
            $invalidProperties[] = "'shortName' can't be null";
        }
        if ((mb_strlen($this->container['shortName']) > 8)) {
            $invalidProperties[] = "invalid value for 'shortName', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['stockTransferPrice']) && ($this->container['stockTransferPrice'] > 999999999.99)) {
            $invalidProperties[] = "invalid value for 'stockTransferPrice', must be smaller than or equal to 999999999.99.";
        }

        if (!is_null($this->container['stockTransferPrice']) && ($this->container['stockTransferPrice'] < 0)) {
            $invalidProperties[] = "invalid value for 'stockTransferPrice', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 6)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['vatCodeId']) && ($this->container['vatCodeId'] > 99)) {
            $invalidProperties[] = "invalid value for 'vatCodeId', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['vatCodeId']) && ($this->container['vatCodeId'] < 0)) {
            $invalidProperties[] = "invalid value for 'vatCodeId', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        if (!is_null($accountId) && (mb_strlen($accountId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $accountId when calling Product., must be smaller than or equal to 8.');
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets additionalUnits
     *
     * @return float|null
     */
    public function getAdditionalUnits()
    {
        return $this->container['additionalUnits'];
    }

    /**
     * Sets additionalUnits
     *
     * @param float|null $additionalUnits additionalUnits
     *
     * @return $this
     */
    public function setAdditionalUnits($additionalUnits)
    {

        if (!is_null($additionalUnits) && ($additionalUnits > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $additionalUnits when calling Product., must be smaller than or equal to 99999999.');
        }
        if (!is_null($additionalUnits) && ($additionalUnits < 0)) {
            throw new \InvalidArgumentException('invalid value for $additionalUnits when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['additionalUnits'] = $additionalUnits;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\Component[]|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\Component[]|null $components components
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets constellationNotition
     *
     * @return string|null
     */
    public function getConstellationNotition()
    {
        return $this->container['constellationNotition'];
    }

    /**
     * Sets constellationNotition
     *
     * @param string|null $constellationNotition constellationNotition
     *
     * @return $this
     */
    public function setConstellationNotition($constellationNotition)
    {
        if (!is_null($constellationNotition) && (mb_strlen($constellationNotition) > 60)) {
            throw new \InvalidArgumentException('invalid length for $constellationNotition when calling Product., must be smaller than or equal to 60.');
        }

        $this->container['constellationNotition'] = $constellationNotition;

        return $this;
    }

    /**
     * Gets coverageAccountId
     *
     * @return string|null
     */
    public function getCoverageAccountId()
    {
        return $this->container['coverageAccountId'];
    }

    /**
     * Sets coverageAccountId
     *
     * @param string|null $coverageAccountId coverageAccountId
     *
     * @return $this
     */
    public function setCoverageAccountId($coverageAccountId)
    {
        if (!is_null($coverageAccountId) && (mb_strlen($coverageAccountId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $coverageAccountId when calling Product., must be smaller than or equal to 8.');
        }

        $this->container['coverageAccountId'] = $coverageAccountId;

        return $this;
    }

    /**
     * Gets currentStock
     *
     * @return float|null
     */
    public function getCurrentStock()
    {
        return $this->container['currentStock'];
    }

    /**
     * Sets currentStock
     *
     * @param float|null $currentStock currentStock
     *
     * @return $this
     */
    public function setCurrentStock($currentStock)
    {
        $this->container['currentStock'] = $currentStock;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string|null $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 60)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Product., must be smaller than or equal to 60.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discountAccountId
     *
     * @return string|null
     */
    public function getDiscountAccountId()
    {
        return $this->container['discountAccountId'];
    }

    /**
     * Sets discountAccountId
     *
     * @param string|null $discountAccountId discountAccountId
     *
     * @return $this
     */
    public function setDiscountAccountId($discountAccountId)
    {
        if (!is_null($discountAccountId) && (mb_strlen($discountAccountId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $discountAccountId when calling Product., must be smaller than or equal to 8.');
        }

        $this->container['discountAccountId'] = $discountAccountId;

        return $this;
    }

    /**
     * Gets eANCode
     *
     * @return string|null
     */
    public function getEANCode()
    {
        return $this->container['eANCode'];
    }

    /**
     * Sets eANCode
     *
     * @param string|null $eANCode eANCode
     *
     * @return $this
     */
    public function setEANCode($eANCode)
    {
        if (!is_null($eANCode) && (mb_strlen($eANCode) > 14)) {
            throw new \InvalidArgumentException('invalid length for $eANCode when calling Product., must be smaller than or equal to 14.');
        }

        $this->container['eANCode'] = $eANCode;

        return $this;
    }

    /**
     * Gets intrastatCode
     *
     * @return int|null
     */
    public function getIntrastatCode()
    {
        return $this->container['intrastatCode'];
    }

    /**
     * Sets intrastatCode
     *
     * @param int|null $intrastatCode intrastatCode
     *
     * @return $this
     */
    public function setIntrastatCode($intrastatCode)
    {

        if (!is_null($intrastatCode) && ($intrastatCode > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $intrastatCode when calling Product., must be smaller than or equal to 99999999.');
        }
        if (!is_null($intrastatCode) && ($intrastatCode < 0)) {
            throw new \InvalidArgumentException('invalid value for $intrastatCode when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['intrastatCode'] = $intrastatCode;

        return $this;
    }

    /**
     * Gets lastUpdate
     *
     * @return string|null
     */
    public function getLastUpdate()
    {
        return $this->container['lastUpdate'];
    }

    /**
     * Sets lastUpdate
     *
     * @param string|null $lastUpdate lastUpdate
     *
     * @return $this
     */
    public function setLastUpdate($lastUpdate)
    {
        $this->container['lastUpdate'] = $lastUpdate;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float|null $margin margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {

        if (!is_null($margin) && ($margin > 9.9999)) {
            throw new \InvalidArgumentException('invalid value for $margin when calling Product., must be smaller than or equal to 9.9999.');
        }
        if (!is_null($margin) && ($margin < -9.9999)) {
            throw new \InvalidArgumentException('invalid value for $margin when calling Product., must be bigger than or equal to -9.9999.');
        }

        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets maxStock
     *
     * @return float|null
     */
    public function getMaxStock()
    {
        return $this->container['maxStock'];
    }

    /**
     * Sets maxStock
     *
     * @param float|null $maxStock maxStock
     *
     * @return $this
     */
    public function setMaxStock($maxStock)
    {
        $this->container['maxStock'] = $maxStock;

        return $this;
    }

    /**
     * Gets minStock
     *
     * @return float|null
     */
    public function getMinStock()
    {
        return $this->container['minStock'];
    }

    /**
     * Sets minStock
     *
     * @param float|null $minStock minStock
     *
     * @return $this
     */
    public function setMinStock($minStock)
    {
        $this->container['minStock'] = $minStock;

        return $this;
    }

    /**
     * Gets pricePer
     *
     * @return float|null
     */
    public function getPricePer()
    {
        return $this->container['pricePer'];
    }

    /**
     * Sets pricePer
     *
     * @param float|null $pricePer pricePer
     *
     * @return $this
     */
    public function setPricePer($pricePer)
    {
        $this->container['pricePer'] = $pricePer;

        return $this;
    }

    /**
     * Gets priceVatExcl
     *
     * @return float|null
     */
    public function getPriceVatExcl()
    {
        return $this->container['priceVatExcl'];
    }

    /**
     * Sets priceVatExcl
     *
     * @param float|null $priceVatExcl priceVatExcl
     *
     * @return $this
     */
    public function setPriceVatExcl($priceVatExcl)
    {

        if (!is_null($priceVatExcl) && ($priceVatExcl > 999999999.99)) {
            throw new \InvalidArgumentException('invalid value for $priceVatExcl when calling Product., must be smaller than or equal to 999999999.99.');
        }
        if (!is_null($priceVatExcl) && ($priceVatExcl < 0)) {
            throw new \InvalidArgumentException('invalid value for $priceVatExcl when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['priceVatExcl'] = $priceVatExcl;

        return $this;
    }

    /**
     * Gets priceVatIncl
     *
     * @return float|null
     */
    public function getPriceVatIncl()
    {
        return $this->container['priceVatIncl'];
    }

    /**
     * Sets priceVatIncl
     *
     * @param float|null $priceVatIncl priceVatIncl
     *
     * @return $this
     */
    public function setPriceVatIncl($priceVatIncl)
    {

        if (!is_null($priceVatIncl) && ($priceVatIncl > 999999999.99)) {
            throw new \InvalidArgumentException('invalid value for $priceVatIncl when calling Product., must be smaller than or equal to 999999999.99.');
        }
        if (!is_null($priceVatIncl) && ($priceVatIncl < 0)) {
            throw new \InvalidArgumentException('invalid value for $priceVatIncl when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['priceVatIncl'] = $priceVatIncl;

        return $this;
    }

    /**
     * Gets printOnInvoice
     *
     * @return bool|null
     */
    public function getPrintOnInvoice()
    {
        return $this->container['printOnInvoice'];
    }

    /**
     * Sets printOnInvoice
     *
     * @param bool|null $printOnInvoice printOnInvoice
     *
     * @return $this
     */
    public function setPrintOnInvoice($printOnInvoice)
    {
        $this->container['printOnInvoice'] = $printOnInvoice;

        return $this;
    }

    /**
     * Gets printOnQuote
     *
     * @return bool|null
     */
    public function getPrintOnQuote()
    {
        return $this->container['printOnQuote'];
    }

    /**
     * Sets printOnQuote
     *
     * @param bool|null $printOnQuote printOnQuote
     *
     * @return $this
     */
    public function setPrintOnQuote($printOnQuote)
    {
        $this->container['printOnQuote'] = $printOnQuote;

        return $this;
    }

    /**
     * Gets printOnShippingOrder
     *
     * @return bool|null
     */
    public function getPrintOnShippingOrder()
    {
        return $this->container['printOnShippingOrder'];
    }

    /**
     * Sets printOnShippingOrder
     *
     * @param bool|null $printOnShippingOrder printOnShippingOrder
     *
     * @return $this
     */
    public function setPrintOnShippingOrder($printOnShippingOrder)
    {
        $this->container['printOnShippingOrder'] = $printOnShippingOrder;

        return $this;
    }

    /**
     * Gets printOnWarehouseOrder
     *
     * @return bool|null
     */
    public function getPrintOnWarehouseOrder()
    {
        return $this->container['printOnWarehouseOrder'];
    }

    /**
     * Sets printOnWarehouseOrder
     *
     * @param bool|null $printOnWarehouseOrder printOnWarehouseOrder
     *
     * @return $this
     */
    public function setPrintOnWarehouseOrder($printOnWarehouseOrder)
    {
        $this->container['printOnWarehouseOrder'] = $printOnWarehouseOrder;

        return $this;
    }

    /**
     * Gets productDescriptions
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\ProductDescription[]|null
     */
    public function getProductDescriptions()
    {
        return $this->container['productDescriptions'];
    }

    /**
     * Sets productDescriptions
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\ProductDescription[]|null $productDescriptions productDescriptions
     *
     * @return $this
     */
    public function setProductDescriptions($productDescriptions)
    {
        $this->container['productDescriptions'] = $productDescriptions;

        return $this;
    }

    /**
     * Gets productDiscountGroupId
     *
     * @return string|null
     */
    public function getProductDiscountGroupId()
    {
        return $this->container['productDiscountGroupId'];
    }

    /**
     * Sets productDiscountGroupId
     *
     * @param string|null $productDiscountGroupId productDiscountGroupId
     *
     * @return $this
     */
    public function setProductDiscountGroupId($productDiscountGroupId)
    {
        if (!is_null($productDiscountGroupId) && (mb_strlen($productDiscountGroupId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $productDiscountGroupId when calling Product., must be smaller than or equal to 3.');
        }

        $this->container['productDiscountGroupId'] = $productDiscountGroupId;

        return $this;
    }

    /**
     * Gets productGroupId
     *
     * @return string|null
     */
    public function getProductGroupId()
    {
        return $this->container['productGroupId'];
    }

    /**
     * Sets productGroupId
     *
     * @param string|null $productGroupId productGroupId
     *
     * @return $this
     */
    public function setProductGroupId($productGroupId)
    {
        if (!is_null($productGroupId) && (mb_strlen($productGroupId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $productGroupId when calling Product., must be smaller than or equal to 3.');
        }

        $this->container['productGroupId'] = $productGroupId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        if ((mb_strlen($productId) > 14)) {
            throw new \InvalidArgumentException('invalid length for $productId when calling Product., must be smaller than or equal to 14.');
        }

        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productState
     *
     * @return int|null
     */
    public function getProductState()
    {
        return $this->container['productState'];
    }

    /**
     * Sets productState
     *
     * @param int|null $productState 0 = Active 1 = Passive 2 = Expiring
     *
     * @return $this
     */
    public function setProductState($productState)
    {
        $this->container['productState'] = $productState;

        return $this;
    }

    /**
     * Gets productSuppliers
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\ProductSupplier[]|null
     */
    public function getProductSuppliers()
    {
        return $this->container['productSuppliers'];
    }

    /**
     * Sets productSuppliers
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\ProductSupplier[]|null $productSuppliers productSuppliers
     *
     * @return $this
     */
    public function setProductSuppliers($productSuppliers)
    {
        $this->container['productSuppliers'] = $productSuppliers;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return int|null
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param int|null $productType 0 = NonStockProduct 1 = Text 2 = StockProduct 3 = Constellation 4 = Assembly
     *
     * @return $this
     */
    public function setProductType($productType)
    {
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets projectEntryType
     *
     * @return int|null
     */
    public function getProjectEntryType()
    {
        return $this->container['projectEntryType'];
    }

    /**
     * Sets projectEntryType
     *
     * @param int|null $projectEntryType 0 = None 1 = All 2 = OtherAndSubcontractor 3 = Other 4 = Materials 5 = Subcontractor 6 = Hours
     *
     * @return $this
     */
    public function setProjectEntryType($projectEntryType)
    {
        $this->container['projectEntryType'] = $projectEntryType;

        return $this;
    }

    /**
     * Gets projectSurchargePerc
     *
     * @return float|null
     */
    public function getProjectSurchargePerc()
    {
        return $this->container['projectSurchargePerc'];
    }

    /**
     * Sets projectSurchargePerc
     *
     * @param float|null $projectSurchargePerc projectSurchargePerc
     *
     * @return $this
     */
    public function setProjectSurchargePerc($projectSurchargePerc)
    {

        if (!is_null($projectSurchargePerc) && ($projectSurchargePerc > 9.9999)) {
            throw new \InvalidArgumentException('invalid value for $projectSurchargePerc when calling Product., must be smaller than or equal to 9.9999.');
        }
        if (!is_null($projectSurchargePerc) && ($projectSurchargePerc < -9.9999)) {
            throw new \InvalidArgumentException('invalid value for $projectSurchargePerc when calling Product., must be bigger than or equal to -9.9999.');
        }

        $this->container['projectSurchargePerc'] = $projectSurchargePerc;

        return $this;
    }

    /**
     * Gets publishOnWeb
     *
     * @return bool|null
     */
    public function getPublishOnWeb()
    {
        return $this->container['publishOnWeb'];
    }

    /**
     * Sets publishOnWeb
     *
     * @param bool|null $publishOnWeb publishOnWeb
     *
     * @return $this
     */
    public function setPublishOnWeb($publishOnWeb)
    {
        $this->container['publishOnWeb'] = $publishOnWeb;

        return $this;
    }

    /**
     * Gets purchaseOrderCount
     *
     * @return int|null
     */
    public function getPurchaseOrderCount()
    {
        return $this->container['purchaseOrderCount'];
    }

    /**
     * Sets purchaseOrderCount
     *
     * @param int|null $purchaseOrderCount purchaseOrderCount
     *
     * @return $this
     */
    public function setPurchaseOrderCount($purchaseOrderCount)
    {
        $this->container['purchaseOrderCount'] = $purchaseOrderCount;

        return $this;
    }

    /**
     * Gets quantityScale
     *
     * @return int|null
     */
    public function getQuantityScale()
    {
        return $this->container['quantityScale'];
    }

    /**
     * Sets quantityScale
     *
     * @param int|null $quantityScale quantityScale
     *
     * @return $this
     */
    public function setQuantityScale($quantityScale)
    {

        if (!is_null($quantityScale) && ($quantityScale > 3)) {
            throw new \InvalidArgumentException('invalid value for $quantityScale when calling Product., must be smaller than or equal to 3.');
        }
        if (!is_null($quantityScale) && ($quantityScale < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantityScale when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['quantityScale'] = $quantityScale;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        if ((mb_strlen($shortName) > 8)) {
            throw new \InvalidArgumentException('invalid length for $shortName when calling Product., must be smaller than or equal to 8.');
        }

        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets stocks
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\Stock[]|null
     */
    public function getStocks()
    {
        return $this->container['stocks'];
    }

    /**
     * Sets stocks
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\Stock[]|null $stocks stocks
     *
     * @return $this
     */
    public function setStocks($stocks)
    {
        $this->container['stocks'] = $stocks;

        return $this;
    }

    /**
     * Gets stockTransactionCount
     *
     * @return int|null
     */
    public function getStockTransactionCount()
    {
        return $this->container['stockTransactionCount'];
    }

    /**
     * Sets stockTransactionCount
     *
     * @param int|null $stockTransactionCount stockTransactionCount
     *
     * @return $this
     */
    public function setStockTransactionCount($stockTransactionCount)
    {
        $this->container['stockTransactionCount'] = $stockTransactionCount;

        return $this;
    }

    /**
     * Gets stockTransferPrice
     *
     * @return float|null
     */
    public function getStockTransferPrice()
    {
        return $this->container['stockTransferPrice'];
    }

    /**
     * Sets stockTransferPrice
     *
     * @param float|null $stockTransferPrice stockTransferPrice
     *
     * @return $this
     */
    public function setStockTransferPrice($stockTransferPrice)
    {

        if (!is_null($stockTransferPrice) && ($stockTransferPrice > 999999999.99)) {
            throw new \InvalidArgumentException('invalid value for $stockTransferPrice when calling Product., must be smaller than or equal to 999999999.99.');
        }
        if (!is_null($stockTransferPrice) && ($stockTransferPrice < 0)) {
            throw new \InvalidArgumentException('invalid value for $stockTransferPrice when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['stockTransferPrice'] = $stockTransferPrice;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 6)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Product., must be smaller than or equal to 6.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets vatCodeId
     *
     * @return int|null
     */
    public function getVatCodeId()
    {
        return $this->container['vatCodeId'];
    }

    /**
     * Sets vatCodeId
     *
     * @param int|null $vatCodeId vatCodeId
     *
     * @return $this
     */
    public function setVatCodeId($vatCodeId)
    {

        if (!is_null($vatCodeId) && ($vatCodeId > 99)) {
            throw new \InvalidArgumentException('invalid value for $vatCodeId when calling Product., must be smaller than or equal to 99.');
        }
        if (!is_null($vatCodeId) && ($vatCodeId < 0)) {
            throw new \InvalidArgumentException('invalid value for $vatCodeId when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['vatCodeId'] = $vatCodeId;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {

        if (!is_null($weight) && ($weight > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling Product., must be smaller than or equal to 999999999.');
        }
        if (!is_null($weight) && ($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


