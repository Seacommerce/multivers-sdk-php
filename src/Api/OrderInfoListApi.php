<?php
/**
 * OrderInfoListApi
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Seacommerce\Unit4\Multivers\Sdk\ApiException;
use Seacommerce\Unit4\Multivers\Sdk\Configuration;
use Seacommerce\Unit4\Multivers\Sdk\HeaderSelector;
use Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * OrderInfoListApi Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderInfoListApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getOrderInfoListByCustomerId
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $customerId customerId (required)
     * @param  string $minDate minDate (optional)
     * @param  string $maxDate maxDate (optional)
     * @param  string $minPrice minPrice (optional)
     * @param  string $maxPrice maxPrice (optional)
     * @param  string $fiscalYear fiscalYear (optional)
     * @param  string $onlyOpen onlyOpen (optional)
     * @param  string $pageSize pageSize (optional)
     * @param  string $pageNumber pageNumber (optional)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListByCustomerId($database, $customerId, $minDate = null, $maxDate = null, $minPrice = null, $maxPrice = null, $fiscalYear = null, $onlyOpen = null, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListByCustomerIdWithHttpInfo($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListByCustomerIdWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (optional)
     * @param  string $maxDate (optional)
     * @param  string $minPrice (optional)
     * @param  string $maxPrice (optional)
     * @param  string $fiscalYear (optional)
     * @param  string $onlyOpen (optional)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListByCustomerIdWithHttpInfo($database, $customerId, $minDate = null, $maxDate = null, $minPrice = null, $maxPrice = null, $fiscalYear = null, $onlyOpen = null, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListByCustomerIdRequest($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListByCustomerIdAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (optional)
     * @param  string $maxDate (optional)
     * @param  string $minPrice (optional)
     * @param  string $maxPrice (optional)
     * @param  string $fiscalYear (optional)
     * @param  string $onlyOpen (optional)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByCustomerIdAsync($database, $customerId, $minDate = null, $maxDate = null, $minPrice = null, $maxPrice = null, $fiscalYear = null, $onlyOpen = null, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListByCustomerIdAsyncWithHttpInfo($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListByCustomerIdAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (optional)
     * @param  string $maxDate (optional)
     * @param  string $minPrice (optional)
     * @param  string $maxPrice (optional)
     * @param  string $fiscalYear (optional)
     * @param  string $onlyOpen (optional)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByCustomerIdAsyncWithHttpInfo($database, $customerId, $minDate = null, $maxDate = null, $minPrice = null, $maxPrice = null, $fiscalYear = null, $onlyOpen = null, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListByCustomerIdRequest($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListByCustomerId'
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (optional)
     * @param  string $maxDate (optional)
     * @param  string $minPrice (optional)
     * @param  string $maxPrice (optional)
     * @param  string $fiscalYear (optional)
     * @param  string $onlyOpen (optional)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListByCustomerIdRequest($database, $customerId, $minDate = null, $maxDate = null, $minPrice = null, $maxPrice = null, $fiscalYear = null, $onlyOpen = null, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListByCustomerId'
            );
        }
        // verify the required parameter 'customerId' is set
        if ($customerId === null || (is_array($customerId) && count($customerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerId when calling getOrderInfoListByCustomerId'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($minDate !== null) {
            $queryParams['minDate'] = ObjectSerializer::toQueryValue($minDate);
        }
        // query params
        if ($maxDate !== null) {
            $queryParams['maxDate'] = ObjectSerializer::toQueryValue($maxDate);
        }
        // query params
        if ($minPrice !== null) {
            $queryParams['minPrice'] = ObjectSerializer::toQueryValue($minPrice);
        }
        // query params
        if ($maxPrice !== null) {
            $queryParams['maxPrice'] = ObjectSerializer::toQueryValue($maxPrice);
        }
        // query params
        if ($fiscalYear !== null) {
            $queryParams['fiscalYear'] = ObjectSerializer::toQueryValue($fiscalYear);
        }
        // query params
        if ($onlyOpen !== null) {
            $queryParams['onlyOpen'] = ObjectSerializer::toQueryValue($onlyOpen);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['PageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['PageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }
        // path params
        if ($customerId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByFiscalYear
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $customerId customerId (required)
     * @param  string $fiscalYear fiscalYear (required)
     * @param  string $minDate minDate (required)
     * @param  string $maxDate maxDate (required)
     * @param  string $minPrice minPrice (required)
     * @param  string $maxPrice maxPrice (required)
     * @param  string $onlyOpen onlyOpen (required)
     * @param  string $pageSize pageSize (optional)
     * @param  string $pageNumber pageNumber (optional)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListByCustomerIdAndByFiscalYear($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListByCustomerIdAndByFiscalYearWithHttpInfo($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByFiscalYearWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $fiscalYear (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListByCustomerIdAndByFiscalYearWithHttpInfo($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListByCustomerIdAndByFiscalYearRequest($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByFiscalYearAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $fiscalYear (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByCustomerIdAndByFiscalYearAsync($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListByCustomerIdAndByFiscalYearAsyncWithHttpInfo($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByFiscalYearAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $fiscalYear (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByCustomerIdAndByFiscalYearAsyncWithHttpInfo($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListByCustomerIdAndByFiscalYearRequest($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListByCustomerIdAndByFiscalYear'
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $fiscalYear (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (optional)
     * @param  string $pageNumber (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListByCustomerIdAndByFiscalYearRequest($database, $customerId, $fiscalYear, $minDate, $maxDate, $minPrice, $maxPrice, $onlyOpen, $pageSize = null, $pageNumber = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'customerId' is set
        if ($customerId === null || (is_array($customerId) && count($customerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerId when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'fiscalYear' is set
        if ($fiscalYear === null || (is_array($fiscalYear) && count($fiscalYear) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscalYear when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'minDate' is set
        if ($minDate === null || (is_array($minDate) && count($minDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $minDate when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'maxDate' is set
        if ($maxDate === null || (is_array($maxDate) && count($maxDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $maxDate when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'minPrice' is set
        if ($minPrice === null || (is_array($minPrice) && count($minPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $minPrice when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'maxPrice' is set
        if ($maxPrice === null || (is_array($maxPrice) && count($maxPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $maxPrice when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }
        // verify the required parameter 'onlyOpen' is set
        if ($onlyOpen === null || (is_array($onlyOpen) && count($onlyOpen) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onlyOpen when calling getOrderInfoListByCustomerIdAndByFiscalYear'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/{customerId}/{fiscalYear}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($minDate !== null) {
            $queryParams['minDate'] = ObjectSerializer::toQueryValue($minDate);
        }
        // query params
        if ($maxDate !== null) {
            $queryParams['maxDate'] = ObjectSerializer::toQueryValue($maxDate);
        }
        // query params
        if ($minPrice !== null) {
            $queryParams['minPrice'] = ObjectSerializer::toQueryValue($minPrice);
        }
        // query params
        if ($maxPrice !== null) {
            $queryParams['maxPrice'] = ObjectSerializer::toQueryValue($maxPrice);
        }
        // query params
        if ($onlyOpen !== null) {
            $queryParams['onlyOpen'] = ObjectSerializer::toQueryValue($onlyOpen);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['PageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['PageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }
        // path params
        if ($customerId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customerId),
                $resourcePath
            );
        }
        // path params
        if ($fiscalYear !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYear' . '}',
                ObjectSerializer::toPathValue($fiscalYear),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $customerId customerId (required)
     * @param  string $minDate minDate (required)
     * @param  string $maxDate maxDate (required)
     * @param  string $minPrice minPrice (required)
     * @param  string $maxPrice maxPrice (required)
     * @param  string $fiscalYear fiscalYear (required)
     * @param  string $onlyOpen onlyOpen (required)
     * @param  string $pageSize pageSize (required)
     * @param  string $pageNumber pageNumber (required)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenWithHttpInfo($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $fiscalYear (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (required)
     * @param  string $pageNumber (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenWithHttpInfo($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenRequest($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $fiscalYear (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (required)
     * @param  string $pageNumber (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenAsync($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenAsyncWithHttpInfo($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $fiscalYear (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (required)
     * @param  string $pageNumber (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenAsyncWithHttpInfo($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenRequest($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
     *
     * @param  string $database (required)
     * @param  string $customerId (required)
     * @param  string $minDate (required)
     * @param  string $maxDate (required)
     * @param  string $minPrice (required)
     * @param  string $maxPrice (required)
     * @param  string $fiscalYear (required)
     * @param  string $onlyOpen (required)
     * @param  string $pageSize (required)
     * @param  string $pageNumber (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpenRequest($database, $customerId, $minDate, $maxDate, $minPrice, $maxPrice, $fiscalYear, $onlyOpen, $pageSize, $pageNumber, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'customerId' is set
        if ($customerId === null || (is_array($customerId) && count($customerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerId when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'minDate' is set
        if ($minDate === null || (is_array($minDate) && count($minDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $minDate when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'maxDate' is set
        if ($maxDate === null || (is_array($maxDate) && count($maxDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $maxDate when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'minPrice' is set
        if ($minPrice === null || (is_array($minPrice) && count($minPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $minPrice when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'maxPrice' is set
        if ($maxPrice === null || (is_array($maxPrice) && count($maxPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $maxPrice when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'fiscalYear' is set
        if ($fiscalYear === null || (is_array($fiscalYear) && count($fiscalYear) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscalYear when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'onlyOpen' is set
        if ($onlyOpen === null || (is_array($onlyOpen) && count($onlyOpen) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $onlyOpen when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }
        // verify the required parameter 'pageNumber' is set
        if ($pageNumber === null || (is_array($pageNumber) && count($pageNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageNumber when calling getOrderInfoListByCustomerIdAndByMinDateAndByMaxDateAndByMinPriceAndByMaxPriceAndByFiscalYearAndByOnlyOpen'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/{customerId}/{minDate}/{maxDate}/{minPrice}/{maxPrice}/{fiscalYear}/{onlyOpen}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['PageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['PageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }
        // path params
        if ($customerId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customerId),
                $resourcePath
            );
        }
        // path params
        if ($minDate !== null) {
            $resourcePath = str_replace(
                '{' . 'minDate' . '}',
                ObjectSerializer::toPathValue($minDate),
                $resourcePath
            );
        }
        // path params
        if ($maxDate !== null) {
            $resourcePath = str_replace(
                '{' . 'maxDate' . '}',
                ObjectSerializer::toPathValue($maxDate),
                $resourcePath
            );
        }
        // path params
        if ($minPrice !== null) {
            $resourcePath = str_replace(
                '{' . 'minPrice' . '}',
                ObjectSerializer::toPathValue($minPrice),
                $resourcePath
            );
        }
        // path params
        if ($maxPrice !== null) {
            $resourcePath = str_replace(
                '{' . 'maxPrice' . '}',
                ObjectSerializer::toPathValue($maxPrice),
                $resourcePath
            );
        }
        // path params
        if ($fiscalYear !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYear' . '}',
                ObjectSerializer::toPathValue($fiscalYear),
                $resourcePath
            );
        }
        // path params
        if ($onlyOpen !== null) {
            $resourcePath = str_replace(
                '{' . 'onlyOpen' . '}',
                ObjectSerializer::toPathValue($onlyOpen),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderInfoListByProjectId
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $projectId projectId (required)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListByProjectId($database, $projectId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListByProjectIdWithHttpInfo($database, $projectId, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListByProjectIdWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $projectId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListByProjectIdWithHttpInfo($database, $projectId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListByProjectIdRequest($database, $projectId, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListByProjectIdAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $projectId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByProjectIdAsync($database, $projectId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListByProjectIdAsyncWithHttpInfo($database, $projectId, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListByProjectIdAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $projectId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListByProjectIdAsyncWithHttpInfo($database, $projectId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListByProjectIdRequest($database, $projectId, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListByProjectId'
     *
     * @param  string $database (required)
     * @param  string $projectId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListByProjectIdRequest($database, $projectId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListByProjectId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getOrderInfoListByProjectId'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/ByProjectId/{projectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderInfoListOpenOrders
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $customerId customerId (optional)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListOpenOrders($database, $customerId = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListOpenOrdersWithHttpInfo($database, $customerId, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListOpenOrdersWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListOpenOrdersWithHttpInfo($database, $customerId = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListOpenOrdersRequest($database, $customerId, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListOpenOrdersAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListOpenOrdersAsync($database, $customerId = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListOpenOrdersAsyncWithHttpInfo($database, $customerId, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListOpenOrdersAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $customerId (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListOpenOrdersAsyncWithHttpInfo($database, $customerId = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListOpenOrdersRequest($database, $customerId, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListOpenOrders'
     *
     * @param  string $database (required)
     * @param  string $customerId (optional)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListOpenOrdersRequest($database, $customerId = null, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListOpenOrders'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/OpenOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customerId !== null) {
            $queryParams['customerId'] = ObjectSerializer::toQueryValue($customerId);
        }
        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderInfoListOrdersForInvoice
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $invoiceId invoiceId (required)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListOrdersForInvoice($database, $invoiceId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListOrdersForInvoiceWithHttpInfo($database, $invoiceId, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListOrdersForInvoiceWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $invoiceId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListOrdersForInvoiceWithHttpInfo($database, $invoiceId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListOrdersForInvoiceRequest($database, $invoiceId, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListOrdersForInvoiceAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $invoiceId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListOrdersForInvoiceAsync($database, $invoiceId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListOrdersForInvoiceAsyncWithHttpInfo($database, $invoiceId, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListOrdersForInvoiceAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $invoiceId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListOrdersForInvoiceAsyncWithHttpInfo($database, $invoiceId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListOrdersForInvoiceRequest($database, $invoiceId, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListOrdersForInvoice'
     *
     * @param  string $database (required)
     * @param  string $invoiceId (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListOrdersForInvoiceRequest($database, $invoiceId, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListOrdersForInvoice'
            );
        }
        // verify the required parameter 'invoiceId' is set
        if ($invoiceId === null || (is_array($invoiceId) && count($invoiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceId when calling getOrderInfoListOrdersForInvoice'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/OrdersForInvoice/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }
        // path params
        if ($invoiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoiceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderInfoListOrdersReadyToPrintInvoice
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database database (required)
     * @param  string $select select (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  string $top top (optional)
     * @param  string $skip skip (optional)
     * @param  string $expand expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]
     */
    public function getOrderInfoListOrdersReadyToPrintInvoice($database, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        list($response) = $this->getOrderInfoListOrdersReadyToPrintInvoiceWithHttpInfo($database, $select, $filter, $orderby, $top, $skip, $expand);
        return $response;
    }

    /**
     * Operation getOrderInfoListOrdersReadyToPrintInvoiceWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \Seacommerce\Unit4\Multivers\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderInfoListOrdersReadyToPrintInvoiceWithHttpInfo($database, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $request = $this->getOrderInfoListOrdersReadyToPrintInvoiceRequest($database, $select, $filter, $orderby, $top, $skip, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderInfoListOrdersReadyToPrintInvoiceAsync
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListOrdersReadyToPrintInvoiceAsync($database, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        return $this->getOrderInfoListOrdersReadyToPrintInvoiceAsyncWithHttpInfo($database, $select, $filter, $orderby, $top, $skip, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderInfoListOrdersReadyToPrintInvoiceAsyncWithHttpInfo
     *
     * Gets a list of OrderInfo that matches the specified criteria
     *
     * @param  string $database (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderInfoListOrdersReadyToPrintInvoiceAsyncWithHttpInfo($database, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        $returnType = '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderInfo[]';
        $request = $this->getOrderInfoListOrdersReadyToPrintInvoiceRequest($database, $select, $filter, $orderby, $top, $skip, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderInfoListOrdersReadyToPrintInvoice'
     *
     * @param  string $database (required)
     * @param  string $select (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  string $top (optional)
     * @param  string $skip (optional)
     * @param  string $expand (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderInfoListOrdersReadyToPrintInvoiceRequest($database, $select = null, $filter = null, $orderby = null, $top = null, $skip = null, $expand = null)
    {
        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling getOrderInfoListOrdersReadyToPrintInvoice'
            );
        }

        $resourcePath = '/api/{database}/OrderInfoList/OrdersReadyToPrintInvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($select !== null) {
            $queryParams['$select'] = ObjectSerializer::toQueryValue($select);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($expand !== null) {
            $queryParams['$expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
