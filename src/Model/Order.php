<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountManager' => 'string',
        'accountManagerId' => 'string',
        'applyOrderSurcharge' => 'bool',
        'approved' => 'bool',
        'approvedBy' => 'string',
        'autoUnmatchToPurchase' => 'bool',
        'blocked' => 'bool',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'chargeVatType' => 'int',
        'collectiveInvoiceSystemId' => 'string',
        'contactPerson' => 'string',
        'contactPersonId' => 'string',
        'costCentreId' => 'string',
        'costUnitId' => 'string',
        'creditSqueezePerc' => 'float',
        'currencyId' => 'string',
        'customerCountryId' => 'string',
        'customerId' => 'string',
        'deliveryAddress' => 'string',
        'deliveryConditionId' => 'string',
        'discountPercentage' => 'float',
        'invoiceAddress' => 'string',
        'mainOrderId' => 'string',
        'mandateId' => 'string',
        'matchedToPurchase' => 'bool',
        'orderDate' => 'string',
        'orderId' => 'string',
        'orderLines' => '\Seacommerce\Unit4\Multivers\Sdk\Model\OrderLine[]',
        'orderState' => 'int',
        'orderSurcharge' => 'float',
        'orderSurchargeVatCodeId' => 'int',
        'orderType' => 'int',
        'paymentConditionId' => 'string',
        'processedBy' => 'string',
        'processedById' => 'string',
        'projectId' => 'string',
        'reference' => 'string',
        'totalCreditSqueezeAmount' => 'float',
        'totalDiscountAmount' => 'float',
        'totalGoodsAmount' => 'float',
        'totalOrderAmount' => 'float',
        'totalVatAmount' => 'float',
        'vatScenarioId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountManager' => null,
        'accountManagerId' => null,
        'applyOrderSurcharge' => null,
        'approved' => null,
        'approvedBy' => null,
        'autoUnmatchToPurchase' => null,
        'blocked' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'chargeVatType' => 'int32',
        'collectiveInvoiceSystemId' => null,
        'contactPerson' => null,
        'contactPersonId' => null,
        'costCentreId' => null,
        'costUnitId' => null,
        'creditSqueezePerc' => null,
        'currencyId' => null,
        'customerCountryId' => null,
        'customerId' => null,
        'deliveryAddress' => null,
        'deliveryConditionId' => null,
        'discountPercentage' => null,
        'invoiceAddress' => null,
        'mainOrderId' => null,
        'mandateId' => null,
        'matchedToPurchase' => null,
        'orderDate' => null,
        'orderId' => null,
        'orderLines' => null,
        'orderState' => 'int32',
        'orderSurcharge' => null,
        'orderSurchargeVatCodeId' => 'int32',
        'orderType' => 'int32',
        'paymentConditionId' => null,
        'processedBy' => null,
        'processedById' => null,
        'projectId' => null,
        'reference' => null,
        'totalCreditSqueezeAmount' => null,
        'totalDiscountAmount' => null,
        'totalGoodsAmount' => null,
        'totalOrderAmount' => null,
        'totalVatAmount' => null,
        'vatScenarioId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountManager' => 'accountManager',
        'accountManagerId' => 'accountManagerId',
        'applyOrderSurcharge' => 'applyOrderSurcharge',
        'approved' => 'approved',
        'approvedBy' => 'approvedBy',
        'autoUnmatchToPurchase' => 'autoUnmatchToPurchase',
        'blocked' => 'blocked',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'chargeVatType' => 'chargeVatType',
        'collectiveInvoiceSystemId' => 'collectiveInvoiceSystemId',
        'contactPerson' => 'contactPerson',
        'contactPersonId' => 'contactPersonId',
        'costCentreId' => 'costCentreId',
        'costUnitId' => 'costUnitId',
        'creditSqueezePerc' => 'creditSqueezePerc',
        'currencyId' => 'currencyId',
        'customerCountryId' => 'customerCountryId',
        'customerId' => 'customerId',
        'deliveryAddress' => 'deliveryAddress',
        'deliveryConditionId' => 'deliveryConditionId',
        'discountPercentage' => 'discountPercentage',
        'invoiceAddress' => 'invoiceAddress',
        'mainOrderId' => 'mainOrderId',
        'mandateId' => 'mandateId',
        'matchedToPurchase' => 'matchedToPurchase',
        'orderDate' => 'orderDate',
        'orderId' => 'orderId',
        'orderLines' => 'orderLines',
        'orderState' => 'orderState',
        'orderSurcharge' => 'orderSurcharge',
        'orderSurchargeVatCodeId' => 'orderSurchargeVatCodeId',
        'orderType' => 'orderType',
        'paymentConditionId' => 'paymentConditionId',
        'processedBy' => 'processedBy',
        'processedById' => 'processedById',
        'projectId' => 'projectId',
        'reference' => 'reference',
        'totalCreditSqueezeAmount' => 'totalCreditSqueezeAmount',
        'totalDiscountAmount' => 'totalDiscountAmount',
        'totalGoodsAmount' => 'totalGoodsAmount',
        'totalOrderAmount' => 'totalOrderAmount',
        'totalVatAmount' => 'totalVatAmount',
        'vatScenarioId' => 'vatScenarioId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountManager' => 'setAccountManager',
        'accountManagerId' => 'setAccountManagerId',
        'applyOrderSurcharge' => 'setApplyOrderSurcharge',
        'approved' => 'setApproved',
        'approvedBy' => 'setApprovedBy',
        'autoUnmatchToPurchase' => 'setAutoUnmatchToPurchase',
        'blocked' => 'setBlocked',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'chargeVatType' => 'setChargeVatType',
        'collectiveInvoiceSystemId' => 'setCollectiveInvoiceSystemId',
        'contactPerson' => 'setContactPerson',
        'contactPersonId' => 'setContactPersonId',
        'costCentreId' => 'setCostCentreId',
        'costUnitId' => 'setCostUnitId',
        'creditSqueezePerc' => 'setCreditSqueezePerc',
        'currencyId' => 'setCurrencyId',
        'customerCountryId' => 'setCustomerCountryId',
        'customerId' => 'setCustomerId',
        'deliveryAddress' => 'setDeliveryAddress',
        'deliveryConditionId' => 'setDeliveryConditionId',
        'discountPercentage' => 'setDiscountPercentage',
        'invoiceAddress' => 'setInvoiceAddress',
        'mainOrderId' => 'setMainOrderId',
        'mandateId' => 'setMandateId',
        'matchedToPurchase' => 'setMatchedToPurchase',
        'orderDate' => 'setOrderDate',
        'orderId' => 'setOrderId',
        'orderLines' => 'setOrderLines',
        'orderState' => 'setOrderState',
        'orderSurcharge' => 'setOrderSurcharge',
        'orderSurchargeVatCodeId' => 'setOrderSurchargeVatCodeId',
        'orderType' => 'setOrderType',
        'paymentConditionId' => 'setPaymentConditionId',
        'processedBy' => 'setProcessedBy',
        'processedById' => 'setProcessedById',
        'projectId' => 'setProjectId',
        'reference' => 'setReference',
        'totalCreditSqueezeAmount' => 'setTotalCreditSqueezeAmount',
        'totalDiscountAmount' => 'setTotalDiscountAmount',
        'totalGoodsAmount' => 'setTotalGoodsAmount',
        'totalOrderAmount' => 'setTotalOrderAmount',
        'totalVatAmount' => 'setTotalVatAmount',
        'vatScenarioId' => 'setVatScenarioId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountManager' => 'getAccountManager',
        'accountManagerId' => 'getAccountManagerId',
        'applyOrderSurcharge' => 'getApplyOrderSurcharge',
        'approved' => 'getApproved',
        'approvedBy' => 'getApprovedBy',
        'autoUnmatchToPurchase' => 'getAutoUnmatchToPurchase',
        'blocked' => 'getBlocked',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'chargeVatType' => 'getChargeVatType',
        'collectiveInvoiceSystemId' => 'getCollectiveInvoiceSystemId',
        'contactPerson' => 'getContactPerson',
        'contactPersonId' => 'getContactPersonId',
        'costCentreId' => 'getCostCentreId',
        'costUnitId' => 'getCostUnitId',
        'creditSqueezePerc' => 'getCreditSqueezePerc',
        'currencyId' => 'getCurrencyId',
        'customerCountryId' => 'getCustomerCountryId',
        'customerId' => 'getCustomerId',
        'deliveryAddress' => 'getDeliveryAddress',
        'deliveryConditionId' => 'getDeliveryConditionId',
        'discountPercentage' => 'getDiscountPercentage',
        'invoiceAddress' => 'getInvoiceAddress',
        'mainOrderId' => 'getMainOrderId',
        'mandateId' => 'getMandateId',
        'matchedToPurchase' => 'getMatchedToPurchase',
        'orderDate' => 'getOrderDate',
        'orderId' => 'getOrderId',
        'orderLines' => 'getOrderLines',
        'orderState' => 'getOrderState',
        'orderSurcharge' => 'getOrderSurcharge',
        'orderSurchargeVatCodeId' => 'getOrderSurchargeVatCodeId',
        'orderType' => 'getOrderType',
        'paymentConditionId' => 'getPaymentConditionId',
        'processedBy' => 'getProcessedBy',
        'processedById' => 'getProcessedById',
        'projectId' => 'getProjectId',
        'reference' => 'getReference',
        'totalCreditSqueezeAmount' => 'getTotalCreditSqueezeAmount',
        'totalDiscountAmount' => 'getTotalDiscountAmount',
        'totalGoodsAmount' => 'getTotalGoodsAmount',
        'totalOrderAmount' => 'getTotalOrderAmount',
        'totalVatAmount' => 'getTotalVatAmount',
        'vatScenarioId' => 'getVatScenarioId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountManager'] = isset($data['accountManager']) ? $data['accountManager'] : null;
        $this->container['accountManagerId'] = isset($data['accountManagerId']) ? $data['accountManagerId'] : null;
        $this->container['applyOrderSurcharge'] = isset($data['applyOrderSurcharge']) ? $data['applyOrderSurcharge'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['approvedBy'] = isset($data['approvedBy']) ? $data['approvedBy'] : null;
        $this->container['autoUnmatchToPurchase'] = isset($data['autoUnmatchToPurchase']) ? $data['autoUnmatchToPurchase'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['chargeVatType'] = isset($data['chargeVatType']) ? $data['chargeVatType'] : null;
        $this->container['collectiveInvoiceSystemId'] = isset($data['collectiveInvoiceSystemId']) ? $data['collectiveInvoiceSystemId'] : null;
        $this->container['contactPerson'] = isset($data['contactPerson']) ? $data['contactPerson'] : null;
        $this->container['contactPersonId'] = isset($data['contactPersonId']) ? $data['contactPersonId'] : null;
        $this->container['costCentreId'] = isset($data['costCentreId']) ? $data['costCentreId'] : null;
        $this->container['costUnitId'] = isset($data['costUnitId']) ? $data['costUnitId'] : null;
        $this->container['creditSqueezePerc'] = isset($data['creditSqueezePerc']) ? $data['creditSqueezePerc'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['customerCountryId'] = isset($data['customerCountryId']) ? $data['customerCountryId'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['deliveryAddress'] = isset($data['deliveryAddress']) ? $data['deliveryAddress'] : null;
        $this->container['deliveryConditionId'] = isset($data['deliveryConditionId']) ? $data['deliveryConditionId'] : null;
        $this->container['discountPercentage'] = isset($data['discountPercentage']) ? $data['discountPercentage'] : null;
        $this->container['invoiceAddress'] = isset($data['invoiceAddress']) ? $data['invoiceAddress'] : null;
        $this->container['mainOrderId'] = isset($data['mainOrderId']) ? $data['mainOrderId'] : null;
        $this->container['mandateId'] = isset($data['mandateId']) ? $data['mandateId'] : null;
        $this->container['matchedToPurchase'] = isset($data['matchedToPurchase']) ? $data['matchedToPurchase'] : null;
        $this->container['orderDate'] = isset($data['orderDate']) ? $data['orderDate'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['orderLines'] = isset($data['orderLines']) ? $data['orderLines'] : null;
        $this->container['orderState'] = isset($data['orderState']) ? $data['orderState'] : null;
        $this->container['orderSurcharge'] = isset($data['orderSurcharge']) ? $data['orderSurcharge'] : null;
        $this->container['orderSurchargeVatCodeId'] = isset($data['orderSurchargeVatCodeId']) ? $data['orderSurchargeVatCodeId'] : null;
        $this->container['orderType'] = isset($data['orderType']) ? $data['orderType'] : null;
        $this->container['paymentConditionId'] = isset($data['paymentConditionId']) ? $data['paymentConditionId'] : null;
        $this->container['processedBy'] = isset($data['processedBy']) ? $data['processedBy'] : null;
        $this->container['processedById'] = isset($data['processedById']) ? $data['processedById'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['totalCreditSqueezeAmount'] = isset($data['totalCreditSqueezeAmount']) ? $data['totalCreditSqueezeAmount'] : null;
        $this->container['totalDiscountAmount'] = isset($data['totalDiscountAmount']) ? $data['totalDiscountAmount'] : null;
        $this->container['totalGoodsAmount'] = isset($data['totalGoodsAmount']) ? $data['totalGoodsAmount'] : null;
        $this->container['totalOrderAmount'] = isset($data['totalOrderAmount']) ? $data['totalOrderAmount'] : null;
        $this->container['totalVatAmount'] = isset($data['totalVatAmount']) ? $data['totalVatAmount'] : null;
        $this->container['vatScenarioId'] = isset($data['vatScenarioId']) ? $data['vatScenarioId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accountManager']) && (mb_strlen($this->container['accountManager']) > 55)) {
            $invalidProperties[] = "invalid value for 'accountManager', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['accountManagerId']) && (mb_strlen($this->container['accountManagerId']) > 8)) {
            $invalidProperties[] = "invalid value for 'accountManagerId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['approvedBy']) && (mb_strlen($this->container['approvedBy']) > 8)) {
            $invalidProperties[] = "invalid value for 'approvedBy', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['collectiveInvoiceSystemId']) && (mb_strlen($this->container['collectiveInvoiceSystemId']) > 3)) {
            $invalidProperties[] = "invalid value for 'collectiveInvoiceSystemId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['contactPerson']) && (mb_strlen($this->container['contactPerson']) > 55)) {
            $invalidProperties[] = "invalid value for 'contactPerson', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['contactPersonId']) && (mb_strlen($this->container['contactPersonId']) > 8)) {
            $invalidProperties[] = "invalid value for 'contactPersonId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['costCentreId']) && (mb_strlen($this->container['costCentreId']) > 8)) {
            $invalidProperties[] = "invalid value for 'costCentreId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['costUnitId']) && (mb_strlen($this->container['costUnitId']) > 8)) {
            $invalidProperties[] = "invalid value for 'costUnitId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['creditSqueezePerc']) && ($this->container['creditSqueezePerc'] > 1)) {
            $invalidProperties[] = "invalid value for 'creditSqueezePerc', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['creditSqueezePerc']) && ($this->container['creditSqueezePerc'] < 0)) {
            $invalidProperties[] = "invalid value for 'creditSqueezePerc', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currencyId']) && (mb_strlen($this->container['currencyId']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyId', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['customerId'] === null) {
            $invalidProperties[] = "'customerId' can't be null";
        }
        if ((mb_strlen($this->container['customerId']) > 8)) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['deliveryAddress']) && (mb_strlen($this->container['deliveryAddress']) > 254)) {
            $invalidProperties[] = "invalid value for 'deliveryAddress', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['deliveryConditionId']) && (mb_strlen($this->container['deliveryConditionId']) > 3)) {
            $invalidProperties[] = "invalid value for 'deliveryConditionId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['discountPercentage']) && ($this->container['discountPercentage'] > 1)) {
            $invalidProperties[] = "invalid value for 'discountPercentage', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['discountPercentage']) && ($this->container['discountPercentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'discountPercentage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoiceAddress']) && (mb_strlen($this->container['invoiceAddress']) > 254)) {
            $invalidProperties[] = "invalid value for 'invoiceAddress', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['mandateId']) && (mb_strlen($this->container['mandateId']) > 12)) {
            $invalidProperties[] = "invalid value for 'mandateId', the character length must be smaller than or equal to 12.";
        }

        if ($this->container['orderDate'] === null) {
            $invalidProperties[] = "'orderDate' can't be null";
        }
        if (!is_null($this->container['orderId']) && (mb_strlen($this->container['orderId']) > 8)) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['paymentConditionId'] === null) {
            $invalidProperties[] = "'paymentConditionId' can't be null";
        }
        if ((mb_strlen($this->container['paymentConditionId']) > 3)) {
            $invalidProperties[] = "invalid value for 'paymentConditionId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['processedBy']) && (mb_strlen($this->container['processedBy']) > 55)) {
            $invalidProperties[] = "invalid value for 'processedBy', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['processedById']) && (mb_strlen($this->container['processedById']) > 8)) {
            $invalidProperties[] = "invalid value for 'processedById', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['projectId']) && (mb_strlen($this->container['projectId']) > 12)) {
            $invalidProperties[] = "invalid value for 'projectId', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 60)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 60.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountManager
     *
     * @return string|null
     */
    public function getAccountManager()
    {
        return $this->container['accountManager'];
    }

    /**
     * Sets accountManager
     *
     * @param string|null $accountManager accountManager
     *
     * @return $this
     */
    public function setAccountManager($accountManager)
    {
        if (!is_null($accountManager) && (mb_strlen($accountManager) > 55)) {
            throw new \InvalidArgumentException('invalid length for $accountManager when calling Order., must be smaller than or equal to 55.');
        }

        $this->container['accountManager'] = $accountManager;

        return $this;
    }

    /**
     * Gets accountManagerId
     *
     * @return string|null
     */
    public function getAccountManagerId()
    {
        return $this->container['accountManagerId'];
    }

    /**
     * Sets accountManagerId
     *
     * @param string|null $accountManagerId accountManagerId
     *
     * @return $this
     */
    public function setAccountManagerId($accountManagerId)
    {
        if (!is_null($accountManagerId) && (mb_strlen($accountManagerId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $accountManagerId when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['accountManagerId'] = $accountManagerId;

        return $this;
    }

    /**
     * Gets applyOrderSurcharge
     *
     * @return bool|null
     */
    public function getApplyOrderSurcharge()
    {
        return $this->container['applyOrderSurcharge'];
    }

    /**
     * Sets applyOrderSurcharge
     *
     * @param bool|null $applyOrderSurcharge applyOrderSurcharge
     *
     * @return $this
     */
    public function setApplyOrderSurcharge($applyOrderSurcharge)
    {
        $this->container['applyOrderSurcharge'] = $applyOrderSurcharge;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets approvedBy
     *
     * @return string|null
     */
    public function getApprovedBy()
    {
        return $this->container['approvedBy'];
    }

    /**
     * Sets approvedBy
     *
     * @param string|null $approvedBy approvedBy
     *
     * @return $this
     */
    public function setApprovedBy($approvedBy)
    {
        if (!is_null($approvedBy) && (mb_strlen($approvedBy) > 8)) {
            throw new \InvalidArgumentException('invalid length for $approvedBy when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['approvedBy'] = $approvedBy;

        return $this;
    }

    /**
     * Gets autoUnmatchToPurchase
     *
     * @return bool|null
     */
    public function getAutoUnmatchToPurchase()
    {
        return $this->container['autoUnmatchToPurchase'];
    }

    /**
     * Sets autoUnmatchToPurchase
     *
     * @param bool|null $autoUnmatchToPurchase autoUnmatchToPurchase
     *
     * @return $this
     */
    public function setAutoUnmatchToPurchase($autoUnmatchToPurchase)
    {
        $this->container['autoUnmatchToPurchase'] = $autoUnmatchToPurchase;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool|null $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets chargeVatType
     *
     * @return int|null
     */
    public function getChargeVatType()
    {
        return $this->container['chargeVatType'];
    }

    /**
     * Sets chargeVatType
     *
     * @param int|null $chargeVatType chargeVatType
     *
     * @return $this
     */
    public function setChargeVatType($chargeVatType)
    {
        $this->container['chargeVatType'] = $chargeVatType;

        return $this;
    }

    /**
     * Gets collectiveInvoiceSystemId
     *
     * @return string|null
     */
    public function getCollectiveInvoiceSystemId()
    {
        return $this->container['collectiveInvoiceSystemId'];
    }

    /**
     * Sets collectiveInvoiceSystemId
     *
     * @param string|null $collectiveInvoiceSystemId collectiveInvoiceSystemId
     *
     * @return $this
     */
    public function setCollectiveInvoiceSystemId($collectiveInvoiceSystemId)
    {
        if (!is_null($collectiveInvoiceSystemId) && (mb_strlen($collectiveInvoiceSystemId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $collectiveInvoiceSystemId when calling Order., must be smaller than or equal to 3.');
        }

        $this->container['collectiveInvoiceSystemId'] = $collectiveInvoiceSystemId;

        return $this;
    }

    /**
     * Gets contactPerson
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contactPerson'];
    }

    /**
     * Sets contactPerson
     *
     * @param string|null $contactPerson contactPerson
     *
     * @return $this
     */
    public function setContactPerson($contactPerson)
    {
        if (!is_null($contactPerson) && (mb_strlen($contactPerson) > 55)) {
            throw new \InvalidArgumentException('invalid length for $contactPerson when calling Order., must be smaller than or equal to 55.');
        }

        $this->container['contactPerson'] = $contactPerson;

        return $this;
    }

    /**
     * Gets contactPersonId
     *
     * @return string|null
     */
    public function getContactPersonId()
    {
        return $this->container['contactPersonId'];
    }

    /**
     * Sets contactPersonId
     *
     * @param string|null $contactPersonId contactPersonId
     *
     * @return $this
     */
    public function setContactPersonId($contactPersonId)
    {
        if (!is_null($contactPersonId) && (mb_strlen($contactPersonId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $contactPersonId when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['contactPersonId'] = $contactPersonId;

        return $this;
    }

    /**
     * Gets costCentreId
     *
     * @return string|null
     */
    public function getCostCentreId()
    {
        return $this->container['costCentreId'];
    }

    /**
     * Sets costCentreId
     *
     * @param string|null $costCentreId costCentreId
     *
     * @return $this
     */
    public function setCostCentreId($costCentreId)
    {
        if (!is_null($costCentreId) && (mb_strlen($costCentreId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $costCentreId when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['costCentreId'] = $costCentreId;

        return $this;
    }

    /**
     * Gets costUnitId
     *
     * @return string|null
     */
    public function getCostUnitId()
    {
        return $this->container['costUnitId'];
    }

    /**
     * Sets costUnitId
     *
     * @param string|null $costUnitId costUnitId
     *
     * @return $this
     */
    public function setCostUnitId($costUnitId)
    {
        if (!is_null($costUnitId) && (mb_strlen($costUnitId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $costUnitId when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['costUnitId'] = $costUnitId;

        return $this;
    }

    /**
     * Gets creditSqueezePerc
     *
     * @return float|null
     */
    public function getCreditSqueezePerc()
    {
        return $this->container['creditSqueezePerc'];
    }

    /**
     * Sets creditSqueezePerc
     *
     * @param float|null $creditSqueezePerc creditSqueezePerc
     *
     * @return $this
     */
    public function setCreditSqueezePerc($creditSqueezePerc)
    {

        if (!is_null($creditSqueezePerc) && ($creditSqueezePerc > 1)) {
            throw new \InvalidArgumentException('invalid value for $creditSqueezePerc when calling Order., must be smaller than or equal to 1.');
        }
        if (!is_null($creditSqueezePerc) && ($creditSqueezePerc < 0)) {
            throw new \InvalidArgumentException('invalid value for $creditSqueezePerc when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['creditSqueezePerc'] = $creditSqueezePerc;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        if (!is_null($currencyId) && (mb_strlen($currencyId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyId when calling Order., must be smaller than or equal to 3.');
        }

        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets customerCountryId
     *
     * @return string|null
     */
    public function getCustomerCountryId()
    {
        return $this->container['customerCountryId'];
    }

    /**
     * Sets customerCountryId
     *
     * @param string|null $customerCountryId customerCountryId
     *
     * @return $this
     */
    public function setCustomerCountryId($customerCountryId)
    {
        $this->container['customerCountryId'] = $customerCountryId;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string $customerId customerId
     *
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        if ((mb_strlen($customerId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return string|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param string|null $deliveryAddress deliveryAddress
     *
     * @return $this
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        if (!is_null($deliveryAddress) && (mb_strlen($deliveryAddress) > 254)) {
            throw new \InvalidArgumentException('invalid length for $deliveryAddress when calling Order., must be smaller than or equal to 254.');
        }

        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets deliveryConditionId
     *
     * @return string|null
     */
    public function getDeliveryConditionId()
    {
        return $this->container['deliveryConditionId'];
    }

    /**
     * Sets deliveryConditionId
     *
     * @param string|null $deliveryConditionId deliveryConditionId
     *
     * @return $this
     */
    public function setDeliveryConditionId($deliveryConditionId)
    {
        if (!is_null($deliveryConditionId) && (mb_strlen($deliveryConditionId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $deliveryConditionId when calling Order., must be smaller than or equal to 3.');
        }

        $this->container['deliveryConditionId'] = $deliveryConditionId;

        return $this;
    }

    /**
     * Gets discountPercentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discountPercentage'];
    }

    /**
     * Sets discountPercentage
     *
     * @param float|null $discountPercentage discountPercentage
     *
     * @return $this
     */
    public function setDiscountPercentage($discountPercentage)
    {

        if (!is_null($discountPercentage) && ($discountPercentage > 1)) {
            throw new \InvalidArgumentException('invalid value for $discountPercentage when calling Order., must be smaller than or equal to 1.');
        }
        if (!is_null($discountPercentage) && ($discountPercentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $discountPercentage when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['discountPercentage'] = $discountPercentage;

        return $this;
    }

    /**
     * Gets invoiceAddress
     *
     * @return string|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoiceAddress'];
    }

    /**
     * Sets invoiceAddress
     *
     * @param string|null $invoiceAddress invoiceAddress
     *
     * @return $this
     */
    public function setInvoiceAddress($invoiceAddress)
    {
        if (!is_null($invoiceAddress) && (mb_strlen($invoiceAddress) > 254)) {
            throw new \InvalidArgumentException('invalid length for $invoiceAddress when calling Order., must be smaller than or equal to 254.');
        }

        $this->container['invoiceAddress'] = $invoiceAddress;

        return $this;
    }

    /**
     * Gets mainOrderId
     *
     * @return string|null
     */
    public function getMainOrderId()
    {
        return $this->container['mainOrderId'];
    }

    /**
     * Sets mainOrderId
     *
     * @param string|null $mainOrderId mainOrderId
     *
     * @return $this
     */
    public function setMainOrderId($mainOrderId)
    {
        $this->container['mainOrderId'] = $mainOrderId;

        return $this;
    }

    /**
     * Gets mandateId
     *
     * @return string|null
     */
    public function getMandateId()
    {
        return $this->container['mandateId'];
    }

    /**
     * Sets mandateId
     *
     * @param string|null $mandateId mandateId
     *
     * @return $this
     */
    public function setMandateId($mandateId)
    {
        if (!is_null($mandateId) && (mb_strlen($mandateId) > 12)) {
            throw new \InvalidArgumentException('invalid length for $mandateId when calling Order., must be smaller than or equal to 12.');
        }

        $this->container['mandateId'] = $mandateId;

        return $this;
    }

    /**
     * Gets matchedToPurchase
     *
     * @return bool|null
     */
    public function getMatchedToPurchase()
    {
        return $this->container['matchedToPurchase'];
    }

    /**
     * Sets matchedToPurchase
     *
     * @param bool|null $matchedToPurchase matchedToPurchase
     *
     * @return $this
     */
    public function setMatchedToPurchase($matchedToPurchase)
    {
        $this->container['matchedToPurchase'] = $matchedToPurchase;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return string
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param string $orderDate orderDate
     *
     * @return $this
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId orderId
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        if (!is_null($orderId) && (mb_strlen($orderId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $orderId when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\OrderLine[]|null
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\OrderLine[]|null $orderLines orderLines
     *
     * @return $this
     */
    public function setOrderLines($orderLines)
    {
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets orderState
     *
     * @return int|null
     */
    public function getOrderState()
    {
        return $this->container['orderState'];
    }

    /**
     * Sets orderState
     *
     * @param int|null $orderState orderState
     *
     * @return $this
     */
    public function setOrderState($orderState)
    {
        $this->container['orderState'] = $orderState;

        return $this;
    }

    /**
     * Gets orderSurcharge
     *
     * @return float|null
     */
    public function getOrderSurcharge()
    {
        return $this->container['orderSurcharge'];
    }

    /**
     * Sets orderSurcharge
     *
     * @param float|null $orderSurcharge orderSurcharge
     *
     * @return $this
     */
    public function setOrderSurcharge($orderSurcharge)
    {
        $this->container['orderSurcharge'] = $orderSurcharge;

        return $this;
    }

    /**
     * Gets orderSurchargeVatCodeId
     *
     * @return int|null
     */
    public function getOrderSurchargeVatCodeId()
    {
        return $this->container['orderSurchargeVatCodeId'];
    }

    /**
     * Sets orderSurchargeVatCodeId
     *
     * @param int|null $orderSurchargeVatCodeId orderSurchargeVatCodeId
     *
     * @return $this
     */
    public function setOrderSurchargeVatCodeId($orderSurchargeVatCodeId)
    {
        $this->container['orderSurchargeVatCodeId'] = $orderSurchargeVatCodeId;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return int|null
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param int|null $orderType orderType
     *
     * @return $this
     */
    public function setOrderType($orderType)
    {
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets paymentConditionId
     *
     * @return string
     */
    public function getPaymentConditionId()
    {
        return $this->container['paymentConditionId'];
    }

    /**
     * Sets paymentConditionId
     *
     * @param string $paymentConditionId paymentConditionId
     *
     * @return $this
     */
    public function setPaymentConditionId($paymentConditionId)
    {
        if ((mb_strlen($paymentConditionId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $paymentConditionId when calling Order., must be smaller than or equal to 3.');
        }

        $this->container['paymentConditionId'] = $paymentConditionId;

        return $this;
    }

    /**
     * Gets processedBy
     *
     * @return string|null
     */
    public function getProcessedBy()
    {
        return $this->container['processedBy'];
    }

    /**
     * Sets processedBy
     *
     * @param string|null $processedBy processedBy
     *
     * @return $this
     */
    public function setProcessedBy($processedBy)
    {
        if (!is_null($processedBy) && (mb_strlen($processedBy) > 55)) {
            throw new \InvalidArgumentException('invalid length for $processedBy when calling Order., must be smaller than or equal to 55.');
        }

        $this->container['processedBy'] = $processedBy;

        return $this;
    }

    /**
     * Gets processedById
     *
     * @return string|null
     */
    public function getProcessedById()
    {
        return $this->container['processedById'];
    }

    /**
     * Sets processedById
     *
     * @param string|null $processedById processedById
     *
     * @return $this
     */
    public function setProcessedById($processedById)
    {
        if (!is_null($processedById) && (mb_strlen($processedById) > 8)) {
            throw new \InvalidArgumentException('invalid length for $processedById when calling Order., must be smaller than or equal to 8.');
        }

        $this->container['processedById'] = $processedById;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        if (!is_null($projectId) && (mb_strlen($projectId) > 12)) {
            throw new \InvalidArgumentException('invalid length for $projectId when calling Order., must be smaller than or equal to 12.');
        }

        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 60)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Order., must be smaller than or equal to 60.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets totalCreditSqueezeAmount
     *
     * @return float|null
     */
    public function getTotalCreditSqueezeAmount()
    {
        return $this->container['totalCreditSqueezeAmount'];
    }

    /**
     * Sets totalCreditSqueezeAmount
     *
     * @param float|null $totalCreditSqueezeAmount totalCreditSqueezeAmount
     *
     * @return $this
     */
    public function setTotalCreditSqueezeAmount($totalCreditSqueezeAmount)
    {
        $this->container['totalCreditSqueezeAmount'] = $totalCreditSqueezeAmount;

        return $this;
    }

    /**
     * Gets totalDiscountAmount
     *
     * @return float|null
     */
    public function getTotalDiscountAmount()
    {
        return $this->container['totalDiscountAmount'];
    }

    /**
     * Sets totalDiscountAmount
     *
     * @param float|null $totalDiscountAmount totalDiscountAmount
     *
     * @return $this
     */
    public function setTotalDiscountAmount($totalDiscountAmount)
    {
        $this->container['totalDiscountAmount'] = $totalDiscountAmount;

        return $this;
    }

    /**
     * Gets totalGoodsAmount
     *
     * @return float|null
     */
    public function getTotalGoodsAmount()
    {
        return $this->container['totalGoodsAmount'];
    }

    /**
     * Sets totalGoodsAmount
     *
     * @param float|null $totalGoodsAmount totalGoodsAmount
     *
     * @return $this
     */
    public function setTotalGoodsAmount($totalGoodsAmount)
    {
        $this->container['totalGoodsAmount'] = $totalGoodsAmount;

        return $this;
    }

    /**
     * Gets totalOrderAmount
     *
     * @return float|null
     */
    public function getTotalOrderAmount()
    {
        return $this->container['totalOrderAmount'];
    }

    /**
     * Sets totalOrderAmount
     *
     * @param float|null $totalOrderAmount totalOrderAmount
     *
     * @return $this
     */
    public function setTotalOrderAmount($totalOrderAmount)
    {
        $this->container['totalOrderAmount'] = $totalOrderAmount;

        return $this;
    }

    /**
     * Gets totalVatAmount
     *
     * @return float|null
     */
    public function getTotalVatAmount()
    {
        return $this->container['totalVatAmount'];
    }

    /**
     * Sets totalVatAmount
     *
     * @param float|null $totalVatAmount totalVatAmount
     *
     * @return $this
     */
    public function setTotalVatAmount($totalVatAmount)
    {
        $this->container['totalVatAmount'] = $totalVatAmount;

        return $this;
    }

    /**
     * Gets vatScenarioId
     *
     * @return int|null
     */
    public function getVatScenarioId()
    {
        return $this->container['vatScenarioId'];
    }

    /**
     * Sets vatScenarioId
     *
     * @param int|null $vatScenarioId vatScenarioId
     *
     * @return $this
     */
    public function setVatScenarioId($vatScenarioId)
    {
        $this->container['vatScenarioId'] = $vatScenarioId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


