<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountManagerId' => 'string',
        'addresses' => '\Seacommerce\Unit4\Multivers\Sdk\Model\Address[]',
        'applyOrderSurcharge' => 'bool',
        'businessNumber' => 'string',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'chargeVatTypeId' => 'int',
        'city' => 'string',
        'cocCity' => 'string',
        'cocDate' => 'string',
        'cocRegistration' => 'string',
        'collectiveInvoiceSystemId' => 'string',
        'combineInvoicesForElectronicBanking' => 'bool',
        'countryId' => 'string',
        'creditLimit' => 'float',
        'creditSqueezeId' => 'string',
        'currencyId' => 'string',
        'customerGroupId' => 'int',
        'customerId' => 'string',
        'customerStateId' => 'string',
        'database' => 'string',
        'dateChanged' => 'string',
        'dateCreated' => 'string',
        'deliveryConditionId' => 'string',
        'discountPercentage' => 'float',
        'email' => 'string',
        'fax' => 'string',
        'fullAddress' => 'string',
        'fullDeliveryAddress' => 'string',
        'governmentDigitalId' => 'string',
        'hasOutstandingBalance' => 'bool',
        'homepage' => 'string',
        'includeVatOnOrderByDefault' => 'bool',
        'intrastatGoodsCodeId' => 'int',
        'intrastatGoodsDistributionId' => 'int',
        'intrastatStatSystemId' => 'int',
        'intrastatTrafficRegionId' => 'int',
        'intrastatTransactionTypeId' => 'string',
        'intrastatTransportTypeId' => 'int',
        'invoiceOnBehalfOfMembers' => 'bool',
        'isDunForPayment' => 'bool',
        'isInFactoring' => 'bool',
        'isPaymentRefRequired' => 'bool',
        'isPurchaseOrganization' => 'bool',
        'languageId' => 'string',
        'mobilePhone' => 'string',
        'name' => 'string',
        'organizationId' => 'int',
        'paymentConditionId' => 'string',
        'person' => 'string',
        'pricelistId' => 'string',
        'printPurchaseDetails' => 'bool',
        'purchaseOrganizationId' => 'string',
        'purchaseOrganizationMemberId' => 'string',
        'revenueAccountId' => 'string',
        'shortName' => 'string',
        'street1' => 'string',
        'street2' => 'string',
        'supplierId' => 'string',
        'telephone' => 'string',
        'usesUBLInvoice' => 'bool',
        'vatNumber' => 'string',
        'vatScenarioId' => 'int',
        'vatVerificationDate' => 'string',
        'zipCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountManagerId' => null,
        'addresses' => null,
        'applyOrderSurcharge' => null,
        'businessNumber' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'chargeVatTypeId' => null,
        'city' => null,
        'cocCity' => null,
        'cocDate' => null,
        'cocRegistration' => null,
        'collectiveInvoiceSystemId' => null,
        'combineInvoicesForElectronicBanking' => null,
        'countryId' => null,
        'creditLimit' => null,
        'creditSqueezeId' => null,
        'currencyId' => null,
        'customerGroupId' => 'int32',
        'customerId' => null,
        'customerStateId' => null,
        'database' => null,
        'dateChanged' => null,
        'dateCreated' => null,
        'deliveryConditionId' => null,
        'discountPercentage' => null,
        'email' => null,
        'fax' => null,
        'fullAddress' => null,
        'fullDeliveryAddress' => null,
        'governmentDigitalId' => null,
        'hasOutstandingBalance' => null,
        'homepage' => null,
        'includeVatOnOrderByDefault' => null,
        'intrastatGoodsCodeId' => null,
        'intrastatGoodsDistributionId' => null,
        'intrastatStatSystemId' => null,
        'intrastatTrafficRegionId' => null,
        'intrastatTransactionTypeId' => null,
        'intrastatTransportTypeId' => null,
        'invoiceOnBehalfOfMembers' => null,
        'isDunForPayment' => null,
        'isInFactoring' => null,
        'isPaymentRefRequired' => null,
        'isPurchaseOrganization' => null,
        'languageId' => null,
        'mobilePhone' => null,
        'name' => null,
        'organizationId' => 'int32',
        'paymentConditionId' => null,
        'person' => null,
        'pricelistId' => null,
        'printPurchaseDetails' => null,
        'purchaseOrganizationId' => null,
        'purchaseOrganizationMemberId' => null,
        'revenueAccountId' => null,
        'shortName' => null,
        'street1' => null,
        'street2' => null,
        'supplierId' => null,
        'telephone' => null,
        'usesUBLInvoice' => null,
        'vatNumber' => null,
        'vatScenarioId' => null,
        'vatVerificationDate' => null,
        'zipCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountManagerId' => 'accountManagerId',
        'addresses' => 'addresses',
        'applyOrderSurcharge' => 'applyOrderSurcharge',
        'businessNumber' => 'businessNumber',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'chargeVatTypeId' => 'chargeVatTypeId',
        'city' => 'city',
        'cocCity' => 'cocCity',
        'cocDate' => 'cocDate',
        'cocRegistration' => 'cocRegistration',
        'collectiveInvoiceSystemId' => 'collectiveInvoiceSystemId',
        'combineInvoicesForElectronicBanking' => 'combineInvoicesForElectronicBanking',
        'countryId' => 'countryId',
        'creditLimit' => 'creditLimit',
        'creditSqueezeId' => 'creditSqueezeId',
        'currencyId' => 'currencyId',
        'customerGroupId' => 'customerGroupId',
        'customerId' => 'customerId',
        'customerStateId' => 'customerStateId',
        'database' => 'database',
        'dateChanged' => 'dateChanged',
        'dateCreated' => 'dateCreated',
        'deliveryConditionId' => 'deliveryConditionId',
        'discountPercentage' => 'discountPercentage',
        'email' => 'email',
        'fax' => 'fax',
        'fullAddress' => 'fullAddress',
        'fullDeliveryAddress' => 'fullDeliveryAddress',
        'governmentDigitalId' => 'governmentDigitalId',
        'hasOutstandingBalance' => 'hasOutstandingBalance',
        'homepage' => 'homepage',
        'includeVatOnOrderByDefault' => 'includeVatOnOrderByDefault',
        'intrastatGoodsCodeId' => 'intrastatGoodsCodeId',
        'intrastatGoodsDistributionId' => 'intrastatGoodsDistributionId',
        'intrastatStatSystemId' => 'intrastatStatSystemId',
        'intrastatTrafficRegionId' => 'intrastatTrafficRegionId',
        'intrastatTransactionTypeId' => 'intrastatTransactionTypeId',
        'intrastatTransportTypeId' => 'intrastatTransportTypeId',
        'invoiceOnBehalfOfMembers' => 'invoiceOnBehalfOfMembers',
        'isDunForPayment' => 'isDunForPayment',
        'isInFactoring' => 'isInFactoring',
        'isPaymentRefRequired' => 'isPaymentRefRequired',
        'isPurchaseOrganization' => 'isPurchaseOrganization',
        'languageId' => 'languageId',
        'mobilePhone' => 'mobilePhone',
        'name' => 'name',
        'organizationId' => 'organizationId',
        'paymentConditionId' => 'paymentConditionId',
        'person' => 'person',
        'pricelistId' => 'pricelistId',
        'printPurchaseDetails' => 'printPurchaseDetails',
        'purchaseOrganizationId' => 'purchaseOrganizationId',
        'purchaseOrganizationMemberId' => 'purchaseOrganizationMemberId',
        'revenueAccountId' => 'revenueAccountId',
        'shortName' => 'shortName',
        'street1' => 'street1',
        'street2' => 'street2',
        'supplierId' => 'supplierId',
        'telephone' => 'telephone',
        'usesUBLInvoice' => 'usesUBLInvoice',
        'vatNumber' => 'vatNumber',
        'vatScenarioId' => 'vatScenarioId',
        'vatVerificationDate' => 'vatVerificationDate',
        'zipCode' => 'zipCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountManagerId' => 'setAccountManagerId',
        'addresses' => 'setAddresses',
        'applyOrderSurcharge' => 'setApplyOrderSurcharge',
        'businessNumber' => 'setBusinessNumber',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'chargeVatTypeId' => 'setChargeVatTypeId',
        'city' => 'setCity',
        'cocCity' => 'setCocCity',
        'cocDate' => 'setCocDate',
        'cocRegistration' => 'setCocRegistration',
        'collectiveInvoiceSystemId' => 'setCollectiveInvoiceSystemId',
        'combineInvoicesForElectronicBanking' => 'setCombineInvoicesForElectronicBanking',
        'countryId' => 'setCountryId',
        'creditLimit' => 'setCreditLimit',
        'creditSqueezeId' => 'setCreditSqueezeId',
        'currencyId' => 'setCurrencyId',
        'customerGroupId' => 'setCustomerGroupId',
        'customerId' => 'setCustomerId',
        'customerStateId' => 'setCustomerStateId',
        'database' => 'setDatabase',
        'dateChanged' => 'setDateChanged',
        'dateCreated' => 'setDateCreated',
        'deliveryConditionId' => 'setDeliveryConditionId',
        'discountPercentage' => 'setDiscountPercentage',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'fullAddress' => 'setFullAddress',
        'fullDeliveryAddress' => 'setFullDeliveryAddress',
        'governmentDigitalId' => 'setGovernmentDigitalId',
        'hasOutstandingBalance' => 'setHasOutstandingBalance',
        'homepage' => 'setHomepage',
        'includeVatOnOrderByDefault' => 'setIncludeVatOnOrderByDefault',
        'intrastatGoodsCodeId' => 'setIntrastatGoodsCodeId',
        'intrastatGoodsDistributionId' => 'setIntrastatGoodsDistributionId',
        'intrastatStatSystemId' => 'setIntrastatStatSystemId',
        'intrastatTrafficRegionId' => 'setIntrastatTrafficRegionId',
        'intrastatTransactionTypeId' => 'setIntrastatTransactionTypeId',
        'intrastatTransportTypeId' => 'setIntrastatTransportTypeId',
        'invoiceOnBehalfOfMembers' => 'setInvoiceOnBehalfOfMembers',
        'isDunForPayment' => 'setIsDunForPayment',
        'isInFactoring' => 'setIsInFactoring',
        'isPaymentRefRequired' => 'setIsPaymentRefRequired',
        'isPurchaseOrganization' => 'setIsPurchaseOrganization',
        'languageId' => 'setLanguageId',
        'mobilePhone' => 'setMobilePhone',
        'name' => 'setName',
        'organizationId' => 'setOrganizationId',
        'paymentConditionId' => 'setPaymentConditionId',
        'person' => 'setPerson',
        'pricelistId' => 'setPricelistId',
        'printPurchaseDetails' => 'setPrintPurchaseDetails',
        'purchaseOrganizationId' => 'setPurchaseOrganizationId',
        'purchaseOrganizationMemberId' => 'setPurchaseOrganizationMemberId',
        'revenueAccountId' => 'setRevenueAccountId',
        'shortName' => 'setShortName',
        'street1' => 'setStreet1',
        'street2' => 'setStreet2',
        'supplierId' => 'setSupplierId',
        'telephone' => 'setTelephone',
        'usesUBLInvoice' => 'setUsesUBLInvoice',
        'vatNumber' => 'setVatNumber',
        'vatScenarioId' => 'setVatScenarioId',
        'vatVerificationDate' => 'setVatVerificationDate',
        'zipCode' => 'setZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountManagerId' => 'getAccountManagerId',
        'addresses' => 'getAddresses',
        'applyOrderSurcharge' => 'getApplyOrderSurcharge',
        'businessNumber' => 'getBusinessNumber',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'chargeVatTypeId' => 'getChargeVatTypeId',
        'city' => 'getCity',
        'cocCity' => 'getCocCity',
        'cocDate' => 'getCocDate',
        'cocRegistration' => 'getCocRegistration',
        'collectiveInvoiceSystemId' => 'getCollectiveInvoiceSystemId',
        'combineInvoicesForElectronicBanking' => 'getCombineInvoicesForElectronicBanking',
        'countryId' => 'getCountryId',
        'creditLimit' => 'getCreditLimit',
        'creditSqueezeId' => 'getCreditSqueezeId',
        'currencyId' => 'getCurrencyId',
        'customerGroupId' => 'getCustomerGroupId',
        'customerId' => 'getCustomerId',
        'customerStateId' => 'getCustomerStateId',
        'database' => 'getDatabase',
        'dateChanged' => 'getDateChanged',
        'dateCreated' => 'getDateCreated',
        'deliveryConditionId' => 'getDeliveryConditionId',
        'discountPercentage' => 'getDiscountPercentage',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'fullAddress' => 'getFullAddress',
        'fullDeliveryAddress' => 'getFullDeliveryAddress',
        'governmentDigitalId' => 'getGovernmentDigitalId',
        'hasOutstandingBalance' => 'getHasOutstandingBalance',
        'homepage' => 'getHomepage',
        'includeVatOnOrderByDefault' => 'getIncludeVatOnOrderByDefault',
        'intrastatGoodsCodeId' => 'getIntrastatGoodsCodeId',
        'intrastatGoodsDistributionId' => 'getIntrastatGoodsDistributionId',
        'intrastatStatSystemId' => 'getIntrastatStatSystemId',
        'intrastatTrafficRegionId' => 'getIntrastatTrafficRegionId',
        'intrastatTransactionTypeId' => 'getIntrastatTransactionTypeId',
        'intrastatTransportTypeId' => 'getIntrastatTransportTypeId',
        'invoiceOnBehalfOfMembers' => 'getInvoiceOnBehalfOfMembers',
        'isDunForPayment' => 'getIsDunForPayment',
        'isInFactoring' => 'getIsInFactoring',
        'isPaymentRefRequired' => 'getIsPaymentRefRequired',
        'isPurchaseOrganization' => 'getIsPurchaseOrganization',
        'languageId' => 'getLanguageId',
        'mobilePhone' => 'getMobilePhone',
        'name' => 'getName',
        'organizationId' => 'getOrganizationId',
        'paymentConditionId' => 'getPaymentConditionId',
        'person' => 'getPerson',
        'pricelistId' => 'getPricelistId',
        'printPurchaseDetails' => 'getPrintPurchaseDetails',
        'purchaseOrganizationId' => 'getPurchaseOrganizationId',
        'purchaseOrganizationMemberId' => 'getPurchaseOrganizationMemberId',
        'revenueAccountId' => 'getRevenueAccountId',
        'shortName' => 'getShortName',
        'street1' => 'getStreet1',
        'street2' => 'getStreet2',
        'supplierId' => 'getSupplierId',
        'telephone' => 'getTelephone',
        'usesUBLInvoice' => 'getUsesUBLInvoice',
        'vatNumber' => 'getVatNumber',
        'vatScenarioId' => 'getVatScenarioId',
        'vatVerificationDate' => 'getVatVerificationDate',
        'zipCode' => 'getZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountManagerId'] = isset($data['accountManagerId']) ? $data['accountManagerId'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['applyOrderSurcharge'] = isset($data['applyOrderSurcharge']) ? $data['applyOrderSurcharge'] : null;
        $this->container['businessNumber'] = isset($data['businessNumber']) ? $data['businessNumber'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['chargeVatTypeId'] = isset($data['chargeVatTypeId']) ? $data['chargeVatTypeId'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['cocCity'] = isset($data['cocCity']) ? $data['cocCity'] : null;
        $this->container['cocDate'] = isset($data['cocDate']) ? $data['cocDate'] : null;
        $this->container['cocRegistration'] = isset($data['cocRegistration']) ? $data['cocRegistration'] : null;
        $this->container['collectiveInvoiceSystemId'] = isset($data['collectiveInvoiceSystemId']) ? $data['collectiveInvoiceSystemId'] : null;
        $this->container['combineInvoicesForElectronicBanking'] = isset($data['combineInvoicesForElectronicBanking']) ? $data['combineInvoicesForElectronicBanking'] : null;
        $this->container['countryId'] = isset($data['countryId']) ? $data['countryId'] : null;
        $this->container['creditLimit'] = isset($data['creditLimit']) ? $data['creditLimit'] : null;
        $this->container['creditSqueezeId'] = isset($data['creditSqueezeId']) ? $data['creditSqueezeId'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['customerGroupId'] = isset($data['customerGroupId']) ? $data['customerGroupId'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['customerStateId'] = isset($data['customerStateId']) ? $data['customerStateId'] : null;
        $this->container['database'] = isset($data['database']) ? $data['database'] : null;
        $this->container['dateChanged'] = isset($data['dateChanged']) ? $data['dateChanged'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['deliveryConditionId'] = isset($data['deliveryConditionId']) ? $data['deliveryConditionId'] : null;
        $this->container['discountPercentage'] = isset($data['discountPercentage']) ? $data['discountPercentage'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['fullAddress'] = isset($data['fullAddress']) ? $data['fullAddress'] : null;
        $this->container['fullDeliveryAddress'] = isset($data['fullDeliveryAddress']) ? $data['fullDeliveryAddress'] : null;
        $this->container['governmentDigitalId'] = isset($data['governmentDigitalId']) ? $data['governmentDigitalId'] : null;
        $this->container['hasOutstandingBalance'] = isset($data['hasOutstandingBalance']) ? $data['hasOutstandingBalance'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['includeVatOnOrderByDefault'] = isset($data['includeVatOnOrderByDefault']) ? $data['includeVatOnOrderByDefault'] : null;
        $this->container['intrastatGoodsCodeId'] = isset($data['intrastatGoodsCodeId']) ? $data['intrastatGoodsCodeId'] : null;
        $this->container['intrastatGoodsDistributionId'] = isset($data['intrastatGoodsDistributionId']) ? $data['intrastatGoodsDistributionId'] : null;
        $this->container['intrastatStatSystemId'] = isset($data['intrastatStatSystemId']) ? $data['intrastatStatSystemId'] : null;
        $this->container['intrastatTrafficRegionId'] = isset($data['intrastatTrafficRegionId']) ? $data['intrastatTrafficRegionId'] : null;
        $this->container['intrastatTransactionTypeId'] = isset($data['intrastatTransactionTypeId']) ? $data['intrastatTransactionTypeId'] : null;
        $this->container['intrastatTransportTypeId'] = isset($data['intrastatTransportTypeId']) ? $data['intrastatTransportTypeId'] : null;
        $this->container['invoiceOnBehalfOfMembers'] = isset($data['invoiceOnBehalfOfMembers']) ? $data['invoiceOnBehalfOfMembers'] : null;
        $this->container['isDunForPayment'] = isset($data['isDunForPayment']) ? $data['isDunForPayment'] : null;
        $this->container['isInFactoring'] = isset($data['isInFactoring']) ? $data['isInFactoring'] : null;
        $this->container['isPaymentRefRequired'] = isset($data['isPaymentRefRequired']) ? $data['isPaymentRefRequired'] : null;
        $this->container['isPurchaseOrganization'] = isset($data['isPurchaseOrganization']) ? $data['isPurchaseOrganization'] : null;
        $this->container['languageId'] = isset($data['languageId']) ? $data['languageId'] : null;
        $this->container['mobilePhone'] = isset($data['mobilePhone']) ? $data['mobilePhone'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['organizationId'] = isset($data['organizationId']) ? $data['organizationId'] : null;
        $this->container['paymentConditionId'] = isset($data['paymentConditionId']) ? $data['paymentConditionId'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['pricelistId'] = isset($data['pricelistId']) ? $data['pricelistId'] : null;
        $this->container['printPurchaseDetails'] = isset($data['printPurchaseDetails']) ? $data['printPurchaseDetails'] : null;
        $this->container['purchaseOrganizationId'] = isset($data['purchaseOrganizationId']) ? $data['purchaseOrganizationId'] : null;
        $this->container['purchaseOrganizationMemberId'] = isset($data['purchaseOrganizationMemberId']) ? $data['purchaseOrganizationMemberId'] : null;
        $this->container['revenueAccountId'] = isset($data['revenueAccountId']) ? $data['revenueAccountId'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['street1'] = isset($data['street1']) ? $data['street1'] : null;
        $this->container['street2'] = isset($data['street2']) ? $data['street2'] : null;
        $this->container['supplierId'] = isset($data['supplierId']) ? $data['supplierId'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['usesUBLInvoice'] = isset($data['usesUBLInvoice']) ? $data['usesUBLInvoice'] : null;
        $this->container['vatNumber'] = isset($data['vatNumber']) ? $data['vatNumber'] : null;
        $this->container['vatScenarioId'] = isset($data['vatScenarioId']) ? $data['vatScenarioId'] : null;
        $this->container['vatVerificationDate'] = isset($data['vatVerificationDate']) ? $data['vatVerificationDate'] : null;
        $this->container['zipCode'] = isset($data['zipCode']) ? $data['zipCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accountManagerId']) && (mb_strlen($this->container['accountManagerId']) > 8)) {
            $invalidProperties[] = "invalid value for 'accountManagerId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['businessNumber']) && (mb_strlen($this->container['businessNumber']) > 15)) {
            $invalidProperties[] = "invalid value for 'businessNumber', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 30)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['cocCity']) && (mb_strlen($this->container['cocCity']) > 30)) {
            $invalidProperties[] = "invalid value for 'cocCity', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['cocRegistration']) && (mb_strlen($this->container['cocRegistration']) > 12)) {
            $invalidProperties[] = "invalid value for 'cocRegistration', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['collectiveInvoiceSystemId']) && (mb_strlen($this->container['collectiveInvoiceSystemId']) > 1)) {
            $invalidProperties[] = "invalid value for 'collectiveInvoiceSystemId', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['countryId']) && (mb_strlen($this->container['countryId']) > 3)) {
            $invalidProperties[] = "invalid value for 'countryId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['creditLimit']) && ($this->container['creditLimit'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'creditLimit', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['creditLimit']) && ($this->container['creditLimit'] < 0)) {
            $invalidProperties[] = "invalid value for 'creditLimit', must be bigger than or equal to 0.";
        }

        if ($this->container['creditSqueezeId'] === null) {
            $invalidProperties[] = "'creditSqueezeId' can't be null";
        }
        if ((mb_strlen($this->container['creditSqueezeId']) > 1)) {
            $invalidProperties[] = "invalid value for 'creditSqueezeId', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['currencyId']) && (mb_strlen($this->container['currencyId']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['customerGroupId']) && ($this->container['customerGroupId'] > 9)) {
            $invalidProperties[] = "invalid value for 'customerGroupId', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['customerGroupId']) && ($this->container['customerGroupId'] < 0)) {
            $invalidProperties[] = "invalid value for 'customerGroupId', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customerId']) && (mb_strlen($this->container['customerId']) > 8)) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['customerStateId']) && (mb_strlen($this->container['customerStateId']) > 1)) {
            $invalidProperties[] = "invalid value for 'customerStateId', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['deliveryConditionId']) && (mb_strlen($this->container['deliveryConditionId']) > 3)) {
            $invalidProperties[] = "invalid value for 'deliveryConditionId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['discountPercentage']) && ($this->container['discountPercentage'] > 1)) {
            $invalidProperties[] = "invalid value for 'discountPercentage', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['discountPercentage']) && ($this->container['discountPercentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'discountPercentage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 60)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) > 25)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['homepage']) && (mb_strlen($this->container['homepage']) > 65)) {
            $invalidProperties[] = "invalid value for 'homepage', the character length must be smaller than or equal to 65.";
        }

        if (!is_null($this->container['intrastatTransactionTypeId']) && (mb_strlen($this->container['intrastatTransactionTypeId']) > 2)) {
            $invalidProperties[] = "invalid value for 'intrastatTransactionTypeId', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['languageId']) && (mb_strlen($this->container['languageId']) > 3)) {
            $invalidProperties[] = "invalid value for 'languageId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['mobilePhone']) && (mb_strlen($this->container['mobilePhone']) > 25)) {
            $invalidProperties[] = "invalid value for 'mobilePhone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 40)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organizationId']) && ($this->container['organizationId'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'organizationId', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['organizationId']) && ($this->container['organizationId'] < 0)) {
            $invalidProperties[] = "invalid value for 'organizationId', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['paymentConditionId']) && (mb_strlen($this->container['paymentConditionId']) > 3)) {
            $invalidProperties[] = "invalid value for 'paymentConditionId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['person']) && (mb_strlen($this->container['person']) > 55)) {
            $invalidProperties[] = "invalid value for 'person', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['pricelistId']) && (mb_strlen($this->container['pricelistId']) > 3)) {
            $invalidProperties[] = "invalid value for 'pricelistId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchaseOrganizationId']) && (mb_strlen($this->container['purchaseOrganizationId']) > 8)) {
            $invalidProperties[] = "invalid value for 'purchaseOrganizationId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['purchaseOrganizationMemberId']) && (mb_strlen($this->container['purchaseOrganizationMemberId']) > 20)) {
            $invalidProperties[] = "invalid value for 'purchaseOrganizationMemberId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['revenueAccountId']) && (mb_strlen($this->container['revenueAccountId']) > 8)) {
            $invalidProperties[] = "invalid value for 'revenueAccountId', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['shortName'] === null) {
            $invalidProperties[] = "'shortName' can't be null";
        }
        if ((mb_strlen($this->container['shortName']) > 8)) {
            $invalidProperties[] = "invalid value for 'shortName', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['street1']) && (mb_strlen($this->container['street1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street2']) && (mb_strlen($this->container['street2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['supplierId']) && (mb_strlen($this->container['supplierId']) > 8)) {
            $invalidProperties[] = "invalid value for 'supplierId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 25)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['vatNumber']) && (mb_strlen($this->container['vatNumber']) > 30)) {
            $invalidProperties[] = "invalid value for 'vatNumber', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['zipCode']) && (mb_strlen($this->container['zipCode']) > 10)) {
            $invalidProperties[] = "invalid value for 'zipCode', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountManagerId
     *
     * @return string|null
     */
    public function getAccountManagerId()
    {
        return $this->container['accountManagerId'];
    }

    /**
     * Sets accountManagerId
     *
     * @param string|null $accountManagerId accountManagerId
     *
     * @return $this
     */
    public function setAccountManagerId($accountManagerId)
    {
        if (!is_null($accountManagerId) && (mb_strlen($accountManagerId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $accountManagerId when calling Customer., must be smaller than or equal to 8.');
        }

        $this->container['accountManagerId'] = $accountManagerId;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\Address[]|null $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets applyOrderSurcharge
     *
     * @return bool|null
     */
    public function getApplyOrderSurcharge()
    {
        return $this->container['applyOrderSurcharge'];
    }

    /**
     * Sets applyOrderSurcharge
     *
     * @param bool|null $applyOrderSurcharge applyOrderSurcharge
     *
     * @return $this
     */
    public function setApplyOrderSurcharge($applyOrderSurcharge)
    {
        $this->container['applyOrderSurcharge'] = $applyOrderSurcharge;

        return $this;
    }

    /**
     * Gets businessNumber
     *
     * @return string|null
     */
    public function getBusinessNumber()
    {
        return $this->container['businessNumber'];
    }

    /**
     * Sets businessNumber
     *
     * @param string|null $businessNumber businessNumber
     *
     * @return $this
     */
    public function setBusinessNumber($businessNumber)
    {
        if (!is_null($businessNumber) && (mb_strlen($businessNumber) > 15)) {
            throw new \InvalidArgumentException('invalid length for $businessNumber when calling Customer., must be smaller than or equal to 15.');
        }

        $this->container['businessNumber'] = $businessNumber;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets chargeVatTypeId
     *
     * @return int|null
     */
    public function getChargeVatTypeId()
    {
        return $this->container['chargeVatTypeId'];
    }

    /**
     * Sets chargeVatTypeId
     *
     * @param int|null $chargeVatTypeId 0 = No 1 = Yes 2 = Subcontractor
     *
     * @return $this
     */
    public function setChargeVatTypeId($chargeVatTypeId)
    {
        $this->container['chargeVatTypeId'] = $chargeVatTypeId;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Customer., must be smaller than or equal to 30.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets cocCity
     *
     * @return string|null
     */
    public function getCocCity()
    {
        return $this->container['cocCity'];
    }

    /**
     * Sets cocCity
     *
     * @param string|null $cocCity cocCity
     *
     * @return $this
     */
    public function setCocCity($cocCity)
    {
        if (!is_null($cocCity) && (mb_strlen($cocCity) > 30)) {
            throw new \InvalidArgumentException('invalid length for $cocCity when calling Customer., must be smaller than or equal to 30.');
        }

        $this->container['cocCity'] = $cocCity;

        return $this;
    }

    /**
     * Gets cocDate
     *
     * @return string|null
     */
    public function getCocDate()
    {
        return $this->container['cocDate'];
    }

    /**
     * Sets cocDate
     *
     * @param string|null $cocDate cocDate
     *
     * @return $this
     */
    public function setCocDate($cocDate)
    {
        $this->container['cocDate'] = $cocDate;

        return $this;
    }

    /**
     * Gets cocRegistration
     *
     * @return string|null
     */
    public function getCocRegistration()
    {
        return $this->container['cocRegistration'];
    }

    /**
     * Sets cocRegistration
     *
     * @param string|null $cocRegistration cocRegistration
     *
     * @return $this
     */
    public function setCocRegistration($cocRegistration)
    {
        if (!is_null($cocRegistration) && (mb_strlen($cocRegistration) > 12)) {
            throw new \InvalidArgumentException('invalid length for $cocRegistration when calling Customer., must be smaller than or equal to 12.');
        }

        $this->container['cocRegistration'] = $cocRegistration;

        return $this;
    }

    /**
     * Gets collectiveInvoiceSystemId
     *
     * @return string|null
     */
    public function getCollectiveInvoiceSystemId()
    {
        return $this->container['collectiveInvoiceSystemId'];
    }

    /**
     * Sets collectiveInvoiceSystemId
     *
     * @param string|null $collectiveInvoiceSystemId collectiveInvoiceSystemId
     *
     * @return $this
     */
    public function setCollectiveInvoiceSystemId($collectiveInvoiceSystemId)
    {
        if (!is_null($collectiveInvoiceSystemId) && (mb_strlen($collectiveInvoiceSystemId) > 1)) {
            throw new \InvalidArgumentException('invalid length for $collectiveInvoiceSystemId when calling Customer., must be smaller than or equal to 1.');
        }

        $this->container['collectiveInvoiceSystemId'] = $collectiveInvoiceSystemId;

        return $this;
    }

    /**
     * Gets combineInvoicesForElectronicBanking
     *
     * @return bool|null
     */
    public function getCombineInvoicesForElectronicBanking()
    {
        return $this->container['combineInvoicesForElectronicBanking'];
    }

    /**
     * Sets combineInvoicesForElectronicBanking
     *
     * @param bool|null $combineInvoicesForElectronicBanking combineInvoicesForElectronicBanking
     *
     * @return $this
     */
    public function setCombineInvoicesForElectronicBanking($combineInvoicesForElectronicBanking)
    {
        $this->container['combineInvoicesForElectronicBanking'] = $combineInvoicesForElectronicBanking;

        return $this;
    }

    /**
     * Gets countryId
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['countryId'];
    }

    /**
     * Sets countryId
     *
     * @param string|null $countryId countryId
     *
     * @return $this
     */
    public function setCountryId($countryId)
    {
        if (!is_null($countryId) && (mb_strlen($countryId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $countryId when calling Customer., must be smaller than or equal to 3.');
        }

        $this->container['countryId'] = $countryId;

        return $this;
    }

    /**
     * Gets creditLimit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     *
     * @param float|null $creditLimit creditLimit
     *
     * @return $this
     */
    public function setCreditLimit($creditLimit)
    {

        if (!is_null($creditLimit) && ($creditLimit > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $creditLimit when calling Customer., must be smaller than or equal to 999999999.');
        }
        if (!is_null($creditLimit) && ($creditLimit < 0)) {
            throw new \InvalidArgumentException('invalid value for $creditLimit when calling Customer., must be bigger than or equal to 0.');
        }

        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets creditSqueezeId
     *
     * @return string
     */
    public function getCreditSqueezeId()
    {
        return $this->container['creditSqueezeId'];
    }

    /**
     * Sets creditSqueezeId
     *
     * @param string $creditSqueezeId creditSqueezeId
     *
     * @return $this
     */
    public function setCreditSqueezeId($creditSqueezeId)
    {
        if ((mb_strlen($creditSqueezeId) > 1)) {
            throw new \InvalidArgumentException('invalid length for $creditSqueezeId when calling Customer., must be smaller than or equal to 1.');
        }

        $this->container['creditSqueezeId'] = $creditSqueezeId;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        if (!is_null($currencyId) && (mb_strlen($currencyId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyId when calling Customer., must be smaller than or equal to 3.');
        }

        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets customerGroupId
     *
     * @return int|null
     */
    public function getCustomerGroupId()
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId
     *
     * @param int|null $customerGroupId customerGroupId
     *
     * @return $this
     */
    public function setCustomerGroupId($customerGroupId)
    {

        if (!is_null($customerGroupId) && ($customerGroupId > 9)) {
            throw new \InvalidArgumentException('invalid value for $customerGroupId when calling Customer., must be smaller than or equal to 9.');
        }
        if (!is_null($customerGroupId) && ($customerGroupId < 0)) {
            throw new \InvalidArgumentException('invalid value for $customerGroupId when calling Customer., must be bigger than or equal to 0.');
        }

        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId customerId
     *
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        if (!is_null($customerId) && (mb_strlen($customerId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling Customer., must be smaller than or equal to 8.');
        }

        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerStateId
     *
     * @return string|null
     */
    public function getCustomerStateId()
    {
        return $this->container['customerStateId'];
    }

    /**
     * Sets customerStateId
     *
     * @param string|null $customerStateId customerStateId
     *
     * @return $this
     */
    public function setCustomerStateId($customerStateId)
    {
        if (!is_null($customerStateId) && (mb_strlen($customerStateId) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customerStateId when calling Customer., must be smaller than or equal to 1.');
        }

        $this->container['customerStateId'] = $customerStateId;

        return $this;
    }

    /**
     * Gets database
     *
     * @return string|null
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param string|null $database database
     *
     * @return $this
     */
    public function setDatabase($database)
    {
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets dateChanged
     *
     * @return string|null
     */
    public function getDateChanged()
    {
        return $this->container['dateChanged'];
    }

    /**
     * Sets dateChanged
     *
     * @param string|null $dateChanged dateChanged
     *
     * @return $this
     */
    public function setDateChanged($dateChanged)
    {
        $this->container['dateChanged'] = $dateChanged;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string|null $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets deliveryConditionId
     *
     * @return string|null
     */
    public function getDeliveryConditionId()
    {
        return $this->container['deliveryConditionId'];
    }

    /**
     * Sets deliveryConditionId
     *
     * @param string|null $deliveryConditionId deliveryConditionId
     *
     * @return $this
     */
    public function setDeliveryConditionId($deliveryConditionId)
    {
        if (!is_null($deliveryConditionId) && (mb_strlen($deliveryConditionId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $deliveryConditionId when calling Customer., must be smaller than or equal to 3.');
        }

        $this->container['deliveryConditionId'] = $deliveryConditionId;

        return $this;
    }

    /**
     * Gets discountPercentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discountPercentage'];
    }

    /**
     * Sets discountPercentage
     *
     * @param float|null $discountPercentage discountPercentage
     *
     * @return $this
     */
    public function setDiscountPercentage($discountPercentage)
    {

        if (!is_null($discountPercentage) && ($discountPercentage > 1)) {
            throw new \InvalidArgumentException('invalid value for $discountPercentage when calling Customer., must be smaller than or equal to 1.');
        }
        if (!is_null($discountPercentage) && ($discountPercentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $discountPercentage when calling Customer., must be bigger than or equal to 0.');
        }

        $this->container['discountPercentage'] = $discountPercentage;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 60)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Customer., must be smaller than or equal to 60.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        if (!is_null($fax) && (mb_strlen($fax) > 25)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling Customer., must be smaller than or equal to 25.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets fullAddress
     *
     * @return string|null
     */
    public function getFullAddress()
    {
        return $this->container['fullAddress'];
    }

    /**
     * Sets fullAddress
     *
     * @param string|null $fullAddress fullAddress
     *
     * @return $this
     */
    public function setFullAddress($fullAddress)
    {
        $this->container['fullAddress'] = $fullAddress;

        return $this;
    }

    /**
     * Gets fullDeliveryAddress
     *
     * @return string|null
     */
    public function getFullDeliveryAddress()
    {
        return $this->container['fullDeliveryAddress'];
    }

    /**
     * Sets fullDeliveryAddress
     *
     * @param string|null $fullDeliveryAddress fullDeliveryAddress
     *
     * @return $this
     */
    public function setFullDeliveryAddress($fullDeliveryAddress)
    {
        $this->container['fullDeliveryAddress'] = $fullDeliveryAddress;

        return $this;
    }

    /**
     * Gets governmentDigitalId
     *
     * @return string|null
     */
    public function getGovernmentDigitalId()
    {
        return $this->container['governmentDigitalId'];
    }

    /**
     * Sets governmentDigitalId
     *
     * @param string|null $governmentDigitalId governmentDigitalId
     *
     * @return $this
     */
    public function setGovernmentDigitalId($governmentDigitalId)
    {
        $this->container['governmentDigitalId'] = $governmentDigitalId;

        return $this;
    }

    /**
     * Gets hasOutstandingBalance
     *
     * @return bool|null
     */
    public function getHasOutstandingBalance()
    {
        return $this->container['hasOutstandingBalance'];
    }

    /**
     * Sets hasOutstandingBalance
     *
     * @param bool|null $hasOutstandingBalance hasOutstandingBalance
     *
     * @return $this
     */
    public function setHasOutstandingBalance($hasOutstandingBalance)
    {
        $this->container['hasOutstandingBalance'] = $hasOutstandingBalance;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage homepage
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        if (!is_null($homepage) && (mb_strlen($homepage) > 65)) {
            throw new \InvalidArgumentException('invalid length for $homepage when calling Customer., must be smaller than or equal to 65.');
        }

        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets includeVatOnOrderByDefault
     *
     * @return bool|null
     */
    public function getIncludeVatOnOrderByDefault()
    {
        return $this->container['includeVatOnOrderByDefault'];
    }

    /**
     * Sets includeVatOnOrderByDefault
     *
     * @param bool|null $includeVatOnOrderByDefault includeVatOnOrderByDefault
     *
     * @return $this
     */
    public function setIncludeVatOnOrderByDefault($includeVatOnOrderByDefault)
    {
        $this->container['includeVatOnOrderByDefault'] = $includeVatOnOrderByDefault;

        return $this;
    }

    /**
     * Gets intrastatGoodsCodeId
     *
     * @return int|null
     */
    public function getIntrastatGoodsCodeId()
    {
        return $this->container['intrastatGoodsCodeId'];
    }

    /**
     * Sets intrastatGoodsCodeId
     *
     * @param int|null $intrastatGoodsCodeId intrastatGoodsCodeId
     *
     * @return $this
     */
    public function setIntrastatGoodsCodeId($intrastatGoodsCodeId)
    {
        $this->container['intrastatGoodsCodeId'] = $intrastatGoodsCodeId;

        return $this;
    }

    /**
     * Gets intrastatGoodsDistributionId
     *
     * @return int|null
     */
    public function getIntrastatGoodsDistributionId()
    {
        return $this->container['intrastatGoodsDistributionId'];
    }

    /**
     * Sets intrastatGoodsDistributionId
     *
     * @param int|null $intrastatGoodsDistributionId intrastatGoodsDistributionId
     *
     * @return $this
     */
    public function setIntrastatGoodsDistributionId($intrastatGoodsDistributionId)
    {
        $this->container['intrastatGoodsDistributionId'] = $intrastatGoodsDistributionId;

        return $this;
    }

    /**
     * Gets intrastatStatSystemId
     *
     * @return int|null
     */
    public function getIntrastatStatSystemId()
    {
        return $this->container['intrastatStatSystemId'];
    }

    /**
     * Sets intrastatStatSystemId
     *
     * @param int|null $intrastatStatSystemId intrastatStatSystemId
     *
     * @return $this
     */
    public function setIntrastatStatSystemId($intrastatStatSystemId)
    {
        $this->container['intrastatStatSystemId'] = $intrastatStatSystemId;

        return $this;
    }

    /**
     * Gets intrastatTrafficRegionId
     *
     * @return int|null
     */
    public function getIntrastatTrafficRegionId()
    {
        return $this->container['intrastatTrafficRegionId'];
    }

    /**
     * Sets intrastatTrafficRegionId
     *
     * @param int|null $intrastatTrafficRegionId intrastatTrafficRegionId
     *
     * @return $this
     */
    public function setIntrastatTrafficRegionId($intrastatTrafficRegionId)
    {
        $this->container['intrastatTrafficRegionId'] = $intrastatTrafficRegionId;

        return $this;
    }

    /**
     * Gets intrastatTransactionTypeId
     *
     * @return string|null
     */
    public function getIntrastatTransactionTypeId()
    {
        return $this->container['intrastatTransactionTypeId'];
    }

    /**
     * Sets intrastatTransactionTypeId
     *
     * @param string|null $intrastatTransactionTypeId intrastatTransactionTypeId
     *
     * @return $this
     */
    public function setIntrastatTransactionTypeId($intrastatTransactionTypeId)
    {
        if (!is_null($intrastatTransactionTypeId) && (mb_strlen($intrastatTransactionTypeId) > 2)) {
            throw new \InvalidArgumentException('invalid length for $intrastatTransactionTypeId when calling Customer., must be smaller than or equal to 2.');
        }

        $this->container['intrastatTransactionTypeId'] = $intrastatTransactionTypeId;

        return $this;
    }

    /**
     * Gets intrastatTransportTypeId
     *
     * @return int|null
     */
    public function getIntrastatTransportTypeId()
    {
        return $this->container['intrastatTransportTypeId'];
    }

    /**
     * Sets intrastatTransportTypeId
     *
     * @param int|null $intrastatTransportTypeId intrastatTransportTypeId
     *
     * @return $this
     */
    public function setIntrastatTransportTypeId($intrastatTransportTypeId)
    {
        $this->container['intrastatTransportTypeId'] = $intrastatTransportTypeId;

        return $this;
    }

    /**
     * Gets invoiceOnBehalfOfMembers
     *
     * @return bool|null
     */
    public function getInvoiceOnBehalfOfMembers()
    {
        return $this->container['invoiceOnBehalfOfMembers'];
    }

    /**
     * Sets invoiceOnBehalfOfMembers
     *
     * @param bool|null $invoiceOnBehalfOfMembers invoiceOnBehalfOfMembers
     *
     * @return $this
     */
    public function setInvoiceOnBehalfOfMembers($invoiceOnBehalfOfMembers)
    {
        $this->container['invoiceOnBehalfOfMembers'] = $invoiceOnBehalfOfMembers;

        return $this;
    }

    /**
     * Gets isDunForPayment
     *
     * @return bool|null
     */
    public function getIsDunForPayment()
    {
        return $this->container['isDunForPayment'];
    }

    /**
     * Sets isDunForPayment
     *
     * @param bool|null $isDunForPayment isDunForPayment
     *
     * @return $this
     */
    public function setIsDunForPayment($isDunForPayment)
    {
        $this->container['isDunForPayment'] = $isDunForPayment;

        return $this;
    }

    /**
     * Gets isInFactoring
     *
     * @return bool|null
     */
    public function getIsInFactoring()
    {
        return $this->container['isInFactoring'];
    }

    /**
     * Sets isInFactoring
     *
     * @param bool|null $isInFactoring isInFactoring
     *
     * @return $this
     */
    public function setIsInFactoring($isInFactoring)
    {
        $this->container['isInFactoring'] = $isInFactoring;

        return $this;
    }

    /**
     * Gets isPaymentRefRequired
     *
     * @return bool|null
     */
    public function getIsPaymentRefRequired()
    {
        return $this->container['isPaymentRefRequired'];
    }

    /**
     * Sets isPaymentRefRequired
     *
     * @param bool|null $isPaymentRefRequired isPaymentRefRequired
     *
     * @return $this
     */
    public function setIsPaymentRefRequired($isPaymentRefRequired)
    {
        $this->container['isPaymentRefRequired'] = $isPaymentRefRequired;

        return $this;
    }

    /**
     * Gets isPurchaseOrganization
     *
     * @return bool|null
     */
    public function getIsPurchaseOrganization()
    {
        return $this->container['isPurchaseOrganization'];
    }

    /**
     * Sets isPurchaseOrganization
     *
     * @param bool|null $isPurchaseOrganization isPurchaseOrganization
     *
     * @return $this
     */
    public function setIsPurchaseOrganization($isPurchaseOrganization)
    {
        $this->container['isPurchaseOrganization'] = $isPurchaseOrganization;

        return $this;
    }

    /**
     * Gets languageId
     *
     * @return string|null
     */
    public function getLanguageId()
    {
        return $this->container['languageId'];
    }

    /**
     * Sets languageId
     *
     * @param string|null $languageId languageId
     *
     * @return $this
     */
    public function setLanguageId($languageId)
    {
        if (!is_null($languageId) && (mb_strlen($languageId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $languageId when calling Customer., must be smaller than or equal to 3.');
        }

        $this->container['languageId'] = $languageId;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param string|null $mobilePhone mobilePhone
     *
     * @return $this
     */
    public function setMobilePhone($mobilePhone)
    {
        if (!is_null($mobilePhone) && (mb_strlen($mobilePhone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $mobilePhone when calling Customer., must be smaller than or equal to 25.');
        }

        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Customer., must be smaller than or equal to 40.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return int|null
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param int|null $organizationId organizationId
     *
     * @return $this
     */
    public function setOrganizationId($organizationId)
    {

        if (!is_null($organizationId) && ($organizationId > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $organizationId when calling Customer., must be smaller than or equal to 99999999.');
        }
        if (!is_null($organizationId) && ($organizationId < 0)) {
            throw new \InvalidArgumentException('invalid value for $organizationId when calling Customer., must be bigger than or equal to 0.');
        }

        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets paymentConditionId
     *
     * @return string|null
     */
    public function getPaymentConditionId()
    {
        return $this->container['paymentConditionId'];
    }

    /**
     * Sets paymentConditionId
     *
     * @param string|null $paymentConditionId paymentConditionId
     *
     * @return $this
     */
    public function setPaymentConditionId($paymentConditionId)
    {
        if (!is_null($paymentConditionId) && (mb_strlen($paymentConditionId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $paymentConditionId when calling Customer., must be smaller than or equal to 3.');
        }

        $this->container['paymentConditionId'] = $paymentConditionId;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string|null
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string|null $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        if (!is_null($person) && (mb_strlen($person) > 55)) {
            throw new \InvalidArgumentException('invalid length for $person when calling Customer., must be smaller than or equal to 55.');
        }

        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets pricelistId
     *
     * @return string|null
     */
    public function getPricelistId()
    {
        return $this->container['pricelistId'];
    }

    /**
     * Sets pricelistId
     *
     * @param string|null $pricelistId pricelistId
     *
     * @return $this
     */
    public function setPricelistId($pricelistId)
    {
        if (!is_null($pricelistId) && (mb_strlen($pricelistId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pricelistId when calling Customer., must be smaller than or equal to 3.');
        }

        $this->container['pricelistId'] = $pricelistId;

        return $this;
    }

    /**
     * Gets printPurchaseDetails
     *
     * @return bool|null
     */
    public function getPrintPurchaseDetails()
    {
        return $this->container['printPurchaseDetails'];
    }

    /**
     * Sets printPurchaseDetails
     *
     * @param bool|null $printPurchaseDetails printPurchaseDetails
     *
     * @return $this
     */
    public function setPrintPurchaseDetails($printPurchaseDetails)
    {
        $this->container['printPurchaseDetails'] = $printPurchaseDetails;

        return $this;
    }

    /**
     * Gets purchaseOrganizationId
     *
     * @return string|null
     */
    public function getPurchaseOrganizationId()
    {
        return $this->container['purchaseOrganizationId'];
    }

    /**
     * Sets purchaseOrganizationId
     *
     * @param string|null $purchaseOrganizationId purchaseOrganizationId
     *
     * @return $this
     */
    public function setPurchaseOrganizationId($purchaseOrganizationId)
    {
        if (!is_null($purchaseOrganizationId) && (mb_strlen($purchaseOrganizationId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $purchaseOrganizationId when calling Customer., must be smaller than or equal to 8.');
        }

        $this->container['purchaseOrganizationId'] = $purchaseOrganizationId;

        return $this;
    }

    /**
     * Gets purchaseOrganizationMemberId
     *
     * @return string|null
     */
    public function getPurchaseOrganizationMemberId()
    {
        return $this->container['purchaseOrganizationMemberId'];
    }

    /**
     * Sets purchaseOrganizationMemberId
     *
     * @param string|null $purchaseOrganizationMemberId purchaseOrganizationMemberId
     *
     * @return $this
     */
    public function setPurchaseOrganizationMemberId($purchaseOrganizationMemberId)
    {
        if (!is_null($purchaseOrganizationMemberId) && (mb_strlen($purchaseOrganizationMemberId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $purchaseOrganizationMemberId when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['purchaseOrganizationMemberId'] = $purchaseOrganizationMemberId;

        return $this;
    }

    /**
     * Gets revenueAccountId
     *
     * @return string|null
     */
    public function getRevenueAccountId()
    {
        return $this->container['revenueAccountId'];
    }

    /**
     * Sets revenueAccountId
     *
     * @param string|null $revenueAccountId revenueAccountId
     *
     * @return $this
     */
    public function setRevenueAccountId($revenueAccountId)
    {
        if (!is_null($revenueAccountId) && (mb_strlen($revenueAccountId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $revenueAccountId when calling Customer., must be smaller than or equal to 8.');
        }

        $this->container['revenueAccountId'] = $revenueAccountId;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        if ((mb_strlen($shortName) > 8)) {
            throw new \InvalidArgumentException('invalid length for $shortName when calling Customer., must be smaller than or equal to 8.');
        }

        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string|null $street1 street1
     *
     * @return $this
     */
    public function setStreet1($street1)
    {
        if (!is_null($street1) && (mb_strlen($street1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street1 when calling Customer., must be smaller than or equal to 40.');
        }

        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string|null $street2 street2
     *
     * @return $this
     */
    public function setStreet2($street2)
    {
        if (!is_null($street2) && (mb_strlen($street2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street2 when calling Customer., must be smaller than or equal to 40.');
        }

        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets supplierId
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplierId'];
    }

    /**
     * Sets supplierId
     *
     * @param string|null $supplierId supplierId
     *
     * @return $this
     */
    public function setSupplierId($supplierId)
    {
        if (!is_null($supplierId) && (mb_strlen($supplierId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $supplierId when calling Customer., must be smaller than or equal to 8.');
        }

        $this->container['supplierId'] = $supplierId;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        if (!is_null($telephone) && (mb_strlen($telephone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling Customer., must be smaller than or equal to 25.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets usesUBLInvoice
     *
     * @return bool|null
     */
    public function getUsesUBLInvoice()
    {
        return $this->container['usesUBLInvoice'];
    }

    /**
     * Sets usesUBLInvoice
     *
     * @param bool|null $usesUBLInvoice usesUBLInvoice
     *
     * @return $this
     */
    public function setUsesUBLInvoice($usesUBLInvoice)
    {
        $this->container['usesUBLInvoice'] = $usesUBLInvoice;

        return $this;
    }

    /**
     * Gets vatNumber
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vatNumber'];
    }

    /**
     * Sets vatNumber
     *
     * @param string|null $vatNumber vatNumber
     *
     * @return $this
     */
    public function setVatNumber($vatNumber)
    {
        if (!is_null($vatNumber) && (mb_strlen($vatNumber) > 30)) {
            throw new \InvalidArgumentException('invalid length for $vatNumber when calling Customer., must be smaller than or equal to 30.');
        }

        $this->container['vatNumber'] = $vatNumber;

        return $this;
    }

    /**
     * Gets vatScenarioId
     *
     * @return int|null
     */
    public function getVatScenarioId()
    {
        return $this->container['vatScenarioId'];
    }

    /**
     * Sets vatScenarioId
     *
     * @param int|null $vatScenarioId vatScenarioId
     *
     * @return $this
     */
    public function setVatScenarioId($vatScenarioId)
    {
        $this->container['vatScenarioId'] = $vatScenarioId;

        return $this;
    }

    /**
     * Gets vatVerificationDate
     *
     * @return string|null
     */
    public function getVatVerificationDate()
    {
        return $this->container['vatVerificationDate'];
    }

    /**
     * Sets vatVerificationDate
     *
     * @param string|null $vatVerificationDate vatVerificationDate
     *
     * @return $this
     */
    public function setVatVerificationDate($vatVerificationDate)
    {
        $this->container['vatVerificationDate'] = $vatVerificationDate;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string|null $zipCode zipCode
     *
     * @return $this
     */
    public function setZipCode($zipCode)
    {
        if (!is_null($zipCode) && (mb_strlen($zipCode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zipCode when calling Customer., must be smaller than or equal to 10.');
        }

        $this->container['zipCode'] = $zipCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


