<?php
/**
 * SubAdminSpecEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * SubAdminSpecEntry Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubAdminSpecEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubAdminSpecEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'amountCur' => 'float',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'currencyId' => 'string',
        'dateValue' => 'string',
        'domainValue1' => 'string',
        'domainValue2' => 'string',
        'domainValue3' => 'string',
        'domainValue4' => 'string',
        'domainValue5' => 'string',
        'numberValue1' => 'float',
        'numberValue2' => 'float',
        'numberValue3' => 'float',
        'numberValue4' => 'float',
        'quantity1' => 'float',
        'quantity2' => 'float',
        'quantity3' => 'float',
        'quantity4' => 'float',
        'subAdminId' => 'string',
        'customProperties' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'amountCur' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'currencyId' => null,
        'dateValue' => null,
        'domainValue1' => null,
        'domainValue2' => null,
        'domainValue3' => null,
        'domainValue4' => null,
        'domainValue5' => null,
        'numberValue1' => null,
        'numberValue2' => null,
        'numberValue3' => null,
        'numberValue4' => null,
        'quantity1' => null,
        'quantity2' => null,
        'quantity3' => null,
        'quantity4' => null,
        'subAdminId' => null,
        'customProperties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'amountCur' => 'amountCur',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'currencyId' => 'currencyId',
        'dateValue' => 'dateValue',
        'domainValue1' => 'domainValue1',
        'domainValue2' => 'domainValue2',
        'domainValue3' => 'domainValue3',
        'domainValue4' => 'domainValue4',
        'domainValue5' => 'domainValue5',
        'numberValue1' => 'numberValue1',
        'numberValue2' => 'numberValue2',
        'numberValue3' => 'numberValue3',
        'numberValue4' => 'numberValue4',
        'quantity1' => 'quantity1',
        'quantity2' => 'quantity2',
        'quantity3' => 'quantity3',
        'quantity4' => 'quantity4',
        'subAdminId' => 'subAdminId',
        'customProperties' => 'customProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'amountCur' => 'setAmountCur',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'currencyId' => 'setCurrencyId',
        'dateValue' => 'setDateValue',
        'domainValue1' => 'setDomainValue1',
        'domainValue2' => 'setDomainValue2',
        'domainValue3' => 'setDomainValue3',
        'domainValue4' => 'setDomainValue4',
        'domainValue5' => 'setDomainValue5',
        'numberValue1' => 'setNumberValue1',
        'numberValue2' => 'setNumberValue2',
        'numberValue3' => 'setNumberValue3',
        'numberValue4' => 'setNumberValue4',
        'quantity1' => 'setQuantity1',
        'quantity2' => 'setQuantity2',
        'quantity3' => 'setQuantity3',
        'quantity4' => 'setQuantity4',
        'subAdminId' => 'setSubAdminId',
        'customProperties' => 'setCustomProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'amountCur' => 'getAmountCur',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'currencyId' => 'getCurrencyId',
        'dateValue' => 'getDateValue',
        'domainValue1' => 'getDomainValue1',
        'domainValue2' => 'getDomainValue2',
        'domainValue3' => 'getDomainValue3',
        'domainValue4' => 'getDomainValue4',
        'domainValue5' => 'getDomainValue5',
        'numberValue1' => 'getNumberValue1',
        'numberValue2' => 'getNumberValue2',
        'numberValue3' => 'getNumberValue3',
        'numberValue4' => 'getNumberValue4',
        'quantity1' => 'getQuantity1',
        'quantity2' => 'getQuantity2',
        'quantity3' => 'getQuantity3',
        'quantity4' => 'getQuantity4',
        'subAdminId' => 'getSubAdminId',
        'customProperties' => 'getCustomProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amountCur'] = isset($data['amountCur']) ? $data['amountCur'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['dateValue'] = isset($data['dateValue']) ? $data['dateValue'] : null;
        $this->container['domainValue1'] = isset($data['domainValue1']) ? $data['domainValue1'] : null;
        $this->container['domainValue2'] = isset($data['domainValue2']) ? $data['domainValue2'] : null;
        $this->container['domainValue3'] = isset($data['domainValue3']) ? $data['domainValue3'] : null;
        $this->container['domainValue4'] = isset($data['domainValue4']) ? $data['domainValue4'] : null;
        $this->container['domainValue5'] = isset($data['domainValue5']) ? $data['domainValue5'] : null;
        $this->container['numberValue1'] = isset($data['numberValue1']) ? $data['numberValue1'] : null;
        $this->container['numberValue2'] = isset($data['numberValue2']) ? $data['numberValue2'] : null;
        $this->container['numberValue3'] = isset($data['numberValue3']) ? $data['numberValue3'] : null;
        $this->container['numberValue4'] = isset($data['numberValue4']) ? $data['numberValue4'] : null;
        $this->container['quantity1'] = isset($data['quantity1']) ? $data['quantity1'] : null;
        $this->container['quantity2'] = isset($data['quantity2']) ? $data['quantity2'] : null;
        $this->container['quantity3'] = isset($data['quantity3']) ? $data['quantity3'] : null;
        $this->container['quantity4'] = isset($data['quantity4']) ? $data['quantity4'] : null;
        $this->container['subAdminId'] = isset($data['subAdminId']) ? $data['subAdminId'] : null;
        $this->container['customProperties'] = isset($data['customProperties']) ? $data['customProperties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountCur
     *
     * @return float|null
     */
    public function getAmountCur()
    {
        return $this->container['amountCur'];
    }

    /**
     * Sets amountCur
     *
     * @param float|null $amountCur amountCur
     *
     * @return $this
     */
    public function setAmountCur($amountCur)
    {
        $this->container['amountCur'] = $amountCur;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets dateValue
     *
     * @return string|null
     */
    public function getDateValue()
    {
        return $this->container['dateValue'];
    }

    /**
     * Sets dateValue
     *
     * @param string|null $dateValue dateValue
     *
     * @return $this
     */
    public function setDateValue($dateValue)
    {
        $this->container['dateValue'] = $dateValue;

        return $this;
    }

    /**
     * Gets domainValue1
     *
     * @return string|null
     */
    public function getDomainValue1()
    {
        return $this->container['domainValue1'];
    }

    /**
     * Sets domainValue1
     *
     * @param string|null $domainValue1 domainValue1
     *
     * @return $this
     */
    public function setDomainValue1($domainValue1)
    {
        $this->container['domainValue1'] = $domainValue1;

        return $this;
    }

    /**
     * Gets domainValue2
     *
     * @return string|null
     */
    public function getDomainValue2()
    {
        return $this->container['domainValue2'];
    }

    /**
     * Sets domainValue2
     *
     * @param string|null $domainValue2 domainValue2
     *
     * @return $this
     */
    public function setDomainValue2($domainValue2)
    {
        $this->container['domainValue2'] = $domainValue2;

        return $this;
    }

    /**
     * Gets domainValue3
     *
     * @return string|null
     */
    public function getDomainValue3()
    {
        return $this->container['domainValue3'];
    }

    /**
     * Sets domainValue3
     *
     * @param string|null $domainValue3 domainValue3
     *
     * @return $this
     */
    public function setDomainValue3($domainValue3)
    {
        $this->container['domainValue3'] = $domainValue3;

        return $this;
    }

    /**
     * Gets domainValue4
     *
     * @return string|null
     */
    public function getDomainValue4()
    {
        return $this->container['domainValue4'];
    }

    /**
     * Sets domainValue4
     *
     * @param string|null $domainValue4 domainValue4
     *
     * @return $this
     */
    public function setDomainValue4($domainValue4)
    {
        $this->container['domainValue4'] = $domainValue4;

        return $this;
    }

    /**
     * Gets domainValue5
     *
     * @return string|null
     */
    public function getDomainValue5()
    {
        return $this->container['domainValue5'];
    }

    /**
     * Sets domainValue5
     *
     * @param string|null $domainValue5 domainValue5
     *
     * @return $this
     */
    public function setDomainValue5($domainValue5)
    {
        $this->container['domainValue5'] = $domainValue5;

        return $this;
    }

    /**
     * Gets numberValue1
     *
     * @return float|null
     */
    public function getNumberValue1()
    {
        return $this->container['numberValue1'];
    }

    /**
     * Sets numberValue1
     *
     * @param float|null $numberValue1 numberValue1
     *
     * @return $this
     */
    public function setNumberValue1($numberValue1)
    {
        $this->container['numberValue1'] = $numberValue1;

        return $this;
    }

    /**
     * Gets numberValue2
     *
     * @return float|null
     */
    public function getNumberValue2()
    {
        return $this->container['numberValue2'];
    }

    /**
     * Sets numberValue2
     *
     * @param float|null $numberValue2 numberValue2
     *
     * @return $this
     */
    public function setNumberValue2($numberValue2)
    {
        $this->container['numberValue2'] = $numberValue2;

        return $this;
    }

    /**
     * Gets numberValue3
     *
     * @return float|null
     */
    public function getNumberValue3()
    {
        return $this->container['numberValue3'];
    }

    /**
     * Sets numberValue3
     *
     * @param float|null $numberValue3 numberValue3
     *
     * @return $this
     */
    public function setNumberValue3($numberValue3)
    {
        $this->container['numberValue3'] = $numberValue3;

        return $this;
    }

    /**
     * Gets numberValue4
     *
     * @return float|null
     */
    public function getNumberValue4()
    {
        return $this->container['numberValue4'];
    }

    /**
     * Sets numberValue4
     *
     * @param float|null $numberValue4 numberValue4
     *
     * @return $this
     */
    public function setNumberValue4($numberValue4)
    {
        $this->container['numberValue4'] = $numberValue4;

        return $this;
    }

    /**
     * Gets quantity1
     *
     * @return float|null
     */
    public function getQuantity1()
    {
        return $this->container['quantity1'];
    }

    /**
     * Sets quantity1
     *
     * @param float|null $quantity1 quantity1
     *
     * @return $this
     */
    public function setQuantity1($quantity1)
    {
        $this->container['quantity1'] = $quantity1;

        return $this;
    }

    /**
     * Gets quantity2
     *
     * @return float|null
     */
    public function getQuantity2()
    {
        return $this->container['quantity2'];
    }

    /**
     * Sets quantity2
     *
     * @param float|null $quantity2 quantity2
     *
     * @return $this
     */
    public function setQuantity2($quantity2)
    {
        $this->container['quantity2'] = $quantity2;

        return $this;
    }

    /**
     * Gets quantity3
     *
     * @return float|null
     */
    public function getQuantity3()
    {
        return $this->container['quantity3'];
    }

    /**
     * Sets quantity3
     *
     * @param float|null $quantity3 quantity3
     *
     * @return $this
     */
    public function setQuantity3($quantity3)
    {
        $this->container['quantity3'] = $quantity3;

        return $this;
    }

    /**
     * Gets quantity4
     *
     * @return float|null
     */
    public function getQuantity4()
    {
        return $this->container['quantity4'];
    }

    /**
     * Sets quantity4
     *
     * @param float|null $quantity4 quantity4
     *
     * @return $this
     */
    public function setQuantity4($quantity4)
    {
        $this->container['quantity4'] = $quantity4;

        return $this;
    }

    /**
     * Gets subAdminId
     *
     * @return string|null
     */
    public function getSubAdminId()
    {
        return $this->container['subAdminId'];
    }

    /**
     * Sets subAdminId
     *
     * @param string|null $subAdminId subAdminId
     *
     * @return $this
     */
    public function setSubAdminId($subAdminId)
    {
        $this->container['subAdminId'] = $subAdminId;

        return $this;
    }

    /**
     * Gets customProperties
     *
     * @return object|null
     */
    public function getCustomProperties()
    {
        return $this->container['customProperties'];
    }

    /**
     * Sets customProperties
     *
     * @param object|null $customProperties customProperties
     *
     * @return $this
     */
    public function setCustomProperties($customProperties)
    {
        $this->container['customProperties'] = $customProperties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


