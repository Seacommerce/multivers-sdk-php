<?php
/**
 * CustomerInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * CustomerInvoice Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountManager' => 'string',
        'accountManagerId' => 'string',
        'amountCreditSqueeze' => 'float',
        'amountCreditSqueezeCur' => 'float',
        'amountRebate' => 'float',
        'amountRebateCur' => 'float',
        'amountTotal' => 'float',
        'amountTotalCur' => 'float',
        'bordereauxNumber' => 'string',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'contactPerson' => 'string',
        'contactPersonId' => 'string',
        'currencyId' => 'string',
        'customerId' => 'string',
        'customerInvoiceLines' => '\Seacommerce\Unit4\Multivers\Sdk\Model\CustomerInvoiceLine[]',
        'documentLink' => '\Seacommerce\Unit4\Multivers\Sdk\Model\DocumentLink',
        'documentNumber' => 'int',
        'dunForPayment' => 'bool',
        'exchangeRate' => 'float',
        'fiscalYear' => 'int',
        'invoiceDate' => 'string',
        'invoiceExpirationDate' => 'string',
        'invoiceId' => 'string',
        'journalId' => 'string',
        'journalSection' => 'string',
        'journalTransaction' => 'int',
        'kvcPaymentCondition' => 'bool',
        'mandateId' => 'string',
        'numberOfReminders' => 'int',
        'openingBalance' => 'bool',
        'orderId' => 'string',
        'paymentConditionId' => 'string',
        'paymentReference' => 'string',
        'periodNumber' => 'int',
        'processedBy' => 'string',
        'processedById' => 'string',
        'rebateExpirationDate' => 'string',
        'reference' => 'string',
        'systemInvoice' => 'bool',
        'totalAmountVatExcl' => 'float',
        'totalAmountVatExclCur' => 'float',
        'vatAdjusted' => 'bool',
        'vatAmount' => 'float',
        'vatAmountCur' => 'float',
        'vatOnInvoice' => 'bool',
        'vatScenarioId' => 'int',
        'vatTransactionLines' => '\Seacommerce\Unit4\Multivers\Sdk\Model\VatTransactionLine[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountManager' => null,
        'accountManagerId' => null,
        'amountCreditSqueeze' => null,
        'amountCreditSqueezeCur' => null,
        'amountRebate' => null,
        'amountRebateCur' => null,
        'amountTotal' => null,
        'amountTotalCur' => null,
        'bordereauxNumber' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'contactPerson' => null,
        'contactPersonId' => null,
        'currencyId' => null,
        'customerId' => null,
        'customerInvoiceLines' => null,
        'documentLink' => null,
        'documentNumber' => 'int32',
        'dunForPayment' => null,
        'exchangeRate' => null,
        'fiscalYear' => 'int32',
        'invoiceDate' => null,
        'invoiceExpirationDate' => null,
        'invoiceId' => null,
        'journalId' => null,
        'journalSection' => null,
        'journalTransaction' => 'int32',
        'kvcPaymentCondition' => null,
        'mandateId' => null,
        'numberOfReminders' => 'int32',
        'openingBalance' => null,
        'orderId' => null,
        'paymentConditionId' => null,
        'paymentReference' => null,
        'periodNumber' => 'int32',
        'processedBy' => null,
        'processedById' => null,
        'rebateExpirationDate' => null,
        'reference' => null,
        'systemInvoice' => null,
        'totalAmountVatExcl' => null,
        'totalAmountVatExclCur' => null,
        'vatAdjusted' => null,
        'vatAmount' => null,
        'vatAmountCur' => null,
        'vatOnInvoice' => null,
        'vatScenarioId' => null,
        'vatTransactionLines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountManager' => 'accountManager',
        'accountManagerId' => 'accountManagerId',
        'amountCreditSqueeze' => 'amountCreditSqueeze',
        'amountCreditSqueezeCur' => 'amountCreditSqueezeCur',
        'amountRebate' => 'amountRebate',
        'amountRebateCur' => 'amountRebateCur',
        'amountTotal' => 'amountTotal',
        'amountTotalCur' => 'amountTotalCur',
        'bordereauxNumber' => 'bordereauxNumber',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'contactPerson' => 'contactPerson',
        'contactPersonId' => 'contactPersonId',
        'currencyId' => 'currencyId',
        'customerId' => 'customerId',
        'customerInvoiceLines' => 'customerInvoiceLines',
        'documentLink' => 'documentLink',
        'documentNumber' => 'documentNumber',
        'dunForPayment' => 'dunForPayment',
        'exchangeRate' => 'exchangeRate',
        'fiscalYear' => 'fiscalYear',
        'invoiceDate' => 'invoiceDate',
        'invoiceExpirationDate' => 'invoiceExpirationDate',
        'invoiceId' => 'invoiceId',
        'journalId' => 'journalId',
        'journalSection' => 'journalSection',
        'journalTransaction' => 'journalTransaction',
        'kvcPaymentCondition' => 'kvcPaymentCondition',
        'mandateId' => 'mandateId',
        'numberOfReminders' => 'numberOfReminders',
        'openingBalance' => 'openingBalance',
        'orderId' => 'orderId',
        'paymentConditionId' => 'paymentConditionId',
        'paymentReference' => 'paymentReference',
        'periodNumber' => 'periodNumber',
        'processedBy' => 'processedBy',
        'processedById' => 'processedById',
        'rebateExpirationDate' => 'rebateExpirationDate',
        'reference' => 'reference',
        'systemInvoice' => 'systemInvoice',
        'totalAmountVatExcl' => 'totalAmountVatExcl',
        'totalAmountVatExclCur' => 'totalAmountVatExclCur',
        'vatAdjusted' => 'vatAdjusted',
        'vatAmount' => 'vatAmount',
        'vatAmountCur' => 'vatAmountCur',
        'vatOnInvoice' => 'vatOnInvoice',
        'vatScenarioId' => 'vatScenarioId',
        'vatTransactionLines' => 'vatTransactionLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountManager' => 'setAccountManager',
        'accountManagerId' => 'setAccountManagerId',
        'amountCreditSqueeze' => 'setAmountCreditSqueeze',
        'amountCreditSqueezeCur' => 'setAmountCreditSqueezeCur',
        'amountRebate' => 'setAmountRebate',
        'amountRebateCur' => 'setAmountRebateCur',
        'amountTotal' => 'setAmountTotal',
        'amountTotalCur' => 'setAmountTotalCur',
        'bordereauxNumber' => 'setBordereauxNumber',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'contactPerson' => 'setContactPerson',
        'contactPersonId' => 'setContactPersonId',
        'currencyId' => 'setCurrencyId',
        'customerId' => 'setCustomerId',
        'customerInvoiceLines' => 'setCustomerInvoiceLines',
        'documentLink' => 'setDocumentLink',
        'documentNumber' => 'setDocumentNumber',
        'dunForPayment' => 'setDunForPayment',
        'exchangeRate' => 'setExchangeRate',
        'fiscalYear' => 'setFiscalYear',
        'invoiceDate' => 'setInvoiceDate',
        'invoiceExpirationDate' => 'setInvoiceExpirationDate',
        'invoiceId' => 'setInvoiceId',
        'journalId' => 'setJournalId',
        'journalSection' => 'setJournalSection',
        'journalTransaction' => 'setJournalTransaction',
        'kvcPaymentCondition' => 'setKvcPaymentCondition',
        'mandateId' => 'setMandateId',
        'numberOfReminders' => 'setNumberOfReminders',
        'openingBalance' => 'setOpeningBalance',
        'orderId' => 'setOrderId',
        'paymentConditionId' => 'setPaymentConditionId',
        'paymentReference' => 'setPaymentReference',
        'periodNumber' => 'setPeriodNumber',
        'processedBy' => 'setProcessedBy',
        'processedById' => 'setProcessedById',
        'rebateExpirationDate' => 'setRebateExpirationDate',
        'reference' => 'setReference',
        'systemInvoice' => 'setSystemInvoice',
        'totalAmountVatExcl' => 'setTotalAmountVatExcl',
        'totalAmountVatExclCur' => 'setTotalAmountVatExclCur',
        'vatAdjusted' => 'setVatAdjusted',
        'vatAmount' => 'setVatAmount',
        'vatAmountCur' => 'setVatAmountCur',
        'vatOnInvoice' => 'setVatOnInvoice',
        'vatScenarioId' => 'setVatScenarioId',
        'vatTransactionLines' => 'setVatTransactionLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountManager' => 'getAccountManager',
        'accountManagerId' => 'getAccountManagerId',
        'amountCreditSqueeze' => 'getAmountCreditSqueeze',
        'amountCreditSqueezeCur' => 'getAmountCreditSqueezeCur',
        'amountRebate' => 'getAmountRebate',
        'amountRebateCur' => 'getAmountRebateCur',
        'amountTotal' => 'getAmountTotal',
        'amountTotalCur' => 'getAmountTotalCur',
        'bordereauxNumber' => 'getBordereauxNumber',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'contactPerson' => 'getContactPerson',
        'contactPersonId' => 'getContactPersonId',
        'currencyId' => 'getCurrencyId',
        'customerId' => 'getCustomerId',
        'customerInvoiceLines' => 'getCustomerInvoiceLines',
        'documentLink' => 'getDocumentLink',
        'documentNumber' => 'getDocumentNumber',
        'dunForPayment' => 'getDunForPayment',
        'exchangeRate' => 'getExchangeRate',
        'fiscalYear' => 'getFiscalYear',
        'invoiceDate' => 'getInvoiceDate',
        'invoiceExpirationDate' => 'getInvoiceExpirationDate',
        'invoiceId' => 'getInvoiceId',
        'journalId' => 'getJournalId',
        'journalSection' => 'getJournalSection',
        'journalTransaction' => 'getJournalTransaction',
        'kvcPaymentCondition' => 'getKvcPaymentCondition',
        'mandateId' => 'getMandateId',
        'numberOfReminders' => 'getNumberOfReminders',
        'openingBalance' => 'getOpeningBalance',
        'orderId' => 'getOrderId',
        'paymentConditionId' => 'getPaymentConditionId',
        'paymentReference' => 'getPaymentReference',
        'periodNumber' => 'getPeriodNumber',
        'processedBy' => 'getProcessedBy',
        'processedById' => 'getProcessedById',
        'rebateExpirationDate' => 'getRebateExpirationDate',
        'reference' => 'getReference',
        'systemInvoice' => 'getSystemInvoice',
        'totalAmountVatExcl' => 'getTotalAmountVatExcl',
        'totalAmountVatExclCur' => 'getTotalAmountVatExclCur',
        'vatAdjusted' => 'getVatAdjusted',
        'vatAmount' => 'getVatAmount',
        'vatAmountCur' => 'getVatAmountCur',
        'vatOnInvoice' => 'getVatOnInvoice',
        'vatScenarioId' => 'getVatScenarioId',
        'vatTransactionLines' => 'getVatTransactionLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountManager'] = isset($data['accountManager']) ? $data['accountManager'] : null;
        $this->container['accountManagerId'] = isset($data['accountManagerId']) ? $data['accountManagerId'] : null;
        $this->container['amountCreditSqueeze'] = isset($data['amountCreditSqueeze']) ? $data['amountCreditSqueeze'] : null;
        $this->container['amountCreditSqueezeCur'] = isset($data['amountCreditSqueezeCur']) ? $data['amountCreditSqueezeCur'] : null;
        $this->container['amountRebate'] = isset($data['amountRebate']) ? $data['amountRebate'] : null;
        $this->container['amountRebateCur'] = isset($data['amountRebateCur']) ? $data['amountRebateCur'] : null;
        $this->container['amountTotal'] = isset($data['amountTotal']) ? $data['amountTotal'] : null;
        $this->container['amountTotalCur'] = isset($data['amountTotalCur']) ? $data['amountTotalCur'] : null;
        $this->container['bordereauxNumber'] = isset($data['bordereauxNumber']) ? $data['bordereauxNumber'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['contactPerson'] = isset($data['contactPerson']) ? $data['contactPerson'] : null;
        $this->container['contactPersonId'] = isset($data['contactPersonId']) ? $data['contactPersonId'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['customerInvoiceLines'] = isset($data['customerInvoiceLines']) ? $data['customerInvoiceLines'] : null;
        $this->container['documentLink'] = isset($data['documentLink']) ? $data['documentLink'] : null;
        $this->container['documentNumber'] = isset($data['documentNumber']) ? $data['documentNumber'] : null;
        $this->container['dunForPayment'] = isset($data['dunForPayment']) ? $data['dunForPayment'] : null;
        $this->container['exchangeRate'] = isset($data['exchangeRate']) ? $data['exchangeRate'] : null;
        $this->container['fiscalYear'] = isset($data['fiscalYear']) ? $data['fiscalYear'] : null;
        $this->container['invoiceDate'] = isset($data['invoiceDate']) ? $data['invoiceDate'] : null;
        $this->container['invoiceExpirationDate'] = isset($data['invoiceExpirationDate']) ? $data['invoiceExpirationDate'] : null;
        $this->container['invoiceId'] = isset($data['invoiceId']) ? $data['invoiceId'] : null;
        $this->container['journalId'] = isset($data['journalId']) ? $data['journalId'] : null;
        $this->container['journalSection'] = isset($data['journalSection']) ? $data['journalSection'] : null;
        $this->container['journalTransaction'] = isset($data['journalTransaction']) ? $data['journalTransaction'] : null;
        $this->container['kvcPaymentCondition'] = isset($data['kvcPaymentCondition']) ? $data['kvcPaymentCondition'] : null;
        $this->container['mandateId'] = isset($data['mandateId']) ? $data['mandateId'] : null;
        $this->container['numberOfReminders'] = isset($data['numberOfReminders']) ? $data['numberOfReminders'] : null;
        $this->container['openingBalance'] = isset($data['openingBalance']) ? $data['openingBalance'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['paymentConditionId'] = isset($data['paymentConditionId']) ? $data['paymentConditionId'] : null;
        $this->container['paymentReference'] = isset($data['paymentReference']) ? $data['paymentReference'] : null;
        $this->container['periodNumber'] = isset($data['periodNumber']) ? $data['periodNumber'] : null;
        $this->container['processedBy'] = isset($data['processedBy']) ? $data['processedBy'] : null;
        $this->container['processedById'] = isset($data['processedById']) ? $data['processedById'] : null;
        $this->container['rebateExpirationDate'] = isset($data['rebateExpirationDate']) ? $data['rebateExpirationDate'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['systemInvoice'] = isset($data['systemInvoice']) ? $data['systemInvoice'] : null;
        $this->container['totalAmountVatExcl'] = isset($data['totalAmountVatExcl']) ? $data['totalAmountVatExcl'] : null;
        $this->container['totalAmountVatExclCur'] = isset($data['totalAmountVatExclCur']) ? $data['totalAmountVatExclCur'] : null;
        $this->container['vatAdjusted'] = isset($data['vatAdjusted']) ? $data['vatAdjusted'] : null;
        $this->container['vatAmount'] = isset($data['vatAmount']) ? $data['vatAmount'] : null;
        $this->container['vatAmountCur'] = isset($data['vatAmountCur']) ? $data['vatAmountCur'] : null;
        $this->container['vatOnInvoice'] = isset($data['vatOnInvoice']) ? $data['vatOnInvoice'] : null;
        $this->container['vatScenarioId'] = isset($data['vatScenarioId']) ? $data['vatScenarioId'] : null;
        $this->container['vatTransactionLines'] = isset($data['vatTransactionLines']) ? $data['vatTransactionLines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accountManager']) && (mb_strlen($this->container['accountManager']) > 55)) {
            $invalidProperties[] = "invalid value for 'accountManager', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['accountManagerId']) && (mb_strlen($this->container['accountManagerId']) > 8)) {
            $invalidProperties[] = "invalid value for 'accountManagerId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['contactPerson']) && (mb_strlen($this->container['contactPerson']) > 55)) {
            $invalidProperties[] = "invalid value for 'contactPerson', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['contactPersonId']) && (mb_strlen($this->container['contactPersonId']) > 8)) {
            $invalidProperties[] = "invalid value for 'contactPersonId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['currencyId']) && (mb_strlen($this->container['currencyId']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyId', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['customerId'] === null) {
            $invalidProperties[] = "'customerId' can't be null";
        }
        if ((mb_strlen($this->container['customerId']) > 8)) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['fiscalYear'] === null) {
            $invalidProperties[] = "'fiscalYear' can't be null";
        }
        if ($this->container['invoiceDate'] === null) {
            $invalidProperties[] = "'invoiceDate' can't be null";
        }
        if (!is_null($this->container['invoiceId']) && (mb_strlen($this->container['invoiceId']) > 8)) {
            $invalidProperties[] = "invalid value for 'invoiceId', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['journalId'] === null) {
            $invalidProperties[] = "'journalId' can't be null";
        }
        if ((mb_strlen($this->container['journalId']) > 3)) {
            $invalidProperties[] = "invalid value for 'journalId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['journalSection']) && (mb_strlen($this->container['journalSection']) > 4)) {
            $invalidProperties[] = "invalid value for 'journalSection', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['journalTransaction'] === null) {
            $invalidProperties[] = "'journalTransaction' can't be null";
        }
        if (($this->container['journalTransaction'] > 9999)) {
            $invalidProperties[] = "invalid value for 'journalTransaction', must be smaller than or equal to 9999.";
        }

        if (($this->container['journalTransaction'] < 0)) {
            $invalidProperties[] = "invalid value for 'journalTransaction', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mandateId']) && (mb_strlen($this->container['mandateId']) > 12)) {
            $invalidProperties[] = "invalid value for 'mandateId', the character length must be smaller than or equal to 12.";
        }

        if ($this->container['paymentConditionId'] === null) {
            $invalidProperties[] = "'paymentConditionId' can't be null";
        }
        if ((mb_strlen($this->container['paymentConditionId']) > 3)) {
            $invalidProperties[] = "invalid value for 'paymentConditionId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['paymentReference']) && (mb_strlen($this->container['paymentReference']) > 16)) {
            $invalidProperties[] = "invalid value for 'paymentReference', the character length must be smaller than or equal to 16.";
        }

        if ($this->container['periodNumber'] === null) {
            $invalidProperties[] = "'periodNumber' can't be null";
        }
        if (!is_null($this->container['processedBy']) && (mb_strlen($this->container['processedBy']) > 55)) {
            $invalidProperties[] = "invalid value for 'processedBy', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['processedById']) && (mb_strlen($this->container['processedById']) > 8)) {
            $invalidProperties[] = "invalid value for 'processedById', the character length must be smaller than or equal to 8.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountManager
     *
     * @return string|null
     */
    public function getAccountManager()
    {
        return $this->container['accountManager'];
    }

    /**
     * Sets accountManager
     *
     * @param string|null $accountManager accountManager
     *
     * @return $this
     */
    public function setAccountManager($accountManager)
    {
        if (!is_null($accountManager) && (mb_strlen($accountManager) > 55)) {
            throw new \InvalidArgumentException('invalid length for $accountManager when calling CustomerInvoice., must be smaller than or equal to 55.');
        }

        $this->container['accountManager'] = $accountManager;

        return $this;
    }

    /**
     * Gets accountManagerId
     *
     * @return string|null
     */
    public function getAccountManagerId()
    {
        return $this->container['accountManagerId'];
    }

    /**
     * Sets accountManagerId
     *
     * @param string|null $accountManagerId accountManagerId
     *
     * @return $this
     */
    public function setAccountManagerId($accountManagerId)
    {
        if (!is_null($accountManagerId) && (mb_strlen($accountManagerId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $accountManagerId when calling CustomerInvoice., must be smaller than or equal to 8.');
        }

        $this->container['accountManagerId'] = $accountManagerId;

        return $this;
    }

    /**
     * Gets amountCreditSqueeze
     *
     * @return float|null
     */
    public function getAmountCreditSqueeze()
    {
        return $this->container['amountCreditSqueeze'];
    }

    /**
     * Sets amountCreditSqueeze
     *
     * @param float|null $amountCreditSqueeze amountCreditSqueeze
     *
     * @return $this
     */
    public function setAmountCreditSqueeze($amountCreditSqueeze)
    {
        $this->container['amountCreditSqueeze'] = $amountCreditSqueeze;

        return $this;
    }

    /**
     * Gets amountCreditSqueezeCur
     *
     * @return float|null
     */
    public function getAmountCreditSqueezeCur()
    {
        return $this->container['amountCreditSqueezeCur'];
    }

    /**
     * Sets amountCreditSqueezeCur
     *
     * @param float|null $amountCreditSqueezeCur amountCreditSqueezeCur
     *
     * @return $this
     */
    public function setAmountCreditSqueezeCur($amountCreditSqueezeCur)
    {
        $this->container['amountCreditSqueezeCur'] = $amountCreditSqueezeCur;

        return $this;
    }

    /**
     * Gets amountRebate
     *
     * @return float|null
     */
    public function getAmountRebate()
    {
        return $this->container['amountRebate'];
    }

    /**
     * Sets amountRebate
     *
     * @param float|null $amountRebate amountRebate
     *
     * @return $this
     */
    public function setAmountRebate($amountRebate)
    {
        $this->container['amountRebate'] = $amountRebate;

        return $this;
    }

    /**
     * Gets amountRebateCur
     *
     * @return float|null
     */
    public function getAmountRebateCur()
    {
        return $this->container['amountRebateCur'];
    }

    /**
     * Sets amountRebateCur
     *
     * @param float|null $amountRebateCur amountRebateCur
     *
     * @return $this
     */
    public function setAmountRebateCur($amountRebateCur)
    {
        $this->container['amountRebateCur'] = $amountRebateCur;

        return $this;
    }

    /**
     * Gets amountTotal
     *
     * @return float|null
     */
    public function getAmountTotal()
    {
        return $this->container['amountTotal'];
    }

    /**
     * Sets amountTotal
     *
     * @param float|null $amountTotal amountTotal
     *
     * @return $this
     */
    public function setAmountTotal($amountTotal)
    {
        $this->container['amountTotal'] = $amountTotal;

        return $this;
    }

    /**
     * Gets amountTotalCur
     *
     * @return float|null
     */
    public function getAmountTotalCur()
    {
        return $this->container['amountTotalCur'];
    }

    /**
     * Sets amountTotalCur
     *
     * @param float|null $amountTotalCur amountTotalCur
     *
     * @return $this
     */
    public function setAmountTotalCur($amountTotalCur)
    {
        $this->container['amountTotalCur'] = $amountTotalCur;

        return $this;
    }

    /**
     * Gets bordereauxNumber
     *
     * @return string|null
     */
    public function getBordereauxNumber()
    {
        return $this->container['bordereauxNumber'];
    }

    /**
     * Sets bordereauxNumber
     *
     * @param string|null $bordereauxNumber bordereauxNumber
     *
     * @return $this
     */
    public function setBordereauxNumber($bordereauxNumber)
    {
        $this->container['bordereauxNumber'] = $bordereauxNumber;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets contactPerson
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contactPerson'];
    }

    /**
     * Sets contactPerson
     *
     * @param string|null $contactPerson contactPerson
     *
     * @return $this
     */
    public function setContactPerson($contactPerson)
    {
        if (!is_null($contactPerson) && (mb_strlen($contactPerson) > 55)) {
            throw new \InvalidArgumentException('invalid length for $contactPerson when calling CustomerInvoice., must be smaller than or equal to 55.');
        }

        $this->container['contactPerson'] = $contactPerson;

        return $this;
    }

    /**
     * Gets contactPersonId
     *
     * @return string|null
     */
    public function getContactPersonId()
    {
        return $this->container['contactPersonId'];
    }

    /**
     * Sets contactPersonId
     *
     * @param string|null $contactPersonId contactPersonId
     *
     * @return $this
     */
    public function setContactPersonId($contactPersonId)
    {
        if (!is_null($contactPersonId) && (mb_strlen($contactPersonId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $contactPersonId when calling CustomerInvoice., must be smaller than or equal to 8.');
        }

        $this->container['contactPersonId'] = $contactPersonId;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        if (!is_null($currencyId) && (mb_strlen($currencyId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyId when calling CustomerInvoice., must be smaller than or equal to 3.');
        }

        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string $customerId customerId
     *
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        if ((mb_strlen($customerId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling CustomerInvoice., must be smaller than or equal to 8.');
        }

        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerInvoiceLines
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\CustomerInvoiceLine[]|null
     */
    public function getCustomerInvoiceLines()
    {
        return $this->container['customerInvoiceLines'];
    }

    /**
     * Sets customerInvoiceLines
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\CustomerInvoiceLine[]|null $customerInvoiceLines customerInvoiceLines
     *
     * @return $this
     */
    public function setCustomerInvoiceLines($customerInvoiceLines)
    {
        $this->container['customerInvoiceLines'] = $customerInvoiceLines;

        return $this;
    }

    /**
     * Gets documentLink
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\DocumentLink|null
     */
    public function getDocumentLink()
    {
        return $this->container['documentLink'];
    }

    /**
     * Sets documentLink
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\DocumentLink|null $documentLink documentLink
     *
     * @return $this
     */
    public function setDocumentLink($documentLink)
    {
        $this->container['documentLink'] = $documentLink;

        return $this;
    }

    /**
     * Gets documentNumber
     *
     * @return int|null
     */
    public function getDocumentNumber()
    {
        return $this->container['documentNumber'];
    }

    /**
     * Sets documentNumber
     *
     * @param int|null $documentNumber documentNumber
     *
     * @return $this
     */
    public function setDocumentNumber($documentNumber)
    {
        $this->container['documentNumber'] = $documentNumber;

        return $this;
    }

    /**
     * Gets dunForPayment
     *
     * @return bool|null
     */
    public function getDunForPayment()
    {
        return $this->container['dunForPayment'];
    }

    /**
     * Sets dunForPayment
     *
     * @param bool|null $dunForPayment dunForPayment
     *
     * @return $this
     */
    public function setDunForPayment($dunForPayment)
    {
        $this->container['dunForPayment'] = $dunForPayment;

        return $this;
    }

    /**
     * Gets exchangeRate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchangeRate'];
    }

    /**
     * Sets exchangeRate
     *
     * @param float|null $exchangeRate exchangeRate
     *
     * @return $this
     */
    public function setExchangeRate($exchangeRate)
    {
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Gets fiscalYear
     *
     * @return int
     */
    public function getFiscalYear()
    {
        return $this->container['fiscalYear'];
    }

    /**
     * Sets fiscalYear
     *
     * @param int $fiscalYear fiscalYear
     *
     * @return $this
     */
    public function setFiscalYear($fiscalYear)
    {
        $this->container['fiscalYear'] = $fiscalYear;

        return $this;
    }

    /**
     * Gets invoiceDate
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoiceDate'];
    }

    /**
     * Sets invoiceDate
     *
     * @param string $invoiceDate invoiceDate
     *
     * @return $this
     */
    public function setInvoiceDate($invoiceDate)
    {
        $this->container['invoiceDate'] = $invoiceDate;

        return $this;
    }

    /**
     * Gets invoiceExpirationDate
     *
     * @return string|null
     */
    public function getInvoiceExpirationDate()
    {
        return $this->container['invoiceExpirationDate'];
    }

    /**
     * Sets invoiceExpirationDate
     *
     * @param string|null $invoiceExpirationDate invoiceExpirationDate
     *
     * @return $this
     */
    public function setInvoiceExpirationDate($invoiceExpirationDate)
    {
        $this->container['invoiceExpirationDate'] = $invoiceExpirationDate;

        return $this;
    }

    /**
     * Gets invoiceId
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoiceId'];
    }

    /**
     * Sets invoiceId
     *
     * @param string|null $invoiceId invoiceId
     *
     * @return $this
     */
    public function setInvoiceId($invoiceId)
    {
        if (!is_null($invoiceId) && (mb_strlen($invoiceId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $invoiceId when calling CustomerInvoice., must be smaller than or equal to 8.');
        }

        $this->container['invoiceId'] = $invoiceId;

        return $this;
    }

    /**
     * Gets journalId
     *
     * @return string
     */
    public function getJournalId()
    {
        return $this->container['journalId'];
    }

    /**
     * Sets journalId
     *
     * @param string $journalId journalId
     *
     * @return $this
     */
    public function setJournalId($journalId)
    {
        if ((mb_strlen($journalId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $journalId when calling CustomerInvoice., must be smaller than or equal to 3.');
        }

        $this->container['journalId'] = $journalId;

        return $this;
    }

    /**
     * Gets journalSection
     *
     * @return string|null
     */
    public function getJournalSection()
    {
        return $this->container['journalSection'];
    }

    /**
     * Sets journalSection
     *
     * @param string|null $journalSection journalSection
     *
     * @return $this
     */
    public function setJournalSection($journalSection)
    {
        if (!is_null($journalSection) && (mb_strlen($journalSection) > 4)) {
            throw new \InvalidArgumentException('invalid length for $journalSection when calling CustomerInvoice., must be smaller than or equal to 4.');
        }

        $this->container['journalSection'] = $journalSection;

        return $this;
    }

    /**
     * Gets journalTransaction
     *
     * @return int
     */
    public function getJournalTransaction()
    {
        return $this->container['journalTransaction'];
    }

    /**
     * Sets journalTransaction
     *
     * @param int $journalTransaction journalTransaction
     *
     * @return $this
     */
    public function setJournalTransaction($journalTransaction)
    {

        if (($journalTransaction > 9999)) {
            throw new \InvalidArgumentException('invalid value for $journalTransaction when calling CustomerInvoice., must be smaller than or equal to 9999.');
        }
        if (($journalTransaction < 0)) {
            throw new \InvalidArgumentException('invalid value for $journalTransaction when calling CustomerInvoice., must be bigger than or equal to 0.');
        }

        $this->container['journalTransaction'] = $journalTransaction;

        return $this;
    }

    /**
     * Gets kvcPaymentCondition
     *
     * @return bool|null
     */
    public function getKvcPaymentCondition()
    {
        return $this->container['kvcPaymentCondition'];
    }

    /**
     * Sets kvcPaymentCondition
     *
     * @param bool|null $kvcPaymentCondition kvcPaymentCondition
     *
     * @return $this
     */
    public function setKvcPaymentCondition($kvcPaymentCondition)
    {
        $this->container['kvcPaymentCondition'] = $kvcPaymentCondition;

        return $this;
    }

    /**
     * Gets mandateId
     *
     * @return string|null
     */
    public function getMandateId()
    {
        return $this->container['mandateId'];
    }

    /**
     * Sets mandateId
     *
     * @param string|null $mandateId mandateId
     *
     * @return $this
     */
    public function setMandateId($mandateId)
    {
        if (!is_null($mandateId) && (mb_strlen($mandateId) > 12)) {
            throw new \InvalidArgumentException('invalid length for $mandateId when calling CustomerInvoice., must be smaller than or equal to 12.');
        }

        $this->container['mandateId'] = $mandateId;

        return $this;
    }

    /**
     * Gets numberOfReminders
     *
     * @return int|null
     */
    public function getNumberOfReminders()
    {
        return $this->container['numberOfReminders'];
    }

    /**
     * Sets numberOfReminders
     *
     * @param int|null $numberOfReminders numberOfReminders
     *
     * @return $this
     */
    public function setNumberOfReminders($numberOfReminders)
    {
        $this->container['numberOfReminders'] = $numberOfReminders;

        return $this;
    }

    /**
     * Gets openingBalance
     *
     * @return bool|null
     */
    public function getOpeningBalance()
    {
        return $this->container['openingBalance'];
    }

    /**
     * Sets openingBalance
     *
     * @param bool|null $openingBalance openingBalance
     *
     * @return $this
     */
    public function setOpeningBalance($openingBalance)
    {
        $this->container['openingBalance'] = $openingBalance;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId orderId
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets paymentConditionId
     *
     * @return string
     */
    public function getPaymentConditionId()
    {
        return $this->container['paymentConditionId'];
    }

    /**
     * Sets paymentConditionId
     *
     * @param string $paymentConditionId paymentConditionId
     *
     * @return $this
     */
    public function setPaymentConditionId($paymentConditionId)
    {
        if ((mb_strlen($paymentConditionId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $paymentConditionId when calling CustomerInvoice., must be smaller than or equal to 3.');
        }

        $this->container['paymentConditionId'] = $paymentConditionId;

        return $this;
    }

    /**
     * Gets paymentReference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['paymentReference'];
    }

    /**
     * Sets paymentReference
     *
     * @param string|null $paymentReference paymentReference
     *
     * @return $this
     */
    public function setPaymentReference($paymentReference)
    {
        if (!is_null($paymentReference) && (mb_strlen($paymentReference) > 16)) {
            throw new \InvalidArgumentException('invalid length for $paymentReference when calling CustomerInvoice., must be smaller than or equal to 16.');
        }

        $this->container['paymentReference'] = $paymentReference;

        return $this;
    }

    /**
     * Gets periodNumber
     *
     * @return int
     */
    public function getPeriodNumber()
    {
        return $this->container['periodNumber'];
    }

    /**
     * Sets periodNumber
     *
     * @param int $periodNumber periodNumber
     *
     * @return $this
     */
    public function setPeriodNumber($periodNumber)
    {
        $this->container['periodNumber'] = $periodNumber;

        return $this;
    }

    /**
     * Gets processedBy
     *
     * @return string|null
     */
    public function getProcessedBy()
    {
        return $this->container['processedBy'];
    }

    /**
     * Sets processedBy
     *
     * @param string|null $processedBy processedBy
     *
     * @return $this
     */
    public function setProcessedBy($processedBy)
    {
        if (!is_null($processedBy) && (mb_strlen($processedBy) > 55)) {
            throw new \InvalidArgumentException('invalid length for $processedBy when calling CustomerInvoice., must be smaller than or equal to 55.');
        }

        $this->container['processedBy'] = $processedBy;

        return $this;
    }

    /**
     * Gets processedById
     *
     * @return string|null
     */
    public function getProcessedById()
    {
        return $this->container['processedById'];
    }

    /**
     * Sets processedById
     *
     * @param string|null $processedById processedById
     *
     * @return $this
     */
    public function setProcessedById($processedById)
    {
        if (!is_null($processedById) && (mb_strlen($processedById) > 8)) {
            throw new \InvalidArgumentException('invalid length for $processedById when calling CustomerInvoice., must be smaller than or equal to 8.');
        }

        $this->container['processedById'] = $processedById;

        return $this;
    }

    /**
     * Gets rebateExpirationDate
     *
     * @return string|null
     */
    public function getRebateExpirationDate()
    {
        return $this->container['rebateExpirationDate'];
    }

    /**
     * Sets rebateExpirationDate
     *
     * @param string|null $rebateExpirationDate rebateExpirationDate
     *
     * @return $this
     */
    public function setRebateExpirationDate($rebateExpirationDate)
    {
        $this->container['rebateExpirationDate'] = $rebateExpirationDate;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets systemInvoice
     *
     * @return bool|null
     */
    public function getSystemInvoice()
    {
        return $this->container['systemInvoice'];
    }

    /**
     * Sets systemInvoice
     *
     * @param bool|null $systemInvoice systemInvoice
     *
     * @return $this
     */
    public function setSystemInvoice($systemInvoice)
    {
        $this->container['systemInvoice'] = $systemInvoice;

        return $this;
    }

    /**
     * Gets totalAmountVatExcl
     *
     * @return float|null
     */
    public function getTotalAmountVatExcl()
    {
        return $this->container['totalAmountVatExcl'];
    }

    /**
     * Sets totalAmountVatExcl
     *
     * @param float|null $totalAmountVatExcl totalAmountVatExcl
     *
     * @return $this
     */
    public function setTotalAmountVatExcl($totalAmountVatExcl)
    {
        $this->container['totalAmountVatExcl'] = $totalAmountVatExcl;

        return $this;
    }

    /**
     * Gets totalAmountVatExclCur
     *
     * @return float|null
     */
    public function getTotalAmountVatExclCur()
    {
        return $this->container['totalAmountVatExclCur'];
    }

    /**
     * Sets totalAmountVatExclCur
     *
     * @param float|null $totalAmountVatExclCur totalAmountVatExclCur
     *
     * @return $this
     */
    public function setTotalAmountVatExclCur($totalAmountVatExclCur)
    {
        $this->container['totalAmountVatExclCur'] = $totalAmountVatExclCur;

        return $this;
    }

    /**
     * Gets vatAdjusted
     *
     * @return bool|null
     */
    public function getVatAdjusted()
    {
        return $this->container['vatAdjusted'];
    }

    /**
     * Sets vatAdjusted
     *
     * @param bool|null $vatAdjusted vatAdjusted
     *
     * @return $this
     */
    public function setVatAdjusted($vatAdjusted)
    {
        $this->container['vatAdjusted'] = $vatAdjusted;

        return $this;
    }

    /**
     * Gets vatAmount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vatAmount'];
    }

    /**
     * Sets vatAmount
     *
     * @param float|null $vatAmount vatAmount
     *
     * @return $this
     */
    public function setVatAmount($vatAmount)
    {
        $this->container['vatAmount'] = $vatAmount;

        return $this;
    }

    /**
     * Gets vatAmountCur
     *
     * @return float|null
     */
    public function getVatAmountCur()
    {
        return $this->container['vatAmountCur'];
    }

    /**
     * Sets vatAmountCur
     *
     * @param float|null $vatAmountCur vatAmountCur
     *
     * @return $this
     */
    public function setVatAmountCur($vatAmountCur)
    {
        $this->container['vatAmountCur'] = $vatAmountCur;

        return $this;
    }

    /**
     * Gets vatOnInvoice
     *
     * @return bool|null
     */
    public function getVatOnInvoice()
    {
        return $this->container['vatOnInvoice'];
    }

    /**
     * Sets vatOnInvoice
     *
     * @param bool|null $vatOnInvoice vatOnInvoice
     *
     * @return $this
     */
    public function setVatOnInvoice($vatOnInvoice)
    {
        $this->container['vatOnInvoice'] = $vatOnInvoice;

        return $this;
    }

    /**
     * Gets vatScenarioId
     *
     * @return int|null
     */
    public function getVatScenarioId()
    {
        return $this->container['vatScenarioId'];
    }

    /**
     * Sets vatScenarioId
     *
     * @param int|null $vatScenarioId vatScenarioId
     *
     * @return $this
     */
    public function setVatScenarioId($vatScenarioId)
    {
        $this->container['vatScenarioId'] = $vatScenarioId;

        return $this;
    }

    /**
     * Gets vatTransactionLines
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\VatTransactionLine[]|null
     */
    public function getVatTransactionLines()
    {
        return $this->container['vatTransactionLines'];
    }

    /**
     * Sets vatTransactionLines
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\VatTransactionLine[]|null $vatTransactionLines vatTransactionLines
     *
     * @return $this
     */
    public function setVatTransactionLines($vatTransactionLines)
    {
        $this->container['vatTransactionLines'] = $vatTransactionLines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


