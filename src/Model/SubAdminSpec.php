<?php
/**
 * SubAdminSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * SubAdminSpec Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubAdminSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubAdminSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amountAccountedForCur' => 'float',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'currencyId' => 'string',
        'domainId1' => 'string',
        'domainId2' => 'string',
        'domainId3' => 'string',
        'domainId4' => 'string',
        'domainId5' => 'string',
        'fullSpecificationRequired' => 'bool',
        'isDefaultSpecForAccount' => 'bool',
        'labelForDateValue' => 'string',
        'labelForDomainValue1' => 'string',
        'labelForDomainValue2' => 'string',
        'labelForDomainValue3' => 'string',
        'labelForDomainValue4' => 'string',
        'labelForDomainValue5' => 'string',
        'labelForQuantity1' => 'string',
        'labelForQuantity2' => 'string',
        'labelForQuantity3' => 'string',
        'labelForQuantity4' => 'string',
        'runningTotalAmountCur' => 'float',
        'specRemainingAmountCur' => 'float',
        'subAdminDescription' => 'string',
        'subAdminId' => 'string',
        'subAdminSpecEntries' => '\Seacommerce\Unit4\Multivers\Sdk\Model\SubAdminSpecEntry[]',
        'customProperties' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amountAccountedForCur' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'currencyId' => null,
        'domainId1' => null,
        'domainId2' => null,
        'domainId3' => null,
        'domainId4' => null,
        'domainId5' => null,
        'fullSpecificationRequired' => null,
        'isDefaultSpecForAccount' => null,
        'labelForDateValue' => null,
        'labelForDomainValue1' => null,
        'labelForDomainValue2' => null,
        'labelForDomainValue3' => null,
        'labelForDomainValue4' => null,
        'labelForDomainValue5' => null,
        'labelForQuantity1' => null,
        'labelForQuantity2' => null,
        'labelForQuantity3' => null,
        'labelForQuantity4' => null,
        'runningTotalAmountCur' => null,
        'specRemainingAmountCur' => null,
        'subAdminDescription' => null,
        'subAdminId' => null,
        'subAdminSpecEntries' => null,
        'customProperties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amountAccountedForCur' => 'amountAccountedForCur',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'currencyId' => 'currencyId',
        'domainId1' => 'domainId1',
        'domainId2' => 'domainId2',
        'domainId3' => 'domainId3',
        'domainId4' => 'domainId4',
        'domainId5' => 'domainId5',
        'fullSpecificationRequired' => 'fullSpecificationRequired',
        'isDefaultSpecForAccount' => 'isDefaultSpecForAccount',
        'labelForDateValue' => 'labelForDateValue',
        'labelForDomainValue1' => 'labelForDomainValue1',
        'labelForDomainValue2' => 'labelForDomainValue2',
        'labelForDomainValue3' => 'labelForDomainValue3',
        'labelForDomainValue4' => 'labelForDomainValue4',
        'labelForDomainValue5' => 'labelForDomainValue5',
        'labelForQuantity1' => 'labelForQuantity1',
        'labelForQuantity2' => 'labelForQuantity2',
        'labelForQuantity3' => 'labelForQuantity3',
        'labelForQuantity4' => 'labelForQuantity4',
        'runningTotalAmountCur' => 'runningTotalAmountCur',
        'specRemainingAmountCur' => 'specRemainingAmountCur',
        'subAdminDescription' => 'subAdminDescription',
        'subAdminId' => 'subAdminId',
        'subAdminSpecEntries' => 'subAdminSpecEntries',
        'customProperties' => 'customProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amountAccountedForCur' => 'setAmountAccountedForCur',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'currencyId' => 'setCurrencyId',
        'domainId1' => 'setDomainId1',
        'domainId2' => 'setDomainId2',
        'domainId3' => 'setDomainId3',
        'domainId4' => 'setDomainId4',
        'domainId5' => 'setDomainId5',
        'fullSpecificationRequired' => 'setFullSpecificationRequired',
        'isDefaultSpecForAccount' => 'setIsDefaultSpecForAccount',
        'labelForDateValue' => 'setLabelForDateValue',
        'labelForDomainValue1' => 'setLabelForDomainValue1',
        'labelForDomainValue2' => 'setLabelForDomainValue2',
        'labelForDomainValue3' => 'setLabelForDomainValue3',
        'labelForDomainValue4' => 'setLabelForDomainValue4',
        'labelForDomainValue5' => 'setLabelForDomainValue5',
        'labelForQuantity1' => 'setLabelForQuantity1',
        'labelForQuantity2' => 'setLabelForQuantity2',
        'labelForQuantity3' => 'setLabelForQuantity3',
        'labelForQuantity4' => 'setLabelForQuantity4',
        'runningTotalAmountCur' => 'setRunningTotalAmountCur',
        'specRemainingAmountCur' => 'setSpecRemainingAmountCur',
        'subAdminDescription' => 'setSubAdminDescription',
        'subAdminId' => 'setSubAdminId',
        'subAdminSpecEntries' => 'setSubAdminSpecEntries',
        'customProperties' => 'setCustomProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amountAccountedForCur' => 'getAmountAccountedForCur',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'currencyId' => 'getCurrencyId',
        'domainId1' => 'getDomainId1',
        'domainId2' => 'getDomainId2',
        'domainId3' => 'getDomainId3',
        'domainId4' => 'getDomainId4',
        'domainId5' => 'getDomainId5',
        'fullSpecificationRequired' => 'getFullSpecificationRequired',
        'isDefaultSpecForAccount' => 'getIsDefaultSpecForAccount',
        'labelForDateValue' => 'getLabelForDateValue',
        'labelForDomainValue1' => 'getLabelForDomainValue1',
        'labelForDomainValue2' => 'getLabelForDomainValue2',
        'labelForDomainValue3' => 'getLabelForDomainValue3',
        'labelForDomainValue4' => 'getLabelForDomainValue4',
        'labelForDomainValue5' => 'getLabelForDomainValue5',
        'labelForQuantity1' => 'getLabelForQuantity1',
        'labelForQuantity2' => 'getLabelForQuantity2',
        'labelForQuantity3' => 'getLabelForQuantity3',
        'labelForQuantity4' => 'getLabelForQuantity4',
        'runningTotalAmountCur' => 'getRunningTotalAmountCur',
        'specRemainingAmountCur' => 'getSpecRemainingAmountCur',
        'subAdminDescription' => 'getSubAdminDescription',
        'subAdminId' => 'getSubAdminId',
        'subAdminSpecEntries' => 'getSubAdminSpecEntries',
        'customProperties' => 'getCustomProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amountAccountedForCur'] = isset($data['amountAccountedForCur']) ? $data['amountAccountedForCur'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['domainId1'] = isset($data['domainId1']) ? $data['domainId1'] : null;
        $this->container['domainId2'] = isset($data['domainId2']) ? $data['domainId2'] : null;
        $this->container['domainId3'] = isset($data['domainId3']) ? $data['domainId3'] : null;
        $this->container['domainId4'] = isset($data['domainId4']) ? $data['domainId4'] : null;
        $this->container['domainId5'] = isset($data['domainId5']) ? $data['domainId5'] : null;
        $this->container['fullSpecificationRequired'] = isset($data['fullSpecificationRequired']) ? $data['fullSpecificationRequired'] : null;
        $this->container['isDefaultSpecForAccount'] = isset($data['isDefaultSpecForAccount']) ? $data['isDefaultSpecForAccount'] : null;
        $this->container['labelForDateValue'] = isset($data['labelForDateValue']) ? $data['labelForDateValue'] : null;
        $this->container['labelForDomainValue1'] = isset($data['labelForDomainValue1']) ? $data['labelForDomainValue1'] : null;
        $this->container['labelForDomainValue2'] = isset($data['labelForDomainValue2']) ? $data['labelForDomainValue2'] : null;
        $this->container['labelForDomainValue3'] = isset($data['labelForDomainValue3']) ? $data['labelForDomainValue3'] : null;
        $this->container['labelForDomainValue4'] = isset($data['labelForDomainValue4']) ? $data['labelForDomainValue4'] : null;
        $this->container['labelForDomainValue5'] = isset($data['labelForDomainValue5']) ? $data['labelForDomainValue5'] : null;
        $this->container['labelForQuantity1'] = isset($data['labelForQuantity1']) ? $data['labelForQuantity1'] : null;
        $this->container['labelForQuantity2'] = isset($data['labelForQuantity2']) ? $data['labelForQuantity2'] : null;
        $this->container['labelForQuantity3'] = isset($data['labelForQuantity3']) ? $data['labelForQuantity3'] : null;
        $this->container['labelForQuantity4'] = isset($data['labelForQuantity4']) ? $data['labelForQuantity4'] : null;
        $this->container['runningTotalAmountCur'] = isset($data['runningTotalAmountCur']) ? $data['runningTotalAmountCur'] : null;
        $this->container['specRemainingAmountCur'] = isset($data['specRemainingAmountCur']) ? $data['specRemainingAmountCur'] : null;
        $this->container['subAdminDescription'] = isset($data['subAdminDescription']) ? $data['subAdminDescription'] : null;
        $this->container['subAdminId'] = isset($data['subAdminId']) ? $data['subAdminId'] : null;
        $this->container['subAdminSpecEntries'] = isset($data['subAdminSpecEntries']) ? $data['subAdminSpecEntries'] : null;
        $this->container['customProperties'] = isset($data['customProperties']) ? $data['customProperties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['domainId5']) && (mb_strlen($this->container['domainId5']) > 3)) {
            $invalidProperties[] = "invalid value for 'domainId5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['labelForDomainValue4']) && (mb_strlen($this->container['labelForDomainValue4']) > 30)) {
            $invalidProperties[] = "invalid value for 'labelForDomainValue4', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['subAdminId'] === null) {
            $invalidProperties[] = "'subAdminId' can't be null";
        }
        if ((mb_strlen($this->container['subAdminId']) > 3)) {
            $invalidProperties[] = "invalid value for 'subAdminId', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amountAccountedForCur
     *
     * @return float|null
     */
    public function getAmountAccountedForCur()
    {
        return $this->container['amountAccountedForCur'];
    }

    /**
     * Sets amountAccountedForCur
     *
     * @param float|null $amountAccountedForCur amountAccountedForCur
     *
     * @return $this
     */
    public function setAmountAccountedForCur($amountAccountedForCur)
    {
        $this->container['amountAccountedForCur'] = $amountAccountedForCur;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets domainId1
     *
     * @return string|null
     */
    public function getDomainId1()
    {
        return $this->container['domainId1'];
    }

    /**
     * Sets domainId1
     *
     * @param string|null $domainId1 domainId1
     *
     * @return $this
     */
    public function setDomainId1($domainId1)
    {
        $this->container['domainId1'] = $domainId1;

        return $this;
    }

    /**
     * Gets domainId2
     *
     * @return string|null
     */
    public function getDomainId2()
    {
        return $this->container['domainId2'];
    }

    /**
     * Sets domainId2
     *
     * @param string|null $domainId2 domainId2
     *
     * @return $this
     */
    public function setDomainId2($domainId2)
    {
        $this->container['domainId2'] = $domainId2;

        return $this;
    }

    /**
     * Gets domainId3
     *
     * @return string|null
     */
    public function getDomainId3()
    {
        return $this->container['domainId3'];
    }

    /**
     * Sets domainId3
     *
     * @param string|null $domainId3 domainId3
     *
     * @return $this
     */
    public function setDomainId3($domainId3)
    {
        $this->container['domainId3'] = $domainId3;

        return $this;
    }

    /**
     * Gets domainId4
     *
     * @return string|null
     */
    public function getDomainId4()
    {
        return $this->container['domainId4'];
    }

    /**
     * Sets domainId4
     *
     * @param string|null $domainId4 domainId4
     *
     * @return $this
     */
    public function setDomainId4($domainId4)
    {
        $this->container['domainId4'] = $domainId4;

        return $this;
    }

    /**
     * Gets domainId5
     *
     * @return string|null
     */
    public function getDomainId5()
    {
        return $this->container['domainId5'];
    }

    /**
     * Sets domainId5
     *
     * @param string|null $domainId5 domainId5
     *
     * @return $this
     */
    public function setDomainId5($domainId5)
    {
        if (!is_null($domainId5) && (mb_strlen($domainId5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $domainId5 when calling SubAdminSpec., must be smaller than or equal to 3.');
        }

        $this->container['domainId5'] = $domainId5;

        return $this;
    }

    /**
     * Gets fullSpecificationRequired
     *
     * @return bool|null
     */
    public function getFullSpecificationRequired()
    {
        return $this->container['fullSpecificationRequired'];
    }

    /**
     * Sets fullSpecificationRequired
     *
     * @param bool|null $fullSpecificationRequired fullSpecificationRequired
     *
     * @return $this
     */
    public function setFullSpecificationRequired($fullSpecificationRequired)
    {
        $this->container['fullSpecificationRequired'] = $fullSpecificationRequired;

        return $this;
    }

    /**
     * Gets isDefaultSpecForAccount
     *
     * @return bool|null
     */
    public function getIsDefaultSpecForAccount()
    {
        return $this->container['isDefaultSpecForAccount'];
    }

    /**
     * Sets isDefaultSpecForAccount
     *
     * @param bool|null $isDefaultSpecForAccount isDefaultSpecForAccount
     *
     * @return $this
     */
    public function setIsDefaultSpecForAccount($isDefaultSpecForAccount)
    {
        $this->container['isDefaultSpecForAccount'] = $isDefaultSpecForAccount;

        return $this;
    }

    /**
     * Gets labelForDateValue
     *
     * @return string|null
     */
    public function getLabelForDateValue()
    {
        return $this->container['labelForDateValue'];
    }

    /**
     * Sets labelForDateValue
     *
     * @param string|null $labelForDateValue labelForDateValue
     *
     * @return $this
     */
    public function setLabelForDateValue($labelForDateValue)
    {
        $this->container['labelForDateValue'] = $labelForDateValue;

        return $this;
    }

    /**
     * Gets labelForDomainValue1
     *
     * @return string|null
     */
    public function getLabelForDomainValue1()
    {
        return $this->container['labelForDomainValue1'];
    }

    /**
     * Sets labelForDomainValue1
     *
     * @param string|null $labelForDomainValue1 labelForDomainValue1
     *
     * @return $this
     */
    public function setLabelForDomainValue1($labelForDomainValue1)
    {
        $this->container['labelForDomainValue1'] = $labelForDomainValue1;

        return $this;
    }

    /**
     * Gets labelForDomainValue2
     *
     * @return string|null
     */
    public function getLabelForDomainValue2()
    {
        return $this->container['labelForDomainValue2'];
    }

    /**
     * Sets labelForDomainValue2
     *
     * @param string|null $labelForDomainValue2 labelForDomainValue2
     *
     * @return $this
     */
    public function setLabelForDomainValue2($labelForDomainValue2)
    {
        $this->container['labelForDomainValue2'] = $labelForDomainValue2;

        return $this;
    }

    /**
     * Gets labelForDomainValue3
     *
     * @return string|null
     */
    public function getLabelForDomainValue3()
    {
        return $this->container['labelForDomainValue3'];
    }

    /**
     * Sets labelForDomainValue3
     *
     * @param string|null $labelForDomainValue3 labelForDomainValue3
     *
     * @return $this
     */
    public function setLabelForDomainValue3($labelForDomainValue3)
    {
        $this->container['labelForDomainValue3'] = $labelForDomainValue3;

        return $this;
    }

    /**
     * Gets labelForDomainValue4
     *
     * @return string|null
     */
    public function getLabelForDomainValue4()
    {
        return $this->container['labelForDomainValue4'];
    }

    /**
     * Sets labelForDomainValue4
     *
     * @param string|null $labelForDomainValue4 labelForDomainValue4
     *
     * @return $this
     */
    public function setLabelForDomainValue4($labelForDomainValue4)
    {
        if (!is_null($labelForDomainValue4) && (mb_strlen($labelForDomainValue4) > 30)) {
            throw new \InvalidArgumentException('invalid length for $labelForDomainValue4 when calling SubAdminSpec., must be smaller than or equal to 30.');
        }

        $this->container['labelForDomainValue4'] = $labelForDomainValue4;

        return $this;
    }

    /**
     * Gets labelForDomainValue5
     *
     * @return string|null
     */
    public function getLabelForDomainValue5()
    {
        return $this->container['labelForDomainValue5'];
    }

    /**
     * Sets labelForDomainValue5
     *
     * @param string|null $labelForDomainValue5 labelForDomainValue5
     *
     * @return $this
     */
    public function setLabelForDomainValue5($labelForDomainValue5)
    {
        $this->container['labelForDomainValue5'] = $labelForDomainValue5;

        return $this;
    }

    /**
     * Gets labelForQuantity1
     *
     * @return string|null
     */
    public function getLabelForQuantity1()
    {
        return $this->container['labelForQuantity1'];
    }

    /**
     * Sets labelForQuantity1
     *
     * @param string|null $labelForQuantity1 labelForQuantity1
     *
     * @return $this
     */
    public function setLabelForQuantity1($labelForQuantity1)
    {
        $this->container['labelForQuantity1'] = $labelForQuantity1;

        return $this;
    }

    /**
     * Gets labelForQuantity2
     *
     * @return string|null
     */
    public function getLabelForQuantity2()
    {
        return $this->container['labelForQuantity2'];
    }

    /**
     * Sets labelForQuantity2
     *
     * @param string|null $labelForQuantity2 labelForQuantity2
     *
     * @return $this
     */
    public function setLabelForQuantity2($labelForQuantity2)
    {
        $this->container['labelForQuantity2'] = $labelForQuantity2;

        return $this;
    }

    /**
     * Gets labelForQuantity3
     *
     * @return string|null
     */
    public function getLabelForQuantity3()
    {
        return $this->container['labelForQuantity3'];
    }

    /**
     * Sets labelForQuantity3
     *
     * @param string|null $labelForQuantity3 labelForQuantity3
     *
     * @return $this
     */
    public function setLabelForQuantity3($labelForQuantity3)
    {
        $this->container['labelForQuantity3'] = $labelForQuantity3;

        return $this;
    }

    /**
     * Gets labelForQuantity4
     *
     * @return string|null
     */
    public function getLabelForQuantity4()
    {
        return $this->container['labelForQuantity4'];
    }

    /**
     * Sets labelForQuantity4
     *
     * @param string|null $labelForQuantity4 labelForQuantity4
     *
     * @return $this
     */
    public function setLabelForQuantity4($labelForQuantity4)
    {
        $this->container['labelForQuantity4'] = $labelForQuantity4;

        return $this;
    }

    /**
     * Gets runningTotalAmountCur
     *
     * @return float|null
     */
    public function getRunningTotalAmountCur()
    {
        return $this->container['runningTotalAmountCur'];
    }

    /**
     * Sets runningTotalAmountCur
     *
     * @param float|null $runningTotalAmountCur runningTotalAmountCur
     *
     * @return $this
     */
    public function setRunningTotalAmountCur($runningTotalAmountCur)
    {
        $this->container['runningTotalAmountCur'] = $runningTotalAmountCur;

        return $this;
    }

    /**
     * Gets specRemainingAmountCur
     *
     * @return float|null
     */
    public function getSpecRemainingAmountCur()
    {
        return $this->container['specRemainingAmountCur'];
    }

    /**
     * Sets specRemainingAmountCur
     *
     * @param float|null $specRemainingAmountCur specRemainingAmountCur
     *
     * @return $this
     */
    public function setSpecRemainingAmountCur($specRemainingAmountCur)
    {
        $this->container['specRemainingAmountCur'] = $specRemainingAmountCur;

        return $this;
    }

    /**
     * Gets subAdminDescription
     *
     * @return string|null
     */
    public function getSubAdminDescription()
    {
        return $this->container['subAdminDescription'];
    }

    /**
     * Sets subAdminDescription
     *
     * @param string|null $subAdminDescription subAdminDescription
     *
     * @return $this
     */
    public function setSubAdminDescription($subAdminDescription)
    {
        $this->container['subAdminDescription'] = $subAdminDescription;

        return $this;
    }

    /**
     * Gets subAdminId
     *
     * @return string
     */
    public function getSubAdminId()
    {
        return $this->container['subAdminId'];
    }

    /**
     * Sets subAdminId
     *
     * @param string $subAdminId subAdminId
     *
     * @return $this
     */
    public function setSubAdminId($subAdminId)
    {
        if ((mb_strlen($subAdminId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $subAdminId when calling SubAdminSpec., must be smaller than or equal to 3.');
        }

        $this->container['subAdminId'] = $subAdminId;

        return $this;
    }

    /**
     * Gets subAdminSpecEntries
     *
     * @return \Seacommerce\Unit4\Multivers\Sdk\Model\SubAdminSpecEntry[]|null
     */
    public function getSubAdminSpecEntries()
    {
        return $this->container['subAdminSpecEntries'];
    }

    /**
     * Sets subAdminSpecEntries
     *
     * @param \Seacommerce\Unit4\Multivers\Sdk\Model\SubAdminSpecEntry[]|null $subAdminSpecEntries subAdminSpecEntries
     *
     * @return $this
     */
    public function setSubAdminSpecEntries($subAdminSpecEntries)
    {
        $this->container['subAdminSpecEntries'] = $subAdminSpecEntries;

        return $this;
    }

    /**
     * Gets customProperties
     *
     * @return object|null
     */
    public function getCustomProperties()
    {
        return $this->container['customProperties'];
    }

    /**
     * Sets customProperties
     *
     * @param object|null $customProperties customProperties
     *
     * @return $this
     */
    public function setCustomProperties($customProperties)
    {
        $this->container['customProperties'] = $customProperties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


