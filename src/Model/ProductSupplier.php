<?php
/**
 * ProductSupplier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * ProductSupplier Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductSupplier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductSupplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'currencyId' => 'string',
        'discountPercentage' => 'float',
        'minOrderQuantity' => 'float',
        'partNumber' => 'string',
        'preferred' => 'bool',
        'price' => 'float',
        'productSupplierId' => 'string',
        'purchaseSurchargePercentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'canChange' => null,
        'cannotChangeReason' => null,
        'currencyId' => null,
        'discountPercentage' => null,
        'minOrderQuantity' => null,
        'partNumber' => null,
        'preferred' => null,
        'price' => null,
        'productSupplierId' => null,
        'purchaseSurchargePercentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'currencyId' => 'currencyId',
        'discountPercentage' => 'discountPercentage',
        'minOrderQuantity' => 'minOrderQuantity',
        'partNumber' => 'partNumber',
        'preferred' => 'preferred',
        'price' => 'price',
        'productSupplierId' => 'productSupplierId',
        'purchaseSurchargePercentage' => 'purchaseSurchargePercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'currencyId' => 'setCurrencyId',
        'discountPercentage' => 'setDiscountPercentage',
        'minOrderQuantity' => 'setMinOrderQuantity',
        'partNumber' => 'setPartNumber',
        'preferred' => 'setPreferred',
        'price' => 'setPrice',
        'productSupplierId' => 'setProductSupplierId',
        'purchaseSurchargePercentage' => 'setPurchaseSurchargePercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'currencyId' => 'getCurrencyId',
        'discountPercentage' => 'getDiscountPercentage',
        'minOrderQuantity' => 'getMinOrderQuantity',
        'partNumber' => 'getPartNumber',
        'preferred' => 'getPreferred',
        'price' => 'getPrice',
        'productSupplierId' => 'getProductSupplierId',
        'purchaseSurchargePercentage' => 'getPurchaseSurchargePercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['discountPercentage'] = isset($data['discountPercentage']) ? $data['discountPercentage'] : null;
        $this->container['minOrderQuantity'] = isset($data['minOrderQuantity']) ? $data['minOrderQuantity'] : null;
        $this->container['partNumber'] = isset($data['partNumber']) ? $data['partNumber'] : null;
        $this->container['preferred'] = isset($data['preferred']) ? $data['preferred'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['productSupplierId'] = isset($data['productSupplierId']) ? $data['productSupplierId'] : null;
        $this->container['purchaseSurchargePercentage'] = isset($data['purchaseSurchargePercentage']) ? $data['purchaseSurchargePercentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currencyId']) && (mb_strlen($this->container['currencyId']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['discountPercentage']) && ($this->container['discountPercentage'] > 1)) {
            $invalidProperties[] = "invalid value for 'discountPercentage', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['discountPercentage']) && ($this->container['discountPercentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'discountPercentage', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['minOrderQuantity']) && ($this->container['minOrderQuantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'minOrderQuantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['partNumber']) && (mb_strlen($this->container['partNumber']) > 30)) {
            $invalidProperties[] = "invalid value for 'partNumber', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['price']) && ($this->container['price'] < 0)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 0.";
        }

        if ($this->container['productSupplierId'] === null) {
            $invalidProperties[] = "'productSupplierId' can't be null";
        }
        if ((mb_strlen($this->container['productSupplierId']) > 8)) {
            $invalidProperties[] = "invalid value for 'productSupplierId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['purchaseSurchargePercentage']) && ($this->container['purchaseSurchargePercentage'] > 1)) {
            $invalidProperties[] = "invalid value for 'purchaseSurchargePercentage', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['purchaseSurchargePercentage']) && ($this->container['purchaseSurchargePercentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'purchaseSurchargePercentage', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        if (!is_null($currencyId) && (mb_strlen($currencyId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyId when calling ProductSupplier., must be smaller than or equal to 3.');
        }

        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets discountPercentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discountPercentage'];
    }

    /**
     * Sets discountPercentage
     *
     * @param float|null $discountPercentage discountPercentage
     *
     * @return $this
     */
    public function setDiscountPercentage($discountPercentage)
    {

        if (!is_null($discountPercentage) && ($discountPercentage > 1)) {
            throw new \InvalidArgumentException('invalid value for $discountPercentage when calling ProductSupplier., must be smaller than or equal to 1.');
        }
        if (!is_null($discountPercentage) && ($discountPercentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $discountPercentage when calling ProductSupplier., must be bigger than or equal to 0.');
        }

        $this->container['discountPercentage'] = $discountPercentage;

        return $this;
    }

    /**
     * Gets minOrderQuantity
     *
     * @return float|null
     */
    public function getMinOrderQuantity()
    {
        return $this->container['minOrderQuantity'];
    }

    /**
     * Sets minOrderQuantity
     *
     * @param float|null $minOrderQuantity minOrderQuantity
     *
     * @return $this
     */
    public function setMinOrderQuantity($minOrderQuantity)
    {

        if (!is_null($minOrderQuantity) && ($minOrderQuantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $minOrderQuantity when calling ProductSupplier., must be bigger than or equal to 0.');
        }

        $this->container['minOrderQuantity'] = $minOrderQuantity;

        return $this;
    }

    /**
     * Gets partNumber
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['partNumber'];
    }

    /**
     * Sets partNumber
     *
     * @param string|null $partNumber partNumber
     *
     * @return $this
     */
    public function setPartNumber($partNumber)
    {
        if (!is_null($partNumber) && (mb_strlen($partNumber) > 30)) {
            throw new \InvalidArgumentException('invalid length for $partNumber when calling ProductSupplier., must be smaller than or equal to 30.');
        }

        $this->container['partNumber'] = $partNumber;

        return $this;
    }

    /**
     * Gets preferred
     *
     * @return bool|null
     */
    public function getPreferred()
    {
        return $this->container['preferred'];
    }

    /**
     * Sets preferred
     *
     * @param bool|null $preferred preferred
     *
     * @return $this
     */
    public function setPreferred($preferred)
    {
        $this->container['preferred'] = $preferred;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {

        if (!is_null($price) && ($price < 0)) {
            throw new \InvalidArgumentException('invalid value for $price when calling ProductSupplier., must be bigger than or equal to 0.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets productSupplierId
     *
     * @return string
     */
    public function getProductSupplierId()
    {
        return $this->container['productSupplierId'];
    }

    /**
     * Sets productSupplierId
     *
     * @param string $productSupplierId productSupplierId
     *
     * @return $this
     */
    public function setProductSupplierId($productSupplierId)
    {
        if ((mb_strlen($productSupplierId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $productSupplierId when calling ProductSupplier., must be smaller than or equal to 8.');
        }

        $this->container['productSupplierId'] = $productSupplierId;

        return $this;
    }

    /**
     * Gets purchaseSurchargePercentage
     *
     * @return float|null
     */
    public function getPurchaseSurchargePercentage()
    {
        return $this->container['purchaseSurchargePercentage'];
    }

    /**
     * Sets purchaseSurchargePercentage
     *
     * @param float|null $purchaseSurchargePercentage purchaseSurchargePercentage
     *
     * @return $this
     */
    public function setPurchaseSurchargePercentage($purchaseSurchargePercentage)
    {

        if (!is_null($purchaseSurchargePercentage) && ($purchaseSurchargePercentage > 1)) {
            throw new \InvalidArgumentException('invalid value for $purchaseSurchargePercentage when calling ProductSupplier., must be smaller than or equal to 1.');
        }
        if (!is_null($purchaseSurchargePercentage) && ($purchaseSurchargePercentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $purchaseSurchargePercentage when calling ProductSupplier., must be bigger than or equal to 0.');
        }

        $this->container['purchaseSurchargePercentage'] = $purchaseSurchargePercentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


