<?php
/**
 * ProductInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * ProductInfo Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'string',
        'dateCreated' => 'string',
        'description' => 'string',
        'discountAccountId' => 'string',
        'eanCode' => 'string',
        'intrastatCode' => 'int',
        'lastUpdate' => 'string',
        'priceExclVat' => 'float',
        'priceInclVat' => 'float',
        'pricePer' => 'float',
        'printOnInvoice' => 'bool',
        'printOnQuote' => 'bool',
        'printOnShippingOrder' => 'bool',
        'printOnWarehouseOrder' => 'bool',
        'productGroupId' => 'string',
        'productId' => 'string',
        'productState' => 'int',
        'productType' => 'int',
        'projectEntryType' => 'string',
        'projectSurcharge' => 'float',
        'purchaseOrderSequenceNumber' => 'int',
        'quantityScale' => 'int',
        'shortName' => 'string',
        'stockTransferPrice' => 'float',
        'technicalStock' => 'float',
        'unit' => 'string',
        'vatCodeId' => 'int',
        'weight' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountId' => null,
        'dateCreated' => null,
        'description' => null,
        'discountAccountId' => null,
        'eanCode' => null,
        'intrastatCode' => 'int32',
        'lastUpdate' => null,
        'priceExclVat' => null,
        'priceInclVat' => null,
        'pricePer' => null,
        'printOnInvoice' => null,
        'printOnQuote' => null,
        'printOnShippingOrder' => null,
        'printOnWarehouseOrder' => null,
        'productGroupId' => null,
        'productId' => null,
        'productState' => null,
        'productType' => null,
        'projectEntryType' => null,
        'projectSurcharge' => null,
        'purchaseOrderSequenceNumber' => 'int32',
        'quantityScale' => 'int32',
        'shortName' => null,
        'stockTransferPrice' => null,
        'technicalStock' => null,
        'unit' => null,
        'vatCodeId' => 'int32',
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'dateCreated' => 'dateCreated',
        'description' => 'description',
        'discountAccountId' => 'discountAccountId',
        'eanCode' => 'eanCode',
        'intrastatCode' => 'intrastatCode',
        'lastUpdate' => 'lastUpdate',
        'priceExclVat' => 'priceExclVat',
        'priceInclVat' => 'priceInclVat',
        'pricePer' => 'pricePer',
        'printOnInvoice' => 'printOnInvoice',
        'printOnQuote' => 'printOnQuote',
        'printOnShippingOrder' => 'printOnShippingOrder',
        'printOnWarehouseOrder' => 'printOnWarehouseOrder',
        'productGroupId' => 'productGroupId',
        'productId' => 'productId',
        'productState' => 'productState',
        'productType' => 'productType',
        'projectEntryType' => 'projectEntryType',
        'projectSurcharge' => 'projectSurcharge',
        'purchaseOrderSequenceNumber' => 'purchaseOrderSequenceNumber',
        'quantityScale' => 'quantityScale',
        'shortName' => 'shortName',
        'stockTransferPrice' => 'stockTransferPrice',
        'technicalStock' => 'technicalStock',
        'unit' => 'unit',
        'vatCodeId' => 'vatCodeId',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'dateCreated' => 'setDateCreated',
        'description' => 'setDescription',
        'discountAccountId' => 'setDiscountAccountId',
        'eanCode' => 'setEanCode',
        'intrastatCode' => 'setIntrastatCode',
        'lastUpdate' => 'setLastUpdate',
        'priceExclVat' => 'setPriceExclVat',
        'priceInclVat' => 'setPriceInclVat',
        'pricePer' => 'setPricePer',
        'printOnInvoice' => 'setPrintOnInvoice',
        'printOnQuote' => 'setPrintOnQuote',
        'printOnShippingOrder' => 'setPrintOnShippingOrder',
        'printOnWarehouseOrder' => 'setPrintOnWarehouseOrder',
        'productGroupId' => 'setProductGroupId',
        'productId' => 'setProductId',
        'productState' => 'setProductState',
        'productType' => 'setProductType',
        'projectEntryType' => 'setProjectEntryType',
        'projectSurcharge' => 'setProjectSurcharge',
        'purchaseOrderSequenceNumber' => 'setPurchaseOrderSequenceNumber',
        'quantityScale' => 'setQuantityScale',
        'shortName' => 'setShortName',
        'stockTransferPrice' => 'setStockTransferPrice',
        'technicalStock' => 'setTechnicalStock',
        'unit' => 'setUnit',
        'vatCodeId' => 'setVatCodeId',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'dateCreated' => 'getDateCreated',
        'description' => 'getDescription',
        'discountAccountId' => 'getDiscountAccountId',
        'eanCode' => 'getEanCode',
        'intrastatCode' => 'getIntrastatCode',
        'lastUpdate' => 'getLastUpdate',
        'priceExclVat' => 'getPriceExclVat',
        'priceInclVat' => 'getPriceInclVat',
        'pricePer' => 'getPricePer',
        'printOnInvoice' => 'getPrintOnInvoice',
        'printOnQuote' => 'getPrintOnQuote',
        'printOnShippingOrder' => 'getPrintOnShippingOrder',
        'printOnWarehouseOrder' => 'getPrintOnWarehouseOrder',
        'productGroupId' => 'getProductGroupId',
        'productId' => 'getProductId',
        'productState' => 'getProductState',
        'productType' => 'getProductType',
        'projectEntryType' => 'getProjectEntryType',
        'projectSurcharge' => 'getProjectSurcharge',
        'purchaseOrderSequenceNumber' => 'getPurchaseOrderSequenceNumber',
        'quantityScale' => 'getQuantityScale',
        'shortName' => 'getShortName',
        'stockTransferPrice' => 'getStockTransferPrice',
        'technicalStock' => 'getTechnicalStock',
        'unit' => 'getUnit',
        'vatCodeId' => 'getVatCodeId',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discountAccountId'] = isset($data['discountAccountId']) ? $data['discountAccountId'] : null;
        $this->container['eanCode'] = isset($data['eanCode']) ? $data['eanCode'] : null;
        $this->container['intrastatCode'] = isset($data['intrastatCode']) ? $data['intrastatCode'] : null;
        $this->container['lastUpdate'] = isset($data['lastUpdate']) ? $data['lastUpdate'] : null;
        $this->container['priceExclVat'] = isset($data['priceExclVat']) ? $data['priceExclVat'] : null;
        $this->container['priceInclVat'] = isset($data['priceInclVat']) ? $data['priceInclVat'] : null;
        $this->container['pricePer'] = isset($data['pricePer']) ? $data['pricePer'] : null;
        $this->container['printOnInvoice'] = isset($data['printOnInvoice']) ? $data['printOnInvoice'] : null;
        $this->container['printOnQuote'] = isset($data['printOnQuote']) ? $data['printOnQuote'] : null;
        $this->container['printOnShippingOrder'] = isset($data['printOnShippingOrder']) ? $data['printOnShippingOrder'] : null;
        $this->container['printOnWarehouseOrder'] = isset($data['printOnWarehouseOrder']) ? $data['printOnWarehouseOrder'] : null;
        $this->container['productGroupId'] = isset($data['productGroupId']) ? $data['productGroupId'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['productState'] = isset($data['productState']) ? $data['productState'] : null;
        $this->container['productType'] = isset($data['productType']) ? $data['productType'] : null;
        $this->container['projectEntryType'] = isset($data['projectEntryType']) ? $data['projectEntryType'] : null;
        $this->container['projectSurcharge'] = isset($data['projectSurcharge']) ? $data['projectSurcharge'] : null;
        $this->container['purchaseOrderSequenceNumber'] = isset($data['purchaseOrderSequenceNumber']) ? $data['purchaseOrderSequenceNumber'] : null;
        $this->container['quantityScale'] = isset($data['quantityScale']) ? $data['quantityScale'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['stockTransferPrice'] = isset($data['stockTransferPrice']) ? $data['stockTransferPrice'] : null;
        $this->container['technicalStock'] = isset($data['technicalStock']) ? $data['technicalStock'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['vatCodeId'] = isset($data['vatCodeId']) ? $data['vatCodeId'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 60)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['productGroupId']) && (mb_strlen($this->container['productGroupId']) > 3)) {
            $invalidProperties[] = "invalid value for 'productGroupId', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['productId'] === null) {
            $invalidProperties[] = "'productId' can't be null";
        }
        if ((mb_strlen($this->container['productId']) > 14)) {
            $invalidProperties[] = "invalid value for 'productId', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['shortName']) && (mb_strlen($this->container['shortName']) > 8)) {
            $invalidProperties[] = "invalid value for 'shortName', the character length must be smaller than or equal to 8.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string|null $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 60)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProductInfo., must be smaller than or equal to 60.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discountAccountId
     *
     * @return string|null
     */
    public function getDiscountAccountId()
    {
        return $this->container['discountAccountId'];
    }

    /**
     * Sets discountAccountId
     *
     * @param string|null $discountAccountId discountAccountId
     *
     * @return $this
     */
    public function setDiscountAccountId($discountAccountId)
    {
        $this->container['discountAccountId'] = $discountAccountId;

        return $this;
    }

    /**
     * Gets eanCode
     *
     * @return string|null
     */
    public function getEanCode()
    {
        return $this->container['eanCode'];
    }

    /**
     * Sets eanCode
     *
     * @param string|null $eanCode eanCode
     *
     * @return $this
     */
    public function setEanCode($eanCode)
    {
        $this->container['eanCode'] = $eanCode;

        return $this;
    }

    /**
     * Gets intrastatCode
     *
     * @return int|null
     */
    public function getIntrastatCode()
    {
        return $this->container['intrastatCode'];
    }

    /**
     * Sets intrastatCode
     *
     * @param int|null $intrastatCode intrastatCode
     *
     * @return $this
     */
    public function setIntrastatCode($intrastatCode)
    {
        $this->container['intrastatCode'] = $intrastatCode;

        return $this;
    }

    /**
     * Gets lastUpdate
     *
     * @return string|null
     */
    public function getLastUpdate()
    {
        return $this->container['lastUpdate'];
    }

    /**
     * Sets lastUpdate
     *
     * @param string|null $lastUpdate lastUpdate
     *
     * @return $this
     */
    public function setLastUpdate($lastUpdate)
    {
        $this->container['lastUpdate'] = $lastUpdate;

        return $this;
    }

    /**
     * Gets priceExclVat
     *
     * @return float|null
     */
    public function getPriceExclVat()
    {
        return $this->container['priceExclVat'];
    }

    /**
     * Sets priceExclVat
     *
     * @param float|null $priceExclVat priceExclVat
     *
     * @return $this
     */
    public function setPriceExclVat($priceExclVat)
    {
        $this->container['priceExclVat'] = $priceExclVat;

        return $this;
    }

    /**
     * Gets priceInclVat
     *
     * @return float|null
     */
    public function getPriceInclVat()
    {
        return $this->container['priceInclVat'];
    }

    /**
     * Sets priceInclVat
     *
     * @param float|null $priceInclVat priceInclVat
     *
     * @return $this
     */
    public function setPriceInclVat($priceInclVat)
    {
        $this->container['priceInclVat'] = $priceInclVat;

        return $this;
    }

    /**
     * Gets pricePer
     *
     * @return float|null
     */
    public function getPricePer()
    {
        return $this->container['pricePer'];
    }

    /**
     * Sets pricePer
     *
     * @param float|null $pricePer pricePer
     *
     * @return $this
     */
    public function setPricePer($pricePer)
    {
        $this->container['pricePer'] = $pricePer;

        return $this;
    }

    /**
     * Gets printOnInvoice
     *
     * @return bool|null
     */
    public function getPrintOnInvoice()
    {
        return $this->container['printOnInvoice'];
    }

    /**
     * Sets printOnInvoice
     *
     * @param bool|null $printOnInvoice printOnInvoice
     *
     * @return $this
     */
    public function setPrintOnInvoice($printOnInvoice)
    {
        $this->container['printOnInvoice'] = $printOnInvoice;

        return $this;
    }

    /**
     * Gets printOnQuote
     *
     * @return bool|null
     */
    public function getPrintOnQuote()
    {
        return $this->container['printOnQuote'];
    }

    /**
     * Sets printOnQuote
     *
     * @param bool|null $printOnQuote printOnQuote
     *
     * @return $this
     */
    public function setPrintOnQuote($printOnQuote)
    {
        $this->container['printOnQuote'] = $printOnQuote;

        return $this;
    }

    /**
     * Gets printOnShippingOrder
     *
     * @return bool|null
     */
    public function getPrintOnShippingOrder()
    {
        return $this->container['printOnShippingOrder'];
    }

    /**
     * Sets printOnShippingOrder
     *
     * @param bool|null $printOnShippingOrder printOnShippingOrder
     *
     * @return $this
     */
    public function setPrintOnShippingOrder($printOnShippingOrder)
    {
        $this->container['printOnShippingOrder'] = $printOnShippingOrder;

        return $this;
    }

    /**
     * Gets printOnWarehouseOrder
     *
     * @return bool|null
     */
    public function getPrintOnWarehouseOrder()
    {
        return $this->container['printOnWarehouseOrder'];
    }

    /**
     * Sets printOnWarehouseOrder
     *
     * @param bool|null $printOnWarehouseOrder printOnWarehouseOrder
     *
     * @return $this
     */
    public function setPrintOnWarehouseOrder($printOnWarehouseOrder)
    {
        $this->container['printOnWarehouseOrder'] = $printOnWarehouseOrder;

        return $this;
    }

    /**
     * Gets productGroupId
     *
     * @return string|null
     */
    public function getProductGroupId()
    {
        return $this->container['productGroupId'];
    }

    /**
     * Sets productGroupId
     *
     * @param string|null $productGroupId productGroupId
     *
     * @return $this
     */
    public function setProductGroupId($productGroupId)
    {
        if (!is_null($productGroupId) && (mb_strlen($productGroupId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $productGroupId when calling ProductInfo., must be smaller than or equal to 3.');
        }

        $this->container['productGroupId'] = $productGroupId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        if ((mb_strlen($productId) > 14)) {
            throw new \InvalidArgumentException('invalid length for $productId when calling ProductInfo., must be smaller than or equal to 14.');
        }

        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productState
     *
     * @return int|null
     */
    public function getProductState()
    {
        return $this->container['productState'];
    }

    /**
     * Sets productState
     *
     * @param int|null $productState 0 = Active 1 = Passive 2 = Expiring
     *
     * @return $this
     */
    public function setProductState($productState)
    {
        $this->container['productState'] = $productState;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return int|null
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param int|null $productType 0 = NonStockProduct 1 = Text 2 = StockProduct 3 = Constellation 4 = Assembly
     *
     * @return $this
     */
    public function setProductType($productType)
    {
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets projectEntryType
     *
     * @return string|null
     */
    public function getProjectEntryType()
    {
        return $this->container['projectEntryType'];
    }

    /**
     * Sets projectEntryType
     *
     * @param string|null $projectEntryType projectEntryType
     *
     * @return $this
     */
    public function setProjectEntryType($projectEntryType)
    {
        $this->container['projectEntryType'] = $projectEntryType;

        return $this;
    }

    /**
     * Gets projectSurcharge
     *
     * @return float|null
     */
    public function getProjectSurcharge()
    {
        return $this->container['projectSurcharge'];
    }

    /**
     * Sets projectSurcharge
     *
     * @param float|null $projectSurcharge projectSurcharge
     *
     * @return $this
     */
    public function setProjectSurcharge($projectSurcharge)
    {
        $this->container['projectSurcharge'] = $projectSurcharge;

        return $this;
    }

    /**
     * Gets purchaseOrderSequenceNumber
     *
     * @return int|null
     */
    public function getPurchaseOrderSequenceNumber()
    {
        return $this->container['purchaseOrderSequenceNumber'];
    }

    /**
     * Sets purchaseOrderSequenceNumber
     *
     * @param int|null $purchaseOrderSequenceNumber purchaseOrderSequenceNumber
     *
     * @return $this
     */
    public function setPurchaseOrderSequenceNumber($purchaseOrderSequenceNumber)
    {
        $this->container['purchaseOrderSequenceNumber'] = $purchaseOrderSequenceNumber;

        return $this;
    }

    /**
     * Gets quantityScale
     *
     * @return int|null
     */
    public function getQuantityScale()
    {
        return $this->container['quantityScale'];
    }

    /**
     * Sets quantityScale
     *
     * @param int|null $quantityScale quantityScale
     *
     * @return $this
     */
    public function setQuantityScale($quantityScale)
    {
        $this->container['quantityScale'] = $quantityScale;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string|null $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        if (!is_null($shortName) && (mb_strlen($shortName) > 8)) {
            throw new \InvalidArgumentException('invalid length for $shortName when calling ProductInfo., must be smaller than or equal to 8.');
        }

        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets stockTransferPrice
     *
     * @return float|null
     */
    public function getStockTransferPrice()
    {
        return $this->container['stockTransferPrice'];
    }

    /**
     * Sets stockTransferPrice
     *
     * @param float|null $stockTransferPrice stockTransferPrice
     *
     * @return $this
     */
    public function setStockTransferPrice($stockTransferPrice)
    {
        $this->container['stockTransferPrice'] = $stockTransferPrice;

        return $this;
    }

    /**
     * Gets technicalStock
     *
     * @return float|null
     */
    public function getTechnicalStock()
    {
        return $this->container['technicalStock'];
    }

    /**
     * Sets technicalStock
     *
     * @param float|null $technicalStock technicalStock
     *
     * @return $this
     */
    public function setTechnicalStock($technicalStock)
    {
        $this->container['technicalStock'] = $technicalStock;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets vatCodeId
     *
     * @return int|null
     */
    public function getVatCodeId()
    {
        return $this->container['vatCodeId'];
    }

    /**
     * Sets vatCodeId
     *
     * @param int|null $vatCodeId vatCodeId
     *
     * @return $this
     */
    public function setVatCodeId($vatCodeId)
    {
        $this->container['vatCodeId'] = $vatCodeId;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


