<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addressGuid' => 'string',
        'addressId' => 'int',
        'addressType' => 'int',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'city' => 'string',
        'contactPerson' => 'string',
        'countryId' => 'string',
        'email' => 'string',
        'fax' => 'string',
        'fullAddress' => 'string',
        'languageId' => 'string',
        'name' => 'string',
        'organizationId' => 'int',
        'street1' => 'string',
        'street2' => 'string',
        'telephone' => 'string',
        'zipCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'addressGuid' => null,
        'addressId' => 'int32',
        'addressType' => 'int32',
        'canChange' => null,
        'cannotChangeReason' => null,
        'city' => null,
        'contactPerson' => null,
        'countryId' => null,
        'email' => null,
        'fax' => null,
        'fullAddress' => null,
        'languageId' => null,
        'name' => null,
        'organizationId' => 'int32',
        'street1' => null,
        'street2' => null,
        'telephone' => null,
        'zipCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addressGuid' => 'addressGuid',
        'addressId' => 'addressId',
        'addressType' => 'addressType',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'city' => 'city',
        'contactPerson' => 'contactPerson',
        'countryId' => 'countryId',
        'email' => 'email',
        'fax' => 'fax',
        'fullAddress' => 'fullAddress',
        'languageId' => 'languageId',
        'name' => 'name',
        'organizationId' => 'organizationId',
        'street1' => 'street1',
        'street2' => 'street2',
        'telephone' => 'telephone',
        'zipCode' => 'zipCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addressGuid' => 'setAddressGuid',
        'addressId' => 'setAddressId',
        'addressType' => 'setAddressType',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'city' => 'setCity',
        'contactPerson' => 'setContactPerson',
        'countryId' => 'setCountryId',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'fullAddress' => 'setFullAddress',
        'languageId' => 'setLanguageId',
        'name' => 'setName',
        'organizationId' => 'setOrganizationId',
        'street1' => 'setStreet1',
        'street2' => 'setStreet2',
        'telephone' => 'setTelephone',
        'zipCode' => 'setZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addressGuid' => 'getAddressGuid',
        'addressId' => 'getAddressId',
        'addressType' => 'getAddressType',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'city' => 'getCity',
        'contactPerson' => 'getContactPerson',
        'countryId' => 'getCountryId',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'fullAddress' => 'getFullAddress',
        'languageId' => 'getLanguageId',
        'name' => 'getName',
        'organizationId' => 'getOrganizationId',
        'street1' => 'getStreet1',
        'street2' => 'getStreet2',
        'telephone' => 'getTelephone',
        'zipCode' => 'getZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addressGuid'] = isset($data['addressGuid']) ? $data['addressGuid'] : null;
        $this->container['addressId'] = isset($data['addressId']) ? $data['addressId'] : null;
        $this->container['addressType'] = isset($data['addressType']) ? $data['addressType'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['contactPerson'] = isset($data['contactPerson']) ? $data['contactPerson'] : null;
        $this->container['countryId'] = isset($data['countryId']) ? $data['countryId'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['fullAddress'] = isset($data['fullAddress']) ? $data['fullAddress'] : null;
        $this->container['languageId'] = isset($data['languageId']) ? $data['languageId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['organizationId'] = isset($data['organizationId']) ? $data['organizationId'] : null;
        $this->container['street1'] = isset($data['street1']) ? $data['street1'] : null;
        $this->container['street2'] = isset($data['street2']) ? $data['street2'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['zipCode'] = isset($data['zipCode']) ? $data['zipCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['addressGuid']) && (mb_strlen($this->container['addressGuid']) > 32)) {
            $invalidProperties[] = "invalid value for 'addressGuid', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['addressId']) && ($this->container['addressId'] > 999)) {
            $invalidProperties[] = "invalid value for 'addressId', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['addressId']) && ($this->container['addressId'] < 0)) {
            $invalidProperties[] = "invalid value for 'addressId', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 30)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['contactPerson']) && (mb_strlen($this->container['contactPerson']) > 55)) {
            $invalidProperties[] = "invalid value for 'contactPerson', the character length must be smaller than or equal to 55.";
        }

        if (!is_null($this->container['countryId']) && (mb_strlen($this->container['countryId']) > 3)) {
            $invalidProperties[] = "invalid value for 'countryId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 60)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) > 25)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['languageId']) && (mb_strlen($this->container['languageId']) > 3)) {
            $invalidProperties[] = "invalid value for 'languageId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 40)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street1']) && (mb_strlen($this->container['street1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street2']) && (mb_strlen($this->container['street2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 25)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['zipCode']) && (mb_strlen($this->container['zipCode']) > 10)) {
            $invalidProperties[] = "invalid value for 'zipCode', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addressGuid
     *
     * @return string|null
     */
    public function getAddressGuid()
    {
        return $this->container['addressGuid'];
    }

    /**
     * Sets addressGuid
     *
     * @param string|null $addressGuid addressGuid
     *
     * @return $this
     */
    public function setAddressGuid($addressGuid)
    {
        if (!is_null($addressGuid) && (mb_strlen($addressGuid) > 32)) {
            throw new \InvalidArgumentException('invalid length for $addressGuid when calling Address., must be smaller than or equal to 32.');
        }

        $this->container['addressGuid'] = $addressGuid;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return int|null
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param int|null $addressId addressId
     *
     * @return $this
     */
    public function setAddressId($addressId)
    {

        if (!is_null($addressId) && ($addressId > 999)) {
            throw new \InvalidArgumentException('invalid value for $addressId when calling Address., must be smaller than or equal to 999.');
        }
        if (!is_null($addressId) && ($addressId < 0)) {
            throw new \InvalidArgumentException('invalid value for $addressId when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets addressType
     *
     * @return int|null
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param int|null $addressType addressType
     *
     * @return $this
     */
    public function setAddressType($addressType)
    {
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 30.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets contactPerson
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contactPerson'];
    }

    /**
     * Sets contactPerson
     *
     * @param string|null $contactPerson contactPerson
     *
     * @return $this
     */
    public function setContactPerson($contactPerson)
    {
        if (!is_null($contactPerson) && (mb_strlen($contactPerson) > 55)) {
            throw new \InvalidArgumentException('invalid length for $contactPerson when calling Address., must be smaller than or equal to 55.');
        }

        $this->container['contactPerson'] = $contactPerson;

        return $this;
    }

    /**
     * Gets countryId
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['countryId'];
    }

    /**
     * Sets countryId
     *
     * @param string|null $countryId countryId
     *
     * @return $this
     */
    public function setCountryId($countryId)
    {
        if (!is_null($countryId) && (mb_strlen($countryId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $countryId when calling Address., must be smaller than or equal to 3.');
        }

        $this->container['countryId'] = $countryId;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 60)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Address., must be smaller than or equal to 60.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        if (!is_null($fax) && (mb_strlen($fax) > 25)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling Address., must be smaller than or equal to 25.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets fullAddress
     *
     * @return string|null
     */
    public function getFullAddress()
    {
        return $this->container['fullAddress'];
    }

    /**
     * Sets fullAddress
     *
     * @param string|null $fullAddress fullAddress
     *
     * @return $this
     */
    public function setFullAddress($fullAddress)
    {
        $this->container['fullAddress'] = $fullAddress;

        return $this;
    }

    /**
     * Gets languageId
     *
     * @return string|null
     */
    public function getLanguageId()
    {
        return $this->container['languageId'];
    }

    /**
     * Sets languageId
     *
     * @param string|null $languageId languageId
     *
     * @return $this
     */
    public function setLanguageId($languageId)
    {
        if (!is_null($languageId) && (mb_strlen($languageId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $languageId when calling Address., must be smaller than or equal to 3.');
        }

        $this->container['languageId'] = $languageId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Address., must be smaller than or equal to 40.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return int|null
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param int|null $organizationId organizationId
     *
     * @return $this
     */
    public function setOrganizationId($organizationId)
    {
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string|null $street1 street1
     *
     * @return $this
     */
    public function setStreet1($street1)
    {
        if (!is_null($street1) && (mb_strlen($street1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street1 when calling Address., must be smaller than or equal to 40.');
        }

        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string|null $street2 street2
     *
     * @return $this
     */
    public function setStreet2($street2)
    {
        if (!is_null($street2) && (mb_strlen($street2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street2 when calling Address., must be smaller than or equal to 40.');
        }

        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        if (!is_null($telephone) && (mb_strlen($telephone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling Address., must be smaller than or equal to 25.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string|null $zipCode zipCode
     *
     * @return $this
     */
    public function setZipCode($zipCode)
    {
        if (!is_null($zipCode) && (mb_strlen($zipCode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zipCode when calling Address., must be smaller than or equal to 10.');
        }

        $this->container['zipCode'] = $zipCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


