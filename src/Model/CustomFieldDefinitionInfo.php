<?php
/**
 * CustomFieldDefinitionInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * CustomFieldDefinitionInfo Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomFieldDefinitionInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomFieldDefinitionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowedValues' => 'string[]',
        'appliedToEntity' => 'int',
        'constraintEntity' => 'int',
        'constraints' => 'string[]',
        'digitsAfterSeperator' => 'int',
        'digitsBeforeSeperator' => 'int',
        'entity' => 'int',
        'groupName' => 'string',
        'isRequired' => 'bool',
        'length' => 'int',
        'mask' => 'string',
        'maxValue' => 'int',
        'minValue' => 'int',
        'name' => 'string',
        'title' => 'string',
        'type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'allowedValues' => null,
        'appliedToEntity' => null,
        'constraintEntity' => null,
        'constraints' => null,
        'digitsAfterSeperator' => null,
        'digitsBeforeSeperator' => null,
        'entity' => null,
        'groupName' => null,
        'isRequired' => null,
        'length' => 'int32',
        'mask' => null,
        'maxValue' => null,
        'minValue' => null,
        'name' => null,
        'title' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowedValues' => 'allowedValues',
        'appliedToEntity' => 'appliedToEntity',
        'constraintEntity' => 'constraintEntity',
        'constraints' => 'constraints',
        'digitsAfterSeperator' => 'digitsAfterSeperator',
        'digitsBeforeSeperator' => 'digitsBeforeSeperator',
        'entity' => 'entity',
        'groupName' => 'groupName',
        'isRequired' => 'isRequired',
        'length' => 'length',
        'mask' => 'mask',
        'maxValue' => 'maxValue',
        'minValue' => 'minValue',
        'name' => 'name',
        'title' => 'title',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowedValues' => 'setAllowedValues',
        'appliedToEntity' => 'setAppliedToEntity',
        'constraintEntity' => 'setConstraintEntity',
        'constraints' => 'setConstraints',
        'digitsAfterSeperator' => 'setDigitsAfterSeperator',
        'digitsBeforeSeperator' => 'setDigitsBeforeSeperator',
        'entity' => 'setEntity',
        'groupName' => 'setGroupName',
        'isRequired' => 'setIsRequired',
        'length' => 'setLength',
        'mask' => 'setMask',
        'maxValue' => 'setMaxValue',
        'minValue' => 'setMinValue',
        'name' => 'setName',
        'title' => 'setTitle',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowedValues' => 'getAllowedValues',
        'appliedToEntity' => 'getAppliedToEntity',
        'constraintEntity' => 'getConstraintEntity',
        'constraints' => 'getConstraints',
        'digitsAfterSeperator' => 'getDigitsAfterSeperator',
        'digitsBeforeSeperator' => 'getDigitsBeforeSeperator',
        'entity' => 'getEntity',
        'groupName' => 'getGroupName',
        'isRequired' => 'getIsRequired',
        'length' => 'getLength',
        'mask' => 'getMask',
        'maxValue' => 'getMaxValue',
        'minValue' => 'getMinValue',
        'name' => 'getName',
        'title' => 'getTitle',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowedValues'] = isset($data['allowedValues']) ? $data['allowedValues'] : null;
        $this->container['appliedToEntity'] = isset($data['appliedToEntity']) ? $data['appliedToEntity'] : null;
        $this->container['constraintEntity'] = isset($data['constraintEntity']) ? $data['constraintEntity'] : null;
        $this->container['constraints'] = isset($data['constraints']) ? $data['constraints'] : null;
        $this->container['digitsAfterSeperator'] = isset($data['digitsAfterSeperator']) ? $data['digitsAfterSeperator'] : null;
        $this->container['digitsBeforeSeperator'] = isset($data['digitsBeforeSeperator']) ? $data['digitsBeforeSeperator'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['groupName'] = isset($data['groupName']) ? $data['groupName'] : null;
        $this->container['isRequired'] = isset($data['isRequired']) ? $data['isRequired'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['mask'] = isset($data['mask']) ? $data['mask'] : null;
        $this->container['maxValue'] = isset($data['maxValue']) ? $data['maxValue'] : null;
        $this->container['minValue'] = isset($data['minValue']) ? $data['minValue'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowedValues
     *
     * @return string[]|null
     */
    public function getAllowedValues()
    {
        return $this->container['allowedValues'];
    }

    /**
     * Sets allowedValues
     *
     * @param string[]|null $allowedValues allowedValues
     *
     * @return $this
     */
    public function setAllowedValues($allowedValues)
    {
        $this->container['allowedValues'] = $allowedValues;

        return $this;
    }

    /**
     * Gets appliedToEntity
     *
     * @return int|null
     */
    public function getAppliedToEntity()
    {
        return $this->container['appliedToEntity'];
    }

    /**
     * Sets appliedToEntity
     *
     * @param int|null $appliedToEntity 0 = None 1 = SalesOrder 2 = PurchaseOrder 4 = ShippingOrder 8 = Quote
     *
     * @return $this
     */
    public function setAppliedToEntity($appliedToEntity)
    {
        $this->container['appliedToEntity'] = $appliedToEntity;

        return $this;
    }

    /**
     * Gets constraintEntity
     *
     * @return int|null
     */
    public function getConstraintEntity()
    {
        return $this->container['constraintEntity'];
    }

    /**
     * Sets constraintEntity
     *
     * @param int|null $constraintEntity 0 = None 1 = Customer 2 = Supplier 4 = Product 8 = Subscription 16 = Account 32 = Person 64 = Project 128 = Organization 256 = HourType 512 = CostUnit
     *
     * @return $this
     */
    public function setConstraintEntity($constraintEntity)
    {
        $this->container['constraintEntity'] = $constraintEntity;

        return $this;
    }

    /**
     * Gets constraints
     *
     * @return string[]|null
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     *
     * @param string[]|null $constraints constraints
     *
     * @return $this
     */
    public function setConstraints($constraints)
    {
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets digitsAfterSeperator
     *
     * @return int|null
     */
    public function getDigitsAfterSeperator()
    {
        return $this->container['digitsAfterSeperator'];
    }

    /**
     * Sets digitsAfterSeperator
     *
     * @param int|null $digitsAfterSeperator digitsAfterSeperator
     *
     * @return $this
     */
    public function setDigitsAfterSeperator($digitsAfterSeperator)
    {
        $this->container['digitsAfterSeperator'] = $digitsAfterSeperator;

        return $this;
    }

    /**
     * Gets digitsBeforeSeperator
     *
     * @return int|null
     */
    public function getDigitsBeforeSeperator()
    {
        return $this->container['digitsBeforeSeperator'];
    }

    /**
     * Sets digitsBeforeSeperator
     *
     * @param int|null $digitsBeforeSeperator digitsBeforeSeperator
     *
     * @return $this
     */
    public function setDigitsBeforeSeperator($digitsBeforeSeperator)
    {
        $this->container['digitsBeforeSeperator'] = $digitsBeforeSeperator;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return int|null
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param int|null $entity 0 = None 1 = Customer 2 = Supplier 4 = Product 8 = Subscription 16 = Account 32 = Person 64 = Project 128 = Organization 256 = HourType 512 = CostUnit
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets groupName
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['groupName'];
    }

    /**
     * Sets groupName
     *
     * @param string|null $groupName groupName
     *
     * @return $this
     */
    public function setGroupName($groupName)
    {
        $this->container['groupName'] = $groupName;

        return $this;
    }

    /**
     * Gets isRequired
     *
     * @return bool|null
     */
    public function getIsRequired()
    {
        return $this->container['isRequired'];
    }

    /**
     * Sets isRequired
     *
     * @param bool|null $isRequired isRequired
     *
     * @return $this
     */
    public function setIsRequired($isRequired)
    {
        $this->container['isRequired'] = $isRequired;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int|null $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return string|null
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param string|null $mask mask
     *
     * @return $this
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets maxValue
     *
     * @return int|null
     */
    public function getMaxValue()
    {
        return $this->container['maxValue'];
    }

    /**
     * Sets maxValue
     *
     * @param int|null $maxValue maxValue
     *
     * @return $this
     */
    public function setMaxValue($maxValue)
    {
        $this->container['maxValue'] = $maxValue;

        return $this;
    }

    /**
     * Gets minValue
     *
     * @return int|null
     */
    public function getMinValue()
    {
        return $this->container['minValue'];
    }

    /**
     * Sets minValue
     *
     * @param int|null $minValue minValue
     *
     * @return $this
     */
    public function setMinValue($minValue)
    {
        $this->container['minValue'] = $minValue;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type 0 = None 1 = Alphanumeric 2 = Numeric 3 = Date 4 = Choice 5 = Memo 6 = Database
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


