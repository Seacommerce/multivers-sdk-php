<?php
/**
 * VatTransactionLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * VatTransactionLine Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VatTransactionLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VatTransactionLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amountNotDeductibleCur' => 'float',
        'amountTurnoverCur' => 'float',
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'currencyId' => 'string',
        'fiscalYear' => 'int',
        'vatAmountCur' => 'float',
        'vatCodeId' => 'int',
        'vatScenarioId' => 'int',
        'vatType' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amountNotDeductibleCur' => null,
        'amountTurnoverCur' => null,
        'canChange' => null,
        'cannotChangeReason' => null,
        'currencyId' => null,
        'fiscalYear' => 'int32',
        'vatAmountCur' => null,
        'vatCodeId' => 'int32',
        'vatScenarioId' => null,
        'vatType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amountNotDeductibleCur' => 'amountNotDeductibleCur',
        'amountTurnoverCur' => 'amountTurnoverCur',
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'currencyId' => 'currencyId',
        'fiscalYear' => 'fiscalYear',
        'vatAmountCur' => 'vatAmountCur',
        'vatCodeId' => 'vatCodeId',
        'vatScenarioId' => 'vatScenarioId',
        'vatType' => 'vatType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amountNotDeductibleCur' => 'setAmountNotDeductibleCur',
        'amountTurnoverCur' => 'setAmountTurnoverCur',
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'currencyId' => 'setCurrencyId',
        'fiscalYear' => 'setFiscalYear',
        'vatAmountCur' => 'setVatAmountCur',
        'vatCodeId' => 'setVatCodeId',
        'vatScenarioId' => 'setVatScenarioId',
        'vatType' => 'setVatType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amountNotDeductibleCur' => 'getAmountNotDeductibleCur',
        'amountTurnoverCur' => 'getAmountTurnoverCur',
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'currencyId' => 'getCurrencyId',
        'fiscalYear' => 'getFiscalYear',
        'vatAmountCur' => 'getVatAmountCur',
        'vatCodeId' => 'getVatCodeId',
        'vatScenarioId' => 'getVatScenarioId',
        'vatType' => 'getVatType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amountNotDeductibleCur'] = isset($data['amountNotDeductibleCur']) ? $data['amountNotDeductibleCur'] : null;
        $this->container['amountTurnoverCur'] = isset($data['amountTurnoverCur']) ? $data['amountTurnoverCur'] : null;
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['currencyId'] = isset($data['currencyId']) ? $data['currencyId'] : null;
        $this->container['fiscalYear'] = isset($data['fiscalYear']) ? $data['fiscalYear'] : null;
        $this->container['vatAmountCur'] = isset($data['vatAmountCur']) ? $data['vatAmountCur'] : null;
        $this->container['vatCodeId'] = isset($data['vatCodeId']) ? $data['vatCodeId'] : null;
        $this->container['vatScenarioId'] = isset($data['vatScenarioId']) ? $data['vatScenarioId'] : null;
        $this->container['vatType'] = isset($data['vatType']) ? $data['vatType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['vatCodeId']) && ($this->container['vatCodeId'] > 99)) {
            $invalidProperties[] = "invalid value for 'vatCodeId', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['vatCodeId']) && ($this->container['vatCodeId'] < 0)) {
            $invalidProperties[] = "invalid value for 'vatCodeId', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amountNotDeductibleCur
     *
     * @return float|null
     */
    public function getAmountNotDeductibleCur()
    {
        return $this->container['amountNotDeductibleCur'];
    }

    /**
     * Sets amountNotDeductibleCur
     *
     * @param float|null $amountNotDeductibleCur amountNotDeductibleCur
     *
     * @return $this
     */
    public function setAmountNotDeductibleCur($amountNotDeductibleCur)
    {
        $this->container['amountNotDeductibleCur'] = $amountNotDeductibleCur;

        return $this;
    }

    /**
     * Gets amountTurnoverCur
     *
     * @return float|null
     */
    public function getAmountTurnoverCur()
    {
        return $this->container['amountTurnoverCur'];
    }

    /**
     * Sets amountTurnoverCur
     *
     * @param float|null $amountTurnoverCur amountTurnoverCur
     *
     * @return $this
     */
    public function setAmountTurnoverCur($amountTurnoverCur)
    {
        $this->container['amountTurnoverCur'] = $amountTurnoverCur;

        return $this;
    }

    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId currencyId
     *
     * @return $this
     */
    public function setCurrencyId($currencyId)
    {
        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets fiscalYear
     *
     * @return int|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscalYear'];
    }

    /**
     * Sets fiscalYear
     *
     * @param int|null $fiscalYear fiscalYear
     *
     * @return $this
     */
    public function setFiscalYear($fiscalYear)
    {
        $this->container['fiscalYear'] = $fiscalYear;

        return $this;
    }

    /**
     * Gets vatAmountCur
     *
     * @return float|null
     */
    public function getVatAmountCur()
    {
        return $this->container['vatAmountCur'];
    }

    /**
     * Sets vatAmountCur
     *
     * @param float|null $vatAmountCur vatAmountCur
     *
     * @return $this
     */
    public function setVatAmountCur($vatAmountCur)
    {
        $this->container['vatAmountCur'] = $vatAmountCur;

        return $this;
    }

    /**
     * Gets vatCodeId
     *
     * @return int|null
     */
    public function getVatCodeId()
    {
        return $this->container['vatCodeId'];
    }

    /**
     * Sets vatCodeId
     *
     * @param int|null $vatCodeId vatCodeId
     *
     * @return $this
     */
    public function setVatCodeId($vatCodeId)
    {

        if (!is_null($vatCodeId) && ($vatCodeId > 99)) {
            throw new \InvalidArgumentException('invalid value for $vatCodeId when calling VatTransactionLine., must be smaller than or equal to 99.');
        }
        if (!is_null($vatCodeId) && ($vatCodeId < 0)) {
            throw new \InvalidArgumentException('invalid value for $vatCodeId when calling VatTransactionLine., must be bigger than or equal to 0.');
        }

        $this->container['vatCodeId'] = $vatCodeId;

        return $this;
    }

    /**
     * Gets vatScenarioId
     *
     * @return int|null
     */
    public function getVatScenarioId()
    {
        return $this->container['vatScenarioId'];
    }

    /**
     * Sets vatScenarioId
     *
     * @param int|null $vatScenarioId vatScenarioId
     *
     * @return $this
     */
    public function setVatScenarioId($vatScenarioId)
    {
        $this->container['vatScenarioId'] = $vatScenarioId;

        return $this;
    }

    /**
     * Gets vatType
     *
     * @return int|null
     */
    public function getVatType()
    {
        return $this->container['vatType'];
    }

    /**
     * Sets vatType
     *
     * @param int|null $vatType 0 = Goods 1 = Services 2 = Investments 3 = NoVat 4 = NotApplicable 5 = Purchase 6 = Sales 7 = Empty
     *
     * @return $this
     */
    public function setVatType($vatType)
    {
        $this->container['vatType'] = $vatType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


