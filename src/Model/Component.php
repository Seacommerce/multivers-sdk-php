<?php
/**
 * Component
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * Component Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Component implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Component';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'dateCreated' => 'string',
        'description' => 'string',
        'numberOfDecimals' => 'int',
        'priceExclVat' => 'float',
        'priceInclVat' => 'float',
        'pricePer' => 'float',
        'productId' => 'string',
        'productType' => 'int',
        'quantity' => 'float',
        'totalTransferPrice' => 'float',
        'transferPrice' => 'float',
        'unit' => 'string',
        'warehouseId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'canChange' => null,
        'cannotChangeReason' => null,
        'dateCreated' => null,
        'description' => null,
        'numberOfDecimals' => 'int32',
        'priceExclVat' => null,
        'priceInclVat' => null,
        'pricePer' => null,
        'productId' => null,
        'productType' => 'int32',
        'quantity' => null,
        'totalTransferPrice' => null,
        'transferPrice' => null,
        'unit' => null,
        'warehouseId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'dateCreated' => 'dateCreated',
        'description' => 'description',
        'numberOfDecimals' => 'numberOfDecimals',
        'priceExclVat' => 'priceExclVat',
        'priceInclVat' => 'priceInclVat',
        'pricePer' => 'pricePer',
        'productId' => 'productId',
        'productType' => 'productType',
        'quantity' => 'quantity',
        'totalTransferPrice' => 'totalTransferPrice',
        'transferPrice' => 'transferPrice',
        'unit' => 'unit',
        'warehouseId' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'dateCreated' => 'setDateCreated',
        'description' => 'setDescription',
        'numberOfDecimals' => 'setNumberOfDecimals',
        'priceExclVat' => 'setPriceExclVat',
        'priceInclVat' => 'setPriceInclVat',
        'pricePer' => 'setPricePer',
        'productId' => 'setProductId',
        'productType' => 'setProductType',
        'quantity' => 'setQuantity',
        'totalTransferPrice' => 'setTotalTransferPrice',
        'transferPrice' => 'setTransferPrice',
        'unit' => 'setUnit',
        'warehouseId' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'dateCreated' => 'getDateCreated',
        'description' => 'getDescription',
        'numberOfDecimals' => 'getNumberOfDecimals',
        'priceExclVat' => 'getPriceExclVat',
        'priceInclVat' => 'getPriceInclVat',
        'pricePer' => 'getPricePer',
        'productId' => 'getProductId',
        'productType' => 'getProductType',
        'quantity' => 'getQuantity',
        'totalTransferPrice' => 'getTotalTransferPrice',
        'transferPrice' => 'getTransferPrice',
        'unit' => 'getUnit',
        'warehouseId' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['numberOfDecimals'] = isset($data['numberOfDecimals']) ? $data['numberOfDecimals'] : null;
        $this->container['priceExclVat'] = isset($data['priceExclVat']) ? $data['priceExclVat'] : null;
        $this->container['priceInclVat'] = isset($data['priceInclVat']) ? $data['priceInclVat'] : null;
        $this->container['pricePer'] = isset($data['pricePer']) ? $data['pricePer'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['productType'] = isset($data['productType']) ? $data['productType'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['totalTransferPrice'] = isset($data['totalTransferPrice']) ? $data['totalTransferPrice'] : null;
        $this->container['transferPrice'] = isset($data['transferPrice']) ? $data['transferPrice'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['warehouseId'] = isset($data['warehouseId']) ? $data['warehouseId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['numberOfDecimals']) && ($this->container['numberOfDecimals'] > 3)) {
            $invalidProperties[] = "invalid value for 'numberOfDecimals', must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['numberOfDecimals']) && ($this->container['numberOfDecimals'] < 0)) {
            $invalidProperties[] = "invalid value for 'numberOfDecimals', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['priceExclVat']) && ($this->container['priceExclVat'] > 999999999.999)) {
            $invalidProperties[] = "invalid value for 'priceExclVat', must be smaller than or equal to 999999999.999.";
        }

        if (!is_null($this->container['priceExclVat']) && ($this->container['priceExclVat'] < 0)) {
            $invalidProperties[] = "invalid value for 'priceExclVat', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['priceInclVat']) && ($this->container['priceInclVat'] > 999999999.999)) {
            $invalidProperties[] = "invalid value for 'priceInclVat', must be smaller than or equal to 999999999.999.";
        }

        if (!is_null($this->container['priceInclVat']) && ($this->container['priceInclVat'] < 0)) {
            $invalidProperties[] = "invalid value for 'priceInclVat', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pricePer']) && ($this->container['pricePer'] > 999999.999)) {
            $invalidProperties[] = "invalid value for 'pricePer', must be smaller than or equal to 999999.999.";
        }

        if (!is_null($this->container['pricePer']) && ($this->container['pricePer'] < 0)) {
            $invalidProperties[] = "invalid value for 'pricePer', must be bigger than or equal to 0.";
        }

        if ($this->container['productId'] === null) {
            $invalidProperties[] = "'productId' can't be null";
        }
        if ((mb_strlen($this->container['productId']) > 14)) {
            $invalidProperties[] = "invalid value for 'productId', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 999999.999)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 999999.999.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 6)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['warehouseId']) && (mb_strlen($this->container['warehouseId']) > 3)) {
            $invalidProperties[] = "invalid value for 'warehouseId', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string|null $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets numberOfDecimals
     *
     * @return int|null
     */
    public function getNumberOfDecimals()
    {
        return $this->container['numberOfDecimals'];
    }

    /**
     * Sets numberOfDecimals
     *
     * @param int|null $numberOfDecimals numberOfDecimals
     *
     * @return $this
     */
    public function setNumberOfDecimals($numberOfDecimals)
    {

        if (!is_null($numberOfDecimals) && ($numberOfDecimals > 3)) {
            throw new \InvalidArgumentException('invalid value for $numberOfDecimals when calling Component., must be smaller than or equal to 3.');
        }
        if (!is_null($numberOfDecimals) && ($numberOfDecimals < 0)) {
            throw new \InvalidArgumentException('invalid value for $numberOfDecimals when calling Component., must be bigger than or equal to 0.');
        }

        $this->container['numberOfDecimals'] = $numberOfDecimals;

        return $this;
    }

    /**
     * Gets priceExclVat
     *
     * @return float|null
     */
    public function getPriceExclVat()
    {
        return $this->container['priceExclVat'];
    }

    /**
     * Sets priceExclVat
     *
     * @param float|null $priceExclVat priceExclVat
     *
     * @return $this
     */
    public function setPriceExclVat($priceExclVat)
    {

        if (!is_null($priceExclVat) && ($priceExclVat > 999999999.999)) {
            throw new \InvalidArgumentException('invalid value for $priceExclVat when calling Component., must be smaller than or equal to 999999999.999.');
        }
        if (!is_null($priceExclVat) && ($priceExclVat < 0)) {
            throw new \InvalidArgumentException('invalid value for $priceExclVat when calling Component., must be bigger than or equal to 0.');
        }

        $this->container['priceExclVat'] = $priceExclVat;

        return $this;
    }

    /**
     * Gets priceInclVat
     *
     * @return float|null
     */
    public function getPriceInclVat()
    {
        return $this->container['priceInclVat'];
    }

    /**
     * Sets priceInclVat
     *
     * @param float|null $priceInclVat priceInclVat
     *
     * @return $this
     */
    public function setPriceInclVat($priceInclVat)
    {

        if (!is_null($priceInclVat) && ($priceInclVat > 999999999.999)) {
            throw new \InvalidArgumentException('invalid value for $priceInclVat when calling Component., must be smaller than or equal to 999999999.999.');
        }
        if (!is_null($priceInclVat) && ($priceInclVat < 0)) {
            throw new \InvalidArgumentException('invalid value for $priceInclVat when calling Component., must be bigger than or equal to 0.');
        }

        $this->container['priceInclVat'] = $priceInclVat;

        return $this;
    }

    /**
     * Gets pricePer
     *
     * @return float|null
     */
    public function getPricePer()
    {
        return $this->container['pricePer'];
    }

    /**
     * Sets pricePer
     *
     * @param float|null $pricePer pricePer
     *
     * @return $this
     */
    public function setPricePer($pricePer)
    {

        if (!is_null($pricePer) && ($pricePer > 999999.999)) {
            throw new \InvalidArgumentException('invalid value for $pricePer when calling Component., must be smaller than or equal to 999999.999.');
        }
        if (!is_null($pricePer) && ($pricePer < 0)) {
            throw new \InvalidArgumentException('invalid value for $pricePer when calling Component., must be bigger than or equal to 0.');
        }

        $this->container['pricePer'] = $pricePer;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        if ((mb_strlen($productId) > 14)) {
            throw new \InvalidArgumentException('invalid length for $productId when calling Component., must be smaller than or equal to 14.');
        }

        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return int|null
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param int|null $productType productType
     *
     * @return $this
     */
    public function setProductType($productType)
    {
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity > 999999.999)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling Component., must be smaller than or equal to 999999.999.');
        }
        if (!is_null($quantity) && ($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling Component., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets totalTransferPrice
     *
     * @return float|null
     */
    public function getTotalTransferPrice()
    {
        return $this->container['totalTransferPrice'];
    }

    /**
     * Sets totalTransferPrice
     *
     * @param float|null $totalTransferPrice totalTransferPrice
     *
     * @return $this
     */
    public function setTotalTransferPrice($totalTransferPrice)
    {
        $this->container['totalTransferPrice'] = $totalTransferPrice;

        return $this;
    }

    /**
     * Gets transferPrice
     *
     * @return float|null
     */
    public function getTransferPrice()
    {
        return $this->container['transferPrice'];
    }

    /**
     * Sets transferPrice
     *
     * @param float|null $transferPrice transferPrice
     *
     * @return $this
     */
    public function setTransferPrice($transferPrice)
    {
        $this->container['transferPrice'] = $transferPrice;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 6)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Component., must be smaller than or equal to 6.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets warehouseId
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouseId'];
    }

    /**
     * Sets warehouseId
     *
     * @param string|null $warehouseId warehouseId
     *
     * @return $this
     */
    public function setWarehouseId($warehouseId)
    {
        if (!is_null($warehouseId) && (mb_strlen($warehouseId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $warehouseId when calling Component., must be smaller than or equal to 3.');
        }

        $this->container['warehouseId'] = $warehouseId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


