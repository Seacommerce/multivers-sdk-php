<?php
/**
 * DocumentLink
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * DocumentLink Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentLink implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canChange' => 'bool',
        'cannotChangeReason' => 'string',
        'dateCreated' => 'string',
        'description' => 'string',
        'documentLink' => 'string',
        'documentType' => 'string',
        'linkCategoryName' => 'string',
        'linkId' => 'string',
        'linkType' => 'string',
        'reference' => 'string',
        'subject' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'canChange' => null,
        'cannotChangeReason' => null,
        'dateCreated' => null,
        'description' => null,
        'documentLink' => null,
        'documentType' => null,
        'linkCategoryName' => null,
        'linkId' => null,
        'linkType' => null,
        'reference' => null,
        'subject' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canChange' => 'canChange',
        'cannotChangeReason' => 'cannotChangeReason',
        'dateCreated' => 'dateCreated',
        'description' => 'description',
        'documentLink' => 'documentLink',
        'documentType' => 'documentType',
        'linkCategoryName' => 'linkCategoryName',
        'linkId' => 'linkId',
        'linkType' => 'linkType',
        'reference' => 'reference',
        'subject' => 'subject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canChange' => 'setCanChange',
        'cannotChangeReason' => 'setCannotChangeReason',
        'dateCreated' => 'setDateCreated',
        'description' => 'setDescription',
        'documentLink' => 'setDocumentLink',
        'documentType' => 'setDocumentType',
        'linkCategoryName' => 'setLinkCategoryName',
        'linkId' => 'setLinkId',
        'linkType' => 'setLinkType',
        'reference' => 'setReference',
        'subject' => 'setSubject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canChange' => 'getCanChange',
        'cannotChangeReason' => 'getCannotChangeReason',
        'dateCreated' => 'getDateCreated',
        'description' => 'getDescription',
        'documentLink' => 'getDocumentLink',
        'documentType' => 'getDocumentType',
        'linkCategoryName' => 'getLinkCategoryName',
        'linkId' => 'getLinkId',
        'linkType' => 'getLinkType',
        'reference' => 'getReference',
        'subject' => 'getSubject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canChange'] = isset($data['canChange']) ? $data['canChange'] : null;
        $this->container['cannotChangeReason'] = isset($data['cannotChangeReason']) ? $data['cannotChangeReason'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['documentLink'] = isset($data['documentLink']) ? $data['documentLink'] : null;
        $this->container['documentType'] = isset($data['documentType']) ? $data['documentType'] : null;
        $this->container['linkCategoryName'] = isset($data['linkCategoryName']) ? $data['linkCategoryName'] : null;
        $this->container['linkId'] = isset($data['linkId']) ? $data['linkId'] : null;
        $this->container['linkType'] = isset($data['linkType']) ? $data['linkType'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 254)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 254.";
        }

        if ($this->container['documentLink'] === null) {
            $invalidProperties[] = "'documentLink' can't be null";
        }
        if ((mb_strlen($this->container['documentLink']) > 254)) {
            $invalidProperties[] = "invalid value for 'documentLink', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['linkCategoryName']) && (mb_strlen($this->container['linkCategoryName']) > 60)) {
            $invalidProperties[] = "invalid value for 'linkCategoryName', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 18)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 60)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 60.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canChange
     *
     * @return bool|null
     */
    public function getCanChange()
    {
        return $this->container['canChange'];
    }

    /**
     * Sets canChange
     *
     * @param bool|null $canChange canChange
     *
     * @return $this
     */
    public function setCanChange($canChange)
    {
        $this->container['canChange'] = $canChange;

        return $this;
    }

    /**
     * Gets cannotChangeReason
     *
     * @return string|null
     */
    public function getCannotChangeReason()
    {
        return $this->container['cannotChangeReason'];
    }

    /**
     * Sets cannotChangeReason
     *
     * @param string|null $cannotChangeReason cannotChangeReason
     *
     * @return $this
     */
    public function setCannotChangeReason($cannotChangeReason)
    {
        $this->container['cannotChangeReason'] = $cannotChangeReason;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string|null $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 254)) {
            throw new \InvalidArgumentException('invalid length for $description when calling DocumentLink., must be smaller than or equal to 254.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets documentLink
     *
     * @return string
     */
    public function getDocumentLink()
    {
        return $this->container['documentLink'];
    }

    /**
     * Sets documentLink
     *
     * @param string $documentLink documentLink
     *
     * @return $this
     */
    public function setDocumentLink($documentLink)
    {
        if ((mb_strlen($documentLink) > 254)) {
            throw new \InvalidArgumentException('invalid length for $documentLink when calling DocumentLink., must be smaller than or equal to 254.');
        }

        $this->container['documentLink'] = $documentLink;

        return $this;
    }

    /**
     * Gets documentType
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['documentType'];
    }

    /**
     * Sets documentType
     *
     * @param string|null $documentType documentType
     *
     * @return $this
     */
    public function setDocumentType($documentType)
    {
        $this->container['documentType'] = $documentType;

        return $this;
    }

    /**
     * Gets linkCategoryName
     *
     * @return string|null
     */
    public function getLinkCategoryName()
    {
        return $this->container['linkCategoryName'];
    }

    /**
     * Sets linkCategoryName
     *
     * @param string|null $linkCategoryName linkCategoryName
     *
     * @return $this
     */
    public function setLinkCategoryName($linkCategoryName)
    {
        if (!is_null($linkCategoryName) && (mb_strlen($linkCategoryName) > 60)) {
            throw new \InvalidArgumentException('invalid length for $linkCategoryName when calling DocumentLink., must be smaller than or equal to 60.');
        }

        $this->container['linkCategoryName'] = $linkCategoryName;

        return $this;
    }

    /**
     * Gets linkId
     *
     * @return string|null
     */
    public function getLinkId()
    {
        return $this->container['linkId'];
    }

    /**
     * Sets linkId
     *
     * @param string|null $linkId linkId
     *
     * @return $this
     */
    public function setLinkId($linkId)
    {
        $this->container['linkId'] = $linkId;

        return $this;
    }

    /**
     * Gets linkType
     *
     * @return string|null
     */
    public function getLinkType()
    {
        return $this->container['linkType'];
    }

    /**
     * Sets linkType
     *
     * @param string|null $linkType linkType
     *
     * @return $this
     */
    public function setLinkType($linkType)
    {
        $this->container['linkType'] = $linkType;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 18)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling DocumentLink., must be smaller than or equal to 18.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 60)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling DocumentLink., must be smaller than or equal to 60.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


