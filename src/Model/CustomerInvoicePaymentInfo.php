<?php
/**
 * CustomerInvoicePaymentInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UNIT4 Multivers WebApi
 *
 * Unofficial SDK for the UNIT4 Multivers WebApi version 1.10.0 (by Seacommerce).
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Seacommerce\Unit4\Multivers\Sdk\Model;

use \ArrayAccess;
use \Seacommerce\Unit4\Multivers\Sdk\ObjectSerializer;

/**
 * CustomerInvoicePaymentInfo Class Doc Comment
 *
 * @category Class
 * @package  Seacommerce\Unit4\Multivers\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerInvoicePaymentInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerInvoicePaymentInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'creditSqueezeAmount' => 'float',
        'creditSqueezeAmountCur' => 'float',
        'exchangeDifferenceAmount' => 'float',
        'fiscalYear' => 'int',
        'journalId' => 'string',
        'journalTransaction' => 'int',
        'paidAmount' => 'float',
        'paidAmountCur' => 'float',
        'paymentDate' => 'string',
        'paymentDifferenceAmount' => 'float',
        'paymentDifferenceAmountCur' => 'float',
        'paymentRebateAmount' => 'float',
        'paymentRebateAmountCur' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'creditSqueezeAmount' => null,
        'creditSqueezeAmountCur' => null,
        'exchangeDifferenceAmount' => null,
        'fiscalYear' => 'int32',
        'journalId' => null,
        'journalTransaction' => 'int32',
        'paidAmount' => null,
        'paidAmountCur' => null,
        'paymentDate' => null,
        'paymentDifferenceAmount' => null,
        'paymentDifferenceAmountCur' => null,
        'paymentRebateAmount' => null,
        'paymentRebateAmountCur' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creditSqueezeAmount' => 'creditSqueezeAmount',
        'creditSqueezeAmountCur' => 'creditSqueezeAmountCur',
        'exchangeDifferenceAmount' => 'exchangeDifferenceAmount',
        'fiscalYear' => 'fiscalYear',
        'journalId' => 'journalId',
        'journalTransaction' => 'journalTransaction',
        'paidAmount' => 'paidAmount',
        'paidAmountCur' => 'paidAmountCur',
        'paymentDate' => 'paymentDate',
        'paymentDifferenceAmount' => 'paymentDifferenceAmount',
        'paymentDifferenceAmountCur' => 'paymentDifferenceAmountCur',
        'paymentRebateAmount' => 'paymentRebateAmount',
        'paymentRebateAmountCur' => 'paymentRebateAmountCur'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creditSqueezeAmount' => 'setCreditSqueezeAmount',
        'creditSqueezeAmountCur' => 'setCreditSqueezeAmountCur',
        'exchangeDifferenceAmount' => 'setExchangeDifferenceAmount',
        'fiscalYear' => 'setFiscalYear',
        'journalId' => 'setJournalId',
        'journalTransaction' => 'setJournalTransaction',
        'paidAmount' => 'setPaidAmount',
        'paidAmountCur' => 'setPaidAmountCur',
        'paymentDate' => 'setPaymentDate',
        'paymentDifferenceAmount' => 'setPaymentDifferenceAmount',
        'paymentDifferenceAmountCur' => 'setPaymentDifferenceAmountCur',
        'paymentRebateAmount' => 'setPaymentRebateAmount',
        'paymentRebateAmountCur' => 'setPaymentRebateAmountCur'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creditSqueezeAmount' => 'getCreditSqueezeAmount',
        'creditSqueezeAmountCur' => 'getCreditSqueezeAmountCur',
        'exchangeDifferenceAmount' => 'getExchangeDifferenceAmount',
        'fiscalYear' => 'getFiscalYear',
        'journalId' => 'getJournalId',
        'journalTransaction' => 'getJournalTransaction',
        'paidAmount' => 'getPaidAmount',
        'paidAmountCur' => 'getPaidAmountCur',
        'paymentDate' => 'getPaymentDate',
        'paymentDifferenceAmount' => 'getPaymentDifferenceAmount',
        'paymentDifferenceAmountCur' => 'getPaymentDifferenceAmountCur',
        'paymentRebateAmount' => 'getPaymentRebateAmount',
        'paymentRebateAmountCur' => 'getPaymentRebateAmountCur'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creditSqueezeAmount'] = isset($data['creditSqueezeAmount']) ? $data['creditSqueezeAmount'] : null;
        $this->container['creditSqueezeAmountCur'] = isset($data['creditSqueezeAmountCur']) ? $data['creditSqueezeAmountCur'] : null;
        $this->container['exchangeDifferenceAmount'] = isset($data['exchangeDifferenceAmount']) ? $data['exchangeDifferenceAmount'] : null;
        $this->container['fiscalYear'] = isset($data['fiscalYear']) ? $data['fiscalYear'] : null;
        $this->container['journalId'] = isset($data['journalId']) ? $data['journalId'] : null;
        $this->container['journalTransaction'] = isset($data['journalTransaction']) ? $data['journalTransaction'] : null;
        $this->container['paidAmount'] = isset($data['paidAmount']) ? $data['paidAmount'] : null;
        $this->container['paidAmountCur'] = isset($data['paidAmountCur']) ? $data['paidAmountCur'] : null;
        $this->container['paymentDate'] = isset($data['paymentDate']) ? $data['paymentDate'] : null;
        $this->container['paymentDifferenceAmount'] = isset($data['paymentDifferenceAmount']) ? $data['paymentDifferenceAmount'] : null;
        $this->container['paymentDifferenceAmountCur'] = isset($data['paymentDifferenceAmountCur']) ? $data['paymentDifferenceAmountCur'] : null;
        $this->container['paymentRebateAmount'] = isset($data['paymentRebateAmount']) ? $data['paymentRebateAmount'] : null;
        $this->container['paymentRebateAmountCur'] = isset($data['paymentRebateAmountCur']) ? $data['paymentRebateAmountCur'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creditSqueezeAmount
     *
     * @return float|null
     */
    public function getCreditSqueezeAmount()
    {
        return $this->container['creditSqueezeAmount'];
    }

    /**
     * Sets creditSqueezeAmount
     *
     * @param float|null $creditSqueezeAmount creditSqueezeAmount
     *
     * @return $this
     */
    public function setCreditSqueezeAmount($creditSqueezeAmount)
    {
        $this->container['creditSqueezeAmount'] = $creditSqueezeAmount;

        return $this;
    }

    /**
     * Gets creditSqueezeAmountCur
     *
     * @return float|null
     */
    public function getCreditSqueezeAmountCur()
    {
        return $this->container['creditSqueezeAmountCur'];
    }

    /**
     * Sets creditSqueezeAmountCur
     *
     * @param float|null $creditSqueezeAmountCur creditSqueezeAmountCur
     *
     * @return $this
     */
    public function setCreditSqueezeAmountCur($creditSqueezeAmountCur)
    {
        $this->container['creditSqueezeAmountCur'] = $creditSqueezeAmountCur;

        return $this;
    }

    /**
     * Gets exchangeDifferenceAmount
     *
     * @return float|null
     */
    public function getExchangeDifferenceAmount()
    {
        return $this->container['exchangeDifferenceAmount'];
    }

    /**
     * Sets exchangeDifferenceAmount
     *
     * @param float|null $exchangeDifferenceAmount exchangeDifferenceAmount
     *
     * @return $this
     */
    public function setExchangeDifferenceAmount($exchangeDifferenceAmount)
    {
        $this->container['exchangeDifferenceAmount'] = $exchangeDifferenceAmount;

        return $this;
    }

    /**
     * Gets fiscalYear
     *
     * @return int|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscalYear'];
    }

    /**
     * Sets fiscalYear
     *
     * @param int|null $fiscalYear fiscalYear
     *
     * @return $this
     */
    public function setFiscalYear($fiscalYear)
    {
        $this->container['fiscalYear'] = $fiscalYear;

        return $this;
    }

    /**
     * Gets journalId
     *
     * @return string|null
     */
    public function getJournalId()
    {
        return $this->container['journalId'];
    }

    /**
     * Sets journalId
     *
     * @param string|null $journalId journalId
     *
     * @return $this
     */
    public function setJournalId($journalId)
    {
        $this->container['journalId'] = $journalId;

        return $this;
    }

    /**
     * Gets journalTransaction
     *
     * @return int|null
     */
    public function getJournalTransaction()
    {
        return $this->container['journalTransaction'];
    }

    /**
     * Sets journalTransaction
     *
     * @param int|null $journalTransaction journalTransaction
     *
     * @return $this
     */
    public function setJournalTransaction($journalTransaction)
    {
        $this->container['journalTransaction'] = $journalTransaction;

        return $this;
    }

    /**
     * Gets paidAmount
     *
     * @return float|null
     */
    public function getPaidAmount()
    {
        return $this->container['paidAmount'];
    }

    /**
     * Sets paidAmount
     *
     * @param float|null $paidAmount paidAmount
     *
     * @return $this
     */
    public function setPaidAmount($paidAmount)
    {
        $this->container['paidAmount'] = $paidAmount;

        return $this;
    }

    /**
     * Gets paidAmountCur
     *
     * @return float|null
     */
    public function getPaidAmountCur()
    {
        return $this->container['paidAmountCur'];
    }

    /**
     * Sets paidAmountCur
     *
     * @param float|null $paidAmountCur paidAmountCur
     *
     * @return $this
     */
    public function setPaidAmountCur($paidAmountCur)
    {
        $this->container['paidAmountCur'] = $paidAmountCur;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return string|null
     */
    public function getPaymentDate()
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param string|null $paymentDate paymentDate
     *
     * @return $this
     */
    public function setPaymentDate($paymentDate)
    {
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets paymentDifferenceAmount
     *
     * @return float|null
     */
    public function getPaymentDifferenceAmount()
    {
        return $this->container['paymentDifferenceAmount'];
    }

    /**
     * Sets paymentDifferenceAmount
     *
     * @param float|null $paymentDifferenceAmount paymentDifferenceAmount
     *
     * @return $this
     */
    public function setPaymentDifferenceAmount($paymentDifferenceAmount)
    {
        $this->container['paymentDifferenceAmount'] = $paymentDifferenceAmount;

        return $this;
    }

    /**
     * Gets paymentDifferenceAmountCur
     *
     * @return float|null
     */
    public function getPaymentDifferenceAmountCur()
    {
        return $this->container['paymentDifferenceAmountCur'];
    }

    /**
     * Sets paymentDifferenceAmountCur
     *
     * @param float|null $paymentDifferenceAmountCur paymentDifferenceAmountCur
     *
     * @return $this
     */
    public function setPaymentDifferenceAmountCur($paymentDifferenceAmountCur)
    {
        $this->container['paymentDifferenceAmountCur'] = $paymentDifferenceAmountCur;

        return $this;
    }

    /**
     * Gets paymentRebateAmount
     *
     * @return float|null
     */
    public function getPaymentRebateAmount()
    {
        return $this->container['paymentRebateAmount'];
    }

    /**
     * Sets paymentRebateAmount
     *
     * @param float|null $paymentRebateAmount paymentRebateAmount
     *
     * @return $this
     */
    public function setPaymentRebateAmount($paymentRebateAmount)
    {
        $this->container['paymentRebateAmount'] = $paymentRebateAmount;

        return $this;
    }

    /**
     * Gets paymentRebateAmountCur
     *
     * @return float|null
     */
    public function getPaymentRebateAmountCur()
    {
        return $this->container['paymentRebateAmountCur'];
    }

    /**
     * Sets paymentRebateAmountCur
     *
     * @param float|null $paymentRebateAmountCur paymentRebateAmountCur
     *
     * @return $this
     */
    public function setPaymentRebateAmountCur($paymentRebateAmountCur)
    {
        $this->container['paymentRebateAmountCur'] = $paymentRebateAmountCur;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


